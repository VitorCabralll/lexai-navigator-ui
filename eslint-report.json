[{"filePath":"/app/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/functions/src/functions/auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/functions/src/functions/criarAgenteComPrompt.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[704,707],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[704,707],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { onRequest } from 'firebase-functions/v2/https';\nimport * as logger from 'firebase-functions/v2/logger';\nimport * as admin from 'firebase-admin';\nimport * as express from 'express';\nimport * as cors from 'cors';\nimport { DocxProcessor } from '../services/docxProcessor';\nimport { validateRequest, criarAgenteSchema } from '../utils/validation';\nimport { handleError, ValidationError, AuthenticationError, AuthorizationError, NotFoundError } from '../utils/errors';\n\nconst app = express();\napp.use(cors({ origin: true }));\napp.use(express.json());\n\ninterface CriarAgenteRequest {\n  name: string;\n  theme: string;\n  description?: string;\n  workspaceId: string;\n  variables: string[];\n  structure: any[];\n  extractedText: string;\n  documentTemplate?: {\n    fileUrl: string;\n    fileName: string;\n  };\n}\n\n// Middleware de autenticação\nasync function authenticateUser(req: express.Request): Promise<string> {\n  const authHeader = req.headers.authorization;\n  \n  if (!authHeader?.startsWith('Bearer ')) {\n    throw new AuthenticationError('Token de autenticação necessário');\n  }\n\n  try {\n    const token = authHeader.split('Bearer ')[1];\n    const decodedToken = await admin.auth().verifyIdToken(token);\n    return decodedToken.uid;\n  } catch (error) {\n    logger.error('Erro ao verificar token:', { error: error instanceof Error ? error.toString() : error });\n    throw new AuthenticationError('Token inválido ou expirado');\n  }\n}\n\n// Middleware de autorização de workspace\nasync function authorizeWorkspace(workspaceId: string, userId: string): Promise<void> {\n  const workspaceRef = admin.firestore().collection('workspaces').doc(workspaceId);\n  const workspaceDoc = await workspaceRef.get();\n  \n  if (!workspaceDoc.exists) {\n    throw new NotFoundError('Workspace não encontrado');\n  }\n\n  const workspace = workspaceDoc.data();\n  if (workspace?.ownerId !== userId && !workspace?.members?.includes(userId)) {\n    throw new AuthorizationError('Acesso negado ao workspace');\n  }\n}\n\n// Verificar se agente com mesmo nome já existe no workspace\nasync function checkAgentNameUnique(name: string, workspaceId: string): Promise<void> {\n  const agentsRef = admin.firestore().collection('agents');\n  const existingAgent = await agentsRef\n    .where('name', '==', name)\n    .where('workspaceId', '==', workspaceId)\n    .limit(1)\n    .get();\n\n  if (!existingAgent.empty) {\n    throw new ValidationError('Já existe um agente com este nome no workspace');\n  }\n}\n\napp.post('/criar-agente', async (req, res) => {\n  const startTime = Date.now();\n  \n  try {\n    // Validar dados da requisição\n    const requestData = validateRequest(criarAgenteSchema, req.body);\n    const {\n      name,\n      theme,\n      description = '',\n      workspaceId,\n      variables,\n      structure,\n      extractedText,\n      documentTemplate\n    } = requestData as CriarAgenteRequest;\n\n    logger.info('Iniciando criação de agente', { name, workspaceId });\n\n    // Autenticar usuário\n    const userId = await authenticateUser(req);\n    \n    // Autorizar acesso ao workspace\n    await authorizeWorkspace(workspaceId, userId);\n\n    // Verificar se nome do agente é único no workspace\n    await checkAgentNameUnique(name, workspaceId);\n\n    // Gerar prompt mestre\n    const docxProcessor = new DocxProcessor();\n    const masterPrompt = docxProcessor.generateMasterPrompt(structure, variables, extractedText);\n\n    // Preparar dados do agente\n    const agentData = {\n      name,\n      description,\n      theme,\n      workspaceId,\n      createdBy: userId,\n      masterPrompt,\n      documentTemplate: {\n        fileUrl: documentTemplate?.fileUrl || '',\n        fileName: documentTemplate?.fileName || '',\n        structure: {\n          sections: structure,\n          style: {\n            font: 'Times New Roman',\n            fontSize: 12,\n            spacing: 1.5,\n            margins: { top: 2.5, bottom: 2.5, left: 3, right: 2 }\n          }\n        },\n        variables,\n        metadata: {\n          textLength: extractedText.length,\n          sectionsFound: structure.length,\n          variablesFound: variables.length\n        }\n      },\n      createdAt: admin.firestore.FieldValue.serverTimestamp(),\n      updatedAt: admin.firestore.FieldValue.serverTimestamp()\n    };\n\n    // Salvar agente no Firestore\n    const agentRef = admin.firestore().collection('agents').doc();\n    await agentRef.set(agentData);\n\n    const processingTime = Date.now() - startTime;\n    logger.info('Agente criado com sucesso', { agentId: agentRef.id, processingTime });\n\n    // Retornar resposta\n    res.json({\n      success: true,\n      agentId: agentRef.id,\n      agent: {\n        id: agentRef.id,\n        ...agentData,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      message: 'Agente criado com sucesso',\n      metadata: {\n        variablesDetected: variables.length,\n        sectionsFound: structure.length,\n        promptLength: masterPrompt.length,\n        processingTime\n      }\n    });\n\n  } catch (error) {\n    const processingTime = Date.now() - startTime;\n    logger.error('Erro ao criar agente', { error: error instanceof Error ? error.toString() : error, processingTime });\n    \n    const errorResponse = handleError(error);\n    res.status(errorResponse.statusCode).json(errorResponse);\n  }\n});\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.json({\n    status: 'OK',\n    service: 'criarAgenteComPrompt',\n    timestamp: new Date().toISOString(),\n    version: '1.0.0'\n  });\n});\n\nexport const criarAgenteComPrompt = onRequest({\n  timeoutSeconds: 60,\n  memory: \"512MiB\",\n  maxInstances: 10\n}, app);\n","usedDeprecatedRules":[]},{"filePath":"/app/functions/src/functions/exportarDocumento.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'logger' is defined but never used.","line":3,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { onRequest } from 'firebase-functions/v2/https';\nimport * as logger from 'firebase-functions/v2/logger';\nimport * as admin from 'firebase-admin';\nimport { Request, Response } from 'express';\nimport { DocumentService } from '../services/documentService';\nimport { validateRequest, exportarDocumentoSchema } from '../utils/validation';\nimport { handleError } from '../utils/errors';\n\n\nasync function exportarDocumentoHandler(req: Request, res: Response) {\n  try {\n    const documentoId = req.params.documentoId;\n    \n    // Validar corpo da requisição\n    const validatedBody = validateRequest(exportarDocumentoSchema, req.body);\n    const { formato } = validatedBody;\n\n    // Validar parâmetro de rota\n    if (!documentoId) {\n      // Este erro deveria ser pego por uma validação de schema de rota se existisse,\n      // mas por enquanto manteremos uma verificação manual ou deixaremos o handleError pegar.\n      // Para consistência, vamos usar handleError.\n      throw new Error('documentoId é obrigatório'); \n    }\n\n    // Verificar autenticação\n    const authHeader = req.headers.authorization;\n    if (!authHeader?.startsWith('Bearer ')) {\n      return res.status(401).json({\n        success: false,\n        error: 'Token de autenticação obrigatório'\n      });\n    }\n\n    const token = authHeader.split('Bearer ')[1];\n    const decodedToken = await admin.auth().verifyIdToken(token);\n    const uid = decodedToken.uid;\n\n    // Exportar documento\n    const documentService = new DocumentService();\n    const resultado = await documentService.exportarDocumento(documentoId, formato, uid);\n\n    return res.json(resultado);\n\n  } catch (error) {\n    // O logger.error já está no handleError, então não precisamos duplicar aqui se handleError for chamado.\n    // No entanto, se quisermos loggar especificamente neste ponto ANTES do handleError, podemos manter.\n    // Por agora, vamos remover e confiar no log dentro do handleError.\n    // logger.error('Erro ao exportar documento:', { error: error instanceof Error ? error.toString() : error });\n    \n    const errorResponse = handleError(error);\n    return res.status(errorResponse.statusCode).json(errorResponse);\n  }\n}\n\nexport const exportarDocumento = onRequest(\n  {\n    timeoutSeconds: 60,\n    memory: '512MiB'\n  },\n  async (req: Request, res: Response) => {\n    // Configurar CORS\n    res.set('Access-Control-Allow-Origin', '*');\n    res.set('Access-Control-Allow-Methods', 'POST, OPTIONS');\n    res.set('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n\n    if (req.method === 'OPTIONS') {\n      return res.status(200).end();\n    }\n\n    if (req.method !== 'POST') {\n      return res.status(405).json({\n        success: false,\n        error: 'Método não permitido'\n      });\n    }\n\n    return exportarDocumentoHandler(req, res);\n  }\n);\n","usedDeprecatedRules":[]},{"filePath":"/app/functions/src/functions/gerarDocumentoComIA.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onCall' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HttpsError' is defined but never used.","line":2,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StorageService' is defined but never used.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'extractTitle' is defined but never used.","line":161,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":161,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { onCall, HttpsError } from 'firebase-functions/v2/https';\nimport { onRequest } from 'firebase-functions/v2/https';\nimport * as logger from 'firebase-functions/v2/logger';\nimport * as admin from 'firebase-admin';\nimport * as express from 'express';\nimport * as cors from 'cors';\nimport { AIService } from '../services/aiService';\nimport { StorageService } from '../services/storageService';\nimport { GenerationRequest, ProcessingStep } from '../types/document';\nimport { Agent } from '../types/agent';\nimport { validateRequest, gerarDocumentoSchema } from '../utils/validation';\nimport { handleError } from '../utils/errors';\n\nconst app = express();\napp.use(cors({ origin: true }));\napp.use(express.json({ limit: '10mb' }));\n\napp.post('/gerar-documento', async (req, res) => {\n  try {\n    const validatedBody = validateRequest(gerarDocumentoSchema, req.body);\n    const request: GenerationRequest = validatedBody;\n\n    // Verificar autenticação\n    const authHeader = req.headers.authorization;\n    if (!authHeader?.startsWith('Bearer ')) {\n      return res.status(401).json({\n        success: false,\n        error: 'Token de autenticação necessário'\n      });\n    }\n\n    const token = authHeader.split('Bearer ')[1];\n    const decodedToken = await admin.auth().verifyIdToken(token);\n    const userId = decodedToken.uid;\n\n    // Verificar acesso ao workspace\n    const workspaceRef = admin.firestore().collection('workspaces').doc(request.workspaceId);\n    const workspaceDoc = await workspaceRef.get();\n    \n    if (!workspaceDoc.exists) {\n      return res.status(404).json({\n        success: false,\n        error: 'Workspace não encontrado'\n      });\n    }\n\n    const workspace = workspaceDoc.data();\n    if (workspace?.ownerId !== userId && !workspace?.members?.includes(userId)) {\n      return res.status(403).json({\n        success: false,\n        error: 'Acesso negado ao workspace'\n      });\n    }\n\n    // Buscar agente se necessário\n    let agent: Agent | undefined;\n    if (request.mode === 'agent') {\n      const agentRef = admin.firestore().collection('agents').doc(request.agentId!);\n      const agentDoc = await agentRef.get();\n      \n      if (!agentDoc.exists) {\n        return res.status(404).json({\n          success: false,\n          error: 'Agente não encontrado'\n        });\n      }\n      \n      agent = agentDoc.data() as Agent;\n    }\n\n    // Criar documento no Firestore\n    const documentRef = admin.firestore().collection('documents').doc();\n    const documentId = documentRef.id;\n\n    const steps: ProcessingStep[] = [];\n    const startTime = Date.now();\n\n    // Inicializar documento\n    await documentRef.set({\n      id: documentId,\n      title: `Documento - ${new Date().toLocaleDateString()}`,\n      content: '',\n      agentId: request.agentId || null,\n      promptType: request.promptType || null,\n      workspaceId: request.workspaceId,\n      userId,\n      metadata: {\n        generatedAt: admin.firestore.FieldValue.serverTimestamp(),\n        tokensUsed: 0,\n        processingTime: 0,\n        steps: []\n      },\n      status: 'draft',\n      createdAt: admin.firestore.FieldValue.serverTimestamp(),\n      updatedAt: admin.firestore.FieldValue.serverTimestamp()\n    });\n\n    try {\n      // Gerar documento com IA\n      const aiService = new AIService();\n      const { content, sections, tokensUsed } = await aiService.generateDocument(\n        request,\n        agent,\n        steps\n      );\n\n      const processingTime = Date.now() - startTime;\n\n      // Atualizar documento com resultado\n      await documentRef.update({\n        title: this.extractTitle(content) || `Documento - ${new Date().toLocaleDateString()}`,\n        content,\n        metadata: {\n          generatedAt: admin.firestore.FieldValue.serverTimestamp(),\n          tokensUsed,\n          processingTime,\n          steps\n        },\n        status: 'final',\n        updatedAt: admin.firestore.FieldValue.serverTimestamp()\n      });\n\n      res.json({\n        success: true,\n        documentId,\n        content,\n        metadata: {\n          generatedAt: new Date(),\n          tokensUsed,\n          processingTime,\n          steps\n        },\n        sections\n      });\n\n    } catch (error) {\n      logger.error('Erro na geração:', { error: error instanceof Error ? error.toString() : error });\n      \n      // Atualizar documento com erro\n      await documentRef.update({\n        status: 'error',\n        metadata: {\n          error: error instanceof Error ? error.message : 'Erro desconhecido',\n          steps\n        },\n        updatedAt: admin.firestore.FieldValue.serverTimestamp()\n      });\n      // Padronizar resposta de erro\n      const errorResponse = handleError(error);\n      res.status(errorResponse.statusCode).json(errorResponse);\n    }\n\n  } catch (error) {\n    logger.error('Erro geral:', { error: error instanceof Error ? error.toString() : error });\n    const errorResponse = handleError(error);\n    res.status(errorResponse.statusCode).json(errorResponse);\n  }\n});\n\nfunction extractTitle(content: string): string | null {\n  const lines = content.split('\\n').filter(line => line.trim());\n  if (lines.length > 0) {\n    const firstLine = lines[0].trim();\n    if (firstLine.length > 5 && firstLine.length < 100) {\n      return firstLine;\n    }\n  }\n  return null;\n}\n\nexport const gerarDocumentoComIA = onRequest(app);\n","usedDeprecatedRules":[]},{"filePath":"/app/functions/src/functions/listarAgentesWorkspace.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/functions/src/functions/listarPromptsPublicos.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/functions/src/functions/processarModeloDocx.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onCall' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HttpsError' is defined but never used.","line":2,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { onCall, HttpsError } from 'firebase-functions/v2/https';\nimport { onRequest } from 'firebase-functions/v2/https';\nimport * as logger from 'firebase-functions/v2/logger';\nimport * as admin from 'firebase-admin';\nimport * as express from 'express';\nimport * as multer from 'multer';\nimport * as cors from 'cors';\nimport { DocxProcessor } from '../services/docxProcessor';\nimport { StorageService } from '../services/storageService';\nimport { validateRequest, processarModeloSchema } from '../utils/validation';\nimport { handleError, ValidationError, AuthenticationError, AuthorizationError, NotFoundError } from '../utils/errors';\n\nconst app = express();\napp.use(cors({ origin: true }));\n\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 50 * 1024 * 1024, // 50MB\n    files: 1\n  },\n  fileFilter: (req, file, cb) => {\n    const allowedMimes = [\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n    ];\n    \n    if (allowedMimes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new ValidationError('Apenas arquivos .docx são permitidos'));\n    }\n  }\n});\n\ninterface ProcessarModeloRequest {\n  agentId: string;\n  workspaceId: string;\n}\n\n// Middleware de autenticação\nasync function authenticateUser(req: express.Request): Promise<string> {\n  const authHeader = req.headers.authorization;\n  \n  if (!authHeader?.startsWith('Bearer ')) {\n    throw new AuthenticationError('Token de autenticação necessário');\n  }\n\n  try {\n    const token = authHeader.split('Bearer ')[1];\n    const decodedToken = await admin.auth().verifyIdToken(token);\n    return decodedToken.uid;\n  } catch (error) {\n    logger.error('Erro ao verificar token:', { error: error instanceof Error ? error.toString() : error });\n    throw new AuthenticationError('Token inválido ou expirado');\n  }\n}\n\n// Middleware de autorização de workspace\nasync function authorizeWorkspace(workspaceId: string, userId: string): Promise<void> {\n  const workspaceRef = admin.firestore().collection('workspaces').doc(workspaceId);\n  const workspaceDoc = await workspaceRef.get();\n  \n  if (!workspaceDoc.exists) {\n    throw new NotFoundError('Workspace não encontrado');\n  }\n\n  const workspace = workspaceDoc.data();\n  if (workspace?.ownerId !== userId && !workspace?.members?.includes(userId)) {\n    throw new AuthorizationError('Acesso negado ao workspace');\n  }\n}\n\napp.post('/processar-modelo', upload.single('file'), async (req, res) => {\n  const startTime = Date.now();\n  \n  try {\n    // Validar dados da requisição\n    const requestData = validateRequest(processarModeloSchema, req.body);\n    const { agentId, workspaceId } = requestData as ProcessarModeloRequest;\n    \n    const file = req.file;\n    if (!file) {\n      return res.status(400).json(handleError(new ValidationError('Arquivo .docx é obrigatório')));\n    }\n\n    logger.info(`Iniciando processamento de modelo`, { workspaceId, agentId, fileName: file.originalname});\n\n    // Autenticar usuário\n    const userId = await authenticateUser(req);\n    \n    // Autorizar acesso ao workspace\n    await authorizeWorkspace(workspaceId, userId);\n\n    // Verificar se o agente existe e pertence ao workspace\n    const agentRef = admin.firestore().collection('agents').doc(agentId);\n    const agentDoc = await agentRef.get();\n    \n    if (!agentDoc.exists) {\n      return res.status(404).json(handleError(new NotFoundError('Agente não encontrado')));\n    }\n\n    const agentData = agentDoc.data();\n    if (agentData?.workspaceId !== workspaceId) {\n      return res.status(403).json(handleError(new AuthorizationError('Agente não pertence ao workspace')));\n    }\n\n    // Processar documento com retry\n    const docxProcessor = new DocxProcessor();\n    const storageService = new StorageService();\n\n    logger.info('Processando arquivo DOCX...');\n    const { textoExtraido, estruturas, variaveis } = await docxProcessor.processWithRetry(file.buffer);\n    \n    logger.info(`Processamento concluído`, { sections: estruturas.length, variables: variaveis.length });\n\n    // Gerar prompt mestre\n    const masterPrompt = docxProcessor.generateMasterPrompt(estruturas, variaveis, textoExtraido);\n\n    // Salvar arquivo no Storage\n    logger.info('Salvando arquivo no Firebase Storage...');\n    const fileUrl = await storageService.uploadFile(\n      file.buffer,\n      file.originalname,\n      workspaceId,\n      'uploads'\n    );\n\n    // Criar prompt no Firestore\n    const promptRef = admin.firestore().collection('prompts').doc();\n    const promptData = {\n      agentId,\n      content: masterPrompt,\n      variables: variaveis,\n      structure: {\n        sections: estruturas,\n        style: {\n          font: 'Times New Roman',\n          fontSize: 12,\n          spacing: 1.5,\n          margins: { top: 2.5, bottom: 2.5, left: 3, right: 2 }\n        }\n      },\n      version: 1,\n      fileUrl,\n      fileName: file.originalname,\n      processing: {\n        textLength: textoExtraido.length,\n        sectionsFound: estruturas.length,\n        variablesFound: variaveis.length,\n        processingTime: Date.now() - startTime\n      },\n      createdAt: admin.firestore.FieldValue.serverTimestamp(),\n      createdBy: userId\n    };\n\n    await promptRef.set(promptData);\n\n    // Atualizar agente com referência ao template\n    await agentRef.update({\n      masterPrompt,\n      documentTemplate: {\n        fileUrl,\n        fileName: file.originalname,\n        structure: {\n          sections: estruturas,\n          style: {\n            font: 'Times New Roman',\n            fontSize: 12,\n            spacing: 1.5,\n            margins: { top: 2.5, bottom: 2.5, left: 3, right: 2 }\n          }\n        },\n        variables: variaveis,\n        metadata: {\n          textLength: textoExtraido.length,\n          sectionsFound: estruturas.length,\n          variablesFound: variaveis.length\n        }\n      },\n      updatedAt: admin.firestore.FieldValue.serverTimestamp()\n    });\n\n    const processingTime = Date.now() - startTime;\n    logger.info(`Processamento completo`, { processingTime });\n\n    res.json({\n      success: true,\n      promptId: promptRef.id,\n      textoExtraido: textoExtraido.substring(0, 500) + '...', // Retornar apenas preview\n      estruturas,\n      variaveis,\n      metadata: {\n        textLength: textoExtraido.length,\n        sectionsFound: estruturas.length,\n        variablesFound: variaveis.length,\n        processingTime,\n        fileSize: file.size,\n        fileName: file.originalname\n      },\n      message: 'Modelo processado e agente atualizado com sucesso'\n    });\n\n  } catch (error) {\n    const processingTime = Date.now() - startTime;\n    logger.error(`Erro ao processar modelo`, { error: error instanceof Error ? error.toString() : error, processingTime });\n    \n    const errorResponse = handleError(error);\n    res.status(errorResponse.statusCode).json(errorResponse);\n  }\n});\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.json({\n    status: 'OK',\n    service: 'processarModeloDocx',\n    timestamp: new Date().toISOString(),\n    version: '2.0.0'\n  });\n});\n\nexport const processarModeloDocx = onRequest({\n  timeoutSeconds: 540,\n  memory: \"1GiB\",\n  maxInstances: 10\n}, app);\n","usedDeprecatedRules":[]},{"filePath":"/app/functions/src/functions/processarModeloDocxV2.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/functions/src/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/functions/src/services/aiAgentCreator.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[360,363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[360,363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { OpenAI } from 'openai';\nimport * as logger from 'firebase-functions/v2/logger';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { DocumentClassification, QualityMetrics, VariableDetection } from './intelligentDocxProcessor';\nimport { Section } from '../types/agent';\n\n// Helper to convert error to string\nconst errorToString = (error: any): string => {\n  if (error instanceof Error) return error.message;\n  return String(error);\n};\n\nexport interface AgentCreationRequest {\n  documentClassification: DocumentClassification;\n  qualityMetrics: QualityMetrics;\n  variables: VariableDetection[];\n  structure: Section[];\n  extractedText: string;\n  userPreferences?: {\n    complexity: 'simple' | 'intermediate' | 'advanced';\n    focus: 'speed' | 'quality' | 'precision';\n    style: 'formal' | 'didactic' | 'technical';\n  };\n}\n\nexport interface AgentCreationResult {\n  suggestedName: string;\n  suggestedDescription: string;\n  optimizedPrompt: string;\n  specializations: string[];\n  confidenceScore: number;\n  recommendations: string[];\n}\n\nexport class AIAgentCreator {\n  private openai: OpenAI;\n\n  constructor() {\n    const apiKey = process.env.OPENAI_API_KEY;\n    if (!apiKey) {\n      throw new Error('OPENAI_API_KEY não configurada');\n    }\n    \n    this.openai = new OpenAI({\n      apiKey: apiKey\n    });\n  }\n\n  async createIntelligentAgent(request: AgentCreationRequest): Promise<AgentCreationResult> {\n    try {\n      logger.info('Iniciando criação inteligente de agente...');\n\n      // Gerar nome e descrição do agente\n      const agentIdentity = await this.generateAgentIdentity(request);\n      \n      // Otimizar prompt com IA\n      const optimizedPrompt = await this.optimizePromptWithAI(request, agentIdentity);\n      \n      // Gerar especializações\n      const specializations = this.generateSpecializations(request);\n      \n      // Calcular score de confiança\n      const confidenceScore = this.calculateConfidenceScore(request);\n      \n      // Gerar recomendações\n      const recommendations = await this.generateRecommendations(request);\n\n      logger.info(`Agente criado com ${confidenceScore}% de confiança`);\n\n      return {\n        suggestedName: agentIdentity.name,\n        suggestedDescription: agentIdentity.description,\n        optimizedPrompt,\n        specializations,\n        confidenceScore,\n        recommendations\n      };\n\n    } catch (error) {\n      logger.error('Erro na criação inteligente do agente:', { error: error instanceof Error ? error.toString() : error });\n      throw error;\n    }\n  }\n\n  private loadPromptTemplate(templateName: string): string {\n    const templatePath = path.join(__dirname, '../prompt_templates/', templateName);\n    try {\n      return fs.readFileSync(templatePath, 'utf-8');\n    } catch (error) {\n      logger.error(`Erro ao carregar template de prompt: ${templateName}`, { error: errorToString(error) });\n      // Fallback or re-throw, for now, re-throw to indicate a critical issue\n      throw new Error(`Falha ao carregar template ${templateName}`);\n    }\n  }\n\n  private async generateAgentIdentity(request: AgentCreationRequest): Promise<{name: string, description: string}> {\n    const { documentClassification, qualityMetrics, variables } = request;\n    \n    const template = this.loadPromptTemplate('agent_identity_prompt.txt');\n    const prompt = template\n      .replace(/\\$\\{documentClassification.area\\}/g, documentClassification.area)\n      .replace(/\\$\\{documentClassification.subtype\\}/g, documentClassification.subtype)\n      .replace(/\\$\\{qualityMetrics.overall\\}/g, String(qualityMetrics.overall))\n      .replace(/\\$\\{variables.length\\}/g, String(variables.length))\n      .replace(/\\$\\{documentClassification.keywords\\}/g, documentClassification.keywords.join(', '));\n\n    try {\n      const response = await this.openai.chat.completions.create({\n        model: 'gpt-4o-mini',\n        messages: [{ role: 'user', content: prompt }],\n        temperature: 0.7,\n        max_tokens: 300\n      });\n\n      const content = response.choices[0]?.message?.content;\n      if (!content) throw new Error('Resposta vazia da OpenAI');\n\n      const parsed = JSON.parse(content);\n      return {\n        name: parsed.name.substring(0, 50),\n        description: parsed.description.substring(0, 200)\n      };\n\n    } catch (error) {\n      logger.warn('Erro ao gerar identidade com IA, usando fallback:', { error: error instanceof Error ? error.toString() : error });\n      return this.generateFallbackIdentity(request);\n    }\n  }\n\n  private generateFallbackIdentity(request: AgentCreationRequest): {name: string, description: string} {\n    const { documentClassification } = request;\n    \n    const areaNames = {\n      civil: 'Especialista Civil',\n      penal: 'Redator Penal', \n      trabalhista: 'Assistente Trabalhista',\n      tributario: 'Consultor Tributário',\n      administrativo: 'Especialista Administrativo',\n      constitucional: 'Analista Constitucional'\n    };\n\n    const name = areaNames[documentClassification.area] || 'Especialista Jurídico';\n    const description = `Especialista em ${documentClassification.area} focado em ${documentClassification.subtype}`;\n\n    return { name, description };\n  }\n\n  private async optimizePromptWithAI(request: AgentCreationRequest, identity: {name: string, description: string}): Promise<string> {\n    const { documentClassification, userPreferences } = request;\n    \n    const basePrompt = this.generateBasePrompt(request);\n    const template = this.loadPromptTemplate('optimization_prompt_template.txt');\n\n    const optimizationPrompt = template\n      .replace(/\\$\\{basePrompt\\}/g, basePrompt)\n      .replace(/\\$\\{identity.name\\}/g, identity.name)\n      .replace(/\\$\\{identity.description\\}/g, identity.description)\n      .replace(/\\$\\{userPreferences.complexity\\}/g, userPreferences?.complexity || 'intermediate')\n      .replace(/\\$\\{userPreferences.focus\\}/g, userPreferences?.focus || 'quality')\n      .replace(/\\$\\{userPreferences.style\\}/g, userPreferences?.style || 'formal')\n      .replace(/\\$\\{documentClassification.area\\}/g, documentClassification.area)\n      // The second occurrence of userPreferences.focus for \"Otimizar para ${userPreferences.focus}\"\n      .replace(/\\$\\{userPreferences.focus\\}/g, userPreferences?.focus || 'quality');\n\n\n    try {\n      const response = await this.openai.chat.completions.create({\n        model: 'gpt-4o-mini',\n        messages: [{ role: 'user', content: optimizationPrompt }],\n        temperature: 0.3,\n        max_tokens: 2000\n      });\n\n      const optimizedPrompt = response.choices[0]?.message?.content;\n      return optimizedPrompt || basePrompt;\n\n    } catch (error) {\n      logger.warn('Erro na otimização com IA, usando prompt base:', { error: error instanceof Error ? error.toString() : error });\n      return basePrompt;\n    }\n  }\n\n  private generateBasePrompt(request: AgentCreationRequest): string {\n    const { documentClassification, variables, structure, extractedText } = request;\n\n    const variablesDesc = variables\n      .filter(v => v.confidence > 0.7)\n      .map(v => `- ${v.name} (${v.type}): ${v.required ? 'obrigatório' : 'opcional'}`)\n      .join('\\n');\n\n    const sectionsDesc = structure\n      .map(s => `${s.order + 1}. ${s.name} (${s.type})${s.required ? ' - OBRIGATÓRIO' : ''}`)\n      .join('\\n');\n    \n    const extractedTextPreview = extractedText.substring(0, 1500) + (extractedText.length > 1500 ? '...' : '');\n\n    const template = this.loadPromptTemplate('base_prompt_template.txt');\n    return template\n      .replace(/\\$\\{documentClassification.area\\}/g, documentClassification.area)\n      .replace(/\\$\\{documentClassification.subtype\\}/g, documentClassification.subtype)\n      .replace(/\\$\\{sectionsDesc\\}/g, sectionsDesc)\n      .replace(/\\$\\{variablesDesc\\}/g, variablesDesc)\n      .replace(/\\$\\{documentClassification.area.toUpperCase\\(\\)\\}/g, documentClassification.area.toUpperCase())\n      .replace(/\\$\\{extractedTextPreview\\}/g, extractedTextPreview);\n  }\n\n  private generateSpecializations(request: AgentCreationRequest): string[] {\n    const { documentClassification, variables } = request;\n    const specializations: string[] = [];\n\n    // Especialização por área\n    specializations.push(`${documentClassification.area.charAt(0).toUpperCase() + documentClassification.area.slice(1)}`);\n    \n    // Especialização por subtipo\n    if (documentClassification.subtype !== 'genérico') {\n      specializations.push(documentClassification.subtype);\n    }\n\n    // Especialização por tipos de variáveis\n    const variableTypes = [...new Set(variables.map(v => v.type))];\n    if (variableTypes.includes('currency')) {\n      specializations.push('Cálculos monetários');\n    }\n    if (variableTypes.includes('date')) {\n      specializations.push('Gestão de prazos');\n    }\n    if (variableTypes.includes('cpf') || variableTypes.includes('cnpj')) {\n      specializations.push('Identificação de partes');\n    }\n\n    // Especialização por palavras-chave\n    if (documentClassification.keywords.includes('contrato')) {\n      specializations.push('Contratos');\n    }\n    if (documentClassification.keywords.includes('petição')) {\n      specializations.push('Peças processuais');\n    }\n\n    return specializations.slice(0, 5); // Limitar a 5 especializações\n  }\n\n  private calculateConfidenceScore(request: AgentCreationRequest): number {\n    const { documentClassification, qualityMetrics, variables, structure } = request;\n    \n    // Fatores de confiança\n    const classificationConfidence = documentClassification.confidence / 100;\n    const qualityScore = qualityMetrics.overall / 100;\n    const variableScore = Math.min(variables.length / 10, 1); // Máximo de 10 variáveis\n    const structureScore = Math.min(structure.length / 6, 1); // Máximo de 6 seções\n    \n    // Peso dos fatores\n    const weights = {\n      classification: 0.3,\n      quality: 0.3,\n      variables: 0.2,\n      structure: 0.2\n    };\n    \n    const totalScore = \n      (classificationConfidence * weights.classification) +\n      (qualityScore * weights.quality) +\n      (variableScore * weights.variables) +\n      (structureScore * weights.structure);\n    \n    return Math.round(totalScore * 100);\n  }\n\n  private async generateRecommendations(request: AgentCreationRequest): Promise<string[]> {\n    const { qualityMetrics, variables, documentClassification } = request;\n    const recommendations: string[] = [];\n\n    // Recomendações baseadas na qualidade\n    if (qualityMetrics.completeness < 70) {\n      recommendations.push('Considere adicionar seções obrigatórias ao template');\n    }\n    if (qualityMetrics.clarity < 70) {\n      recommendations.push('Revise variáveis para melhor clareza do documento');\n    }\n    if (qualityMetrics.structure < 70) {\n      recommendations.push('Melhore a organização das seções do documento');\n    }\n    if (qualityMetrics.legalCompliance < 70) {\n      recommendations.push('Adicione mais fundamentação legal ao template');\n    }\n\n    // Recomendações baseadas nas variáveis\n    const requiredVars = variables.filter(v => v.required).length;\n    const optionalVars = variables.filter(v => !v.required).length;\n    \n    if (requiredVars < 3) {\n      recommendations.push('Considere adicionar mais campos obrigatórios');\n    }\n    if (optionalVars > requiredVars * 2) {\n      recommendations.push('Muitas variáveis opcionais podem confundir o usuário');\n    }\n\n    // Recomendações por área jurídica\n    if (documentClassification.area === 'civil' && !variables.some(v => v.type === 'currency')) {\n      recommendations.push('Documentos civis geralmente incluem valores monetários');\n    }\n    if (documentClassification.area === 'trabalhista' && !variables.some(v => v.type === 'date')) {\n      recommendations.push('Documentos trabalhistas precisam de controle de datas');\n    }\n\n    return recommendations.slice(0, 4); // Limitar a 4 recomendações\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/functions/src/services/aiService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PipelineRequest' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ExecutarPromptRequest' is defined but never used.","line":6,"column":79,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":100},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":335,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":335,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10757,10760],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10757,10760],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import OpenAI from 'openai';\nimport * as logger from 'firebase-functions/v2/logger';\nimport * as admin from 'firebase-admin';\nimport { GenerationRequest, ProcessingStep, DocumentSection } from '../types/document';\nimport { Agent } from '../types/agent';\nimport { PipelineRequest, PipelineResult, EtapaProcessamento, DocumentoApoio, ExecutarPromptRequest, PromptPredefinido } from '../types/pipeline';\nimport { DocumentProcessor } from './documentProcessor';\nimport { DocumentService } from './documentService';\n\nexport class AIService {\n  private openai: OpenAI;\n  private documentProcessor: DocumentProcessor;\n  private documentService: DocumentService;\n\n  constructor() {\n    this.openai = new OpenAI({\n      apiKey: process.env.OPENAI_API_KEY\n    });\n    this.documentProcessor = new DocumentProcessor();\n    this.documentService = new DocumentService();\n  }\n\n  async executarPromptPredefinido(\n    promptId: string,\n    instrucoes: string,\n    documentos: DocumentoApoio[]\n  ): Promise<string> {\n    const inicioProcessamento = Date.now();\n    \n    try {\n      // 1. Buscar prompt predefinido no Firestore\n      const promptDoc = await admin.firestore().collection('prompts').doc(promptId).get();\n      \n      if (!promptDoc.exists) {\n        throw new Error(`Prompt predefinido não encontrado: ${promptId}`);\n      }\n      \n      const promptData = promptDoc.data() as PromptPredefinido;\n      \n      if (!promptData.active) {\n        throw new Error(`Prompt predefinido está inativo: ${promptId}`);\n      }\n\n      // 2. Processar e resumir documentos de apoio\n      const documentosResumo = await this.documentProcessor.processarDocumentos(documentos);\n      const contextoDocs = documentosResumo.length > 0 \n        ? `\\n\\nDOCUMENTOS DE APOIO:\\n${documentosResumo.join('\\n\\n')}`\n        : '';\n\n      // 3. Montar prompt final\n      const promptFinal = this.montarPromptFinal(promptData.basePrompt, instrucoes, contextoDocs);\n\n      // 4. Executar com GPT-4o\n      const response = await this.openai.chat.completions.create({\n        model: 'gpt-4o',\n        messages: [{ role: 'user', content: promptFinal }],\n        max_tokens: 4000,\n        temperature: 0.1\n      });\n\n      const textoGerado = response.choices[0].message.content || '';\n      \n      // 5. Log de controle\n      const tempoTotal = Date.now() - inicioProcessamento;\n      const tokensUsados = response.usage?.total_tokens || 0;\n      \n      logger.info(`Prompt predefinido executado`, { promptId, tokensUsados, tempoTotal });\n\n      return textoGerado;\n\n    } catch (error) {\n      logger.error('Erro ao executar prompt predefinido:', { error: error instanceof Error ? error.toString() : error, promptId });\n      throw error;\n    }\n  }\n\n  private montarPromptFinal(basePrompt: string, instrucoes: string, contextoDocs: string): string {\n    return `${basePrompt}${contextoDocs}\n\nINSTRUÇÕES ESPECÍFICAS:\n${instrucoes}\n\nGere o documento jurídico completo, profissional e tecnicamente correto seguindo as instruções fornecidas.`;\n  }\n\n  private async buscarPromptPredefinido(promptId: string): Promise<PromptPredefinido> {\n    const promptDoc = await admin.firestore().collection('prompts').doc(promptId).get();\n    \n    if (!promptDoc.exists) {\n      throw new Error('Prompt predefinido não encontrado');\n    }\n    \n    const promptData = promptDoc.data() as PromptPredefinido;\n    \n    if (!promptData.active) {\n      throw new Error('Prompt predefinido está inativo');\n    }\n    \n    return promptData;\n  }\n\n  async executarPipelineIA(\n    agentId: string,\n    variaveis: Record<string, string>,\n    documentos: DocumentoApoio[],\n    instrucoes: string\n  ): Promise<PipelineResult> {\n    const inicioProcessamento = Date.now();\n    const etapas: EtapaProcessamento[] = [];\n    \n    try {\n      // 1. Buscar agente e prompt mestre\n      const agent = await this.buscarAgente(agentId);\n      if (!agent.masterPrompt) {\n        throw new Error('Agente não possui prompt mestre configurado');\n      }\n\n      // 2. Processar documentos de apoio\n      const documentosResumo = await this.documentProcessor.processarDocumentos(documentos);\n      const contextoDocs = documentosResumo.join('\\n\\n');\n\n      // 3. Executar pipeline de 3 etapas\n      const etapa1 = await this.executarEtapa1(instrucoes, contextoDocs, etapas);\n      const etapa2 = await this.executarEtapa2(etapa1, etapas);\n      const textoFinal = await this.executarEtapa3(agent.masterPrompt, etapa2, instrucoes, variaveis, etapas);\n\n      // 4. Calcular metadados\n      const tempoTotal = Date.now() - inicioProcessamento;\n      const tokensTotal = etapas.reduce((acc, etapa) => acc + etapa.tokensUsados, 0);\n      \n      return {\n        textoFinal,\n        metadata: {\n          tokensUsados: {\n            etapa1: etapas[0]?.tokensUsados || 0,\n            etapa2: etapas[1]?.tokensUsados || 0,\n            etapa3: etapas[2]?.tokensUsados || 0,\n            total: tokensTotal\n          },\n          tempoProcessamento: tempoTotal,\n          custoEstimado: this.calcularCusto(etapas)\n        }\n      };\n\n    } catch (error) {\n      logger.error('Erro no pipeline de IA:', { error: error instanceof Error ? error.toString() : error, agentId });\n      throw error;\n    }\n  }\n\n  private async buscarAgente(agentId: string): Promise<Agent> {\n    const agentDoc = await admin.firestore().collection('agents').doc(agentId).get();\n    \n    if (!agentDoc.exists) {\n      throw new Error('Agente não encontrado');\n    }\n    \n    return { id: agentDoc.id, ...agentDoc.data() } as Agent;\n  }\n\n  private async executarEtapa1(instrucoes: string, contextoDocs: string, etapas: EtapaProcessamento[]): Promise<string> {\n    const inicio = Date.now();\n    \n    const prompt = `Analise a demanda jurídica e extraia as informações essenciais:\n\nINSTRUÇÕES:\n${instrucoes}\n\nDOCUMENTOS DE APOIO:\n${contextoDocs}\n\nTarefas:\n1. Identifique o tipo de documento jurídico necessário\n2. Extraia fatos relevantes\n3. Identifique questões jurídicas centrais\n4. Determine estratégia argumentativa\n\nResponda de forma estruturada e objetiva (máximo 800 palavras).`;\n\n    const response = await this.openai.chat.completions.create({\n      model: 'gpt-3.5-turbo',\n      messages: [{ role: 'user', content: prompt }],\n      max_tokens: 1000,\n      temperature: 0.3\n    });\n\n    const resultado = response.choices[0].message.content || '';\n    \n    etapas.push({\n      numero: 1,\n      nome: 'Interpretação da Demanda',\n      modelo: 'gpt-3.5-turbo',\n      prompt,\n      resultado,\n      tokensUsados: response.usage?.total_tokens || 0,\n      tempoInicio: inicio,\n      tempoFim: Date.now()\n    });\n\n    return resultado;\n  }\n\n  private async executarEtapa2(interpretacao: string, etapas: EtapaProcessamento[]): Promise<string> {\n    const inicio = Date.now();\n    \n    const prompt = `Com base na interpretação da demanda, desenvolva a fundamentação jurídica:\n\nINTERPRETAÇÃO:\n${interpretacao}\n\nTarefas:\n1. Identifique normas jurídicas aplicáveis (leis, decretos, jurisprudência)\n2. Desenvolva argumentação jurídica sólida\n3. Cite precedentes relevantes quando apropriado\n4. Estruture logicamente os argumentos\n\nFoque em fundamentação consistente com o direito brasileiro (máximo 1500 palavras).`;\n\n    const response = await this.openai.chat.completions.create({\n      model: 'gpt-3.5-turbo',\n      messages: [{ role: 'user', content: prompt }],\n      max_tokens: 2000,\n      temperature: 0.2\n    });\n\n    const resultado = response.choices[0].message.content || '';\n    \n    etapas.push({\n      numero: 2,\n      nome: 'Fundamentação Jurídica',\n      modelo: 'gpt-3.5-turbo',\n      prompt,\n      resultado,\n      tokensUsados: response.usage?.total_tokens || 0,\n      tempoInicio: inicio,\n      tempoFim: Date.now()\n    });\n\n    return resultado;\n  }\n\n  private async executarEtapa3(\n    promptMestre: string,\n    fundamentacao: string,\n    instrucoes: string,\n    variaveis: Record<string, string>,\n    etapas: EtapaProcessamento[]\n  ): Promise<string> {\n    const inicio = Date.now();\n    \n    // Aplicar variáveis no prompt mestre\n    let promptPersonalizado = promptMestre;\n    Object.entries(variaveis).forEach(([chave, valor]) => {\n      const regex = new RegExp(`\\\\{\\\\{${chave}\\\\}\\\\}`, 'g');\n      promptPersonalizado = promptPersonalizado.replace(regex, valor);\n    });\n\n    const prompt = `${promptPersonalizado}\n\nFUNDAMENTAÇÃO DESENVOLVIDA:\n${fundamentacao}\n\nINSTRUÇÕES ESPECÍFICAS:\n${instrucoes}\n\nGere o documento jurídico final completo, profissional e tecnicamente correto. Use a estrutura e estilo definidos no prompt mestre, incorporando a fundamentação e atendendo às instruções específicas.`;\n\n    const response = await this.openai.chat.completions.create({\n      model: 'gpt-4',\n      messages: [{ role: 'user', content: prompt }],\n      max_tokens: 4000,\n      temperature: 0.1\n    });\n\n    const resultado = response.choices[0].message.content || '';\n    \n    etapas.push({\n      numero: 3,\n      nome: 'Redação Final',\n      modelo: 'gpt-4',\n      prompt,\n      resultado,\n      tokensUsados: response.usage?.total_tokens || 0,\n      tempoInicio: inicio,\n      tempoFim: Date.now()\n    });\n\n    return resultado;\n  }\n\n  private calcularCusto(etapas: EtapaProcessamento[]): number {\n    // Preços aproximados por 1k tokens (valores de referência)\n    const precos = {\n      'gpt-3.5-turbo': 0.002, // $0.002/1k tokens\n      'gpt-4': 0.03           // $0.03/1k tokens\n    };\n    \n    return etapas.reduce((custo, etapa) => {\n      const precoPor1k = precos[etapa.modelo as keyof typeof precos] || 0;\n      return custo + (etapa.tokensUsados / 1000) * precoPor1k;\n    }, 0);\n  }\n\n  async generateDocument(\n    request: GenerationRequest,\n    agent?: Agent,\n    steps: ProcessingStep[] = []\n  ): Promise<{ content: string; sections: DocumentSection[]; tokensUsed: number }> {\n    \n    // Etapa 1: Interpretação da Demanda\n    const interpretationStep = this.createStep('Interpretação da Demanda', steps);\n    const interpretation = await this.interpretDemand(request, interpretationStep);\n    \n    // Etapa 2: Fundamentação Legal\n    const fundamentationStep = this.createStep('Fundamentação Legal', steps);\n    const fundamentation = await this.legalFundamentation(request, interpretation, fundamentationStep);\n    \n    // Etapa 3: Redação Final\n    const writingStep = this.createStep('Redação Final', steps);\n    const finalDocument = await this.finalWriting(request, agent, interpretation, fundamentation, writingStep);\n\n    return finalDocument;\n  }\n\n  private createStep(name: string, steps: ProcessingStep[]): ProcessingStep {\n    const step: ProcessingStep = {\n      name,\n      status: 'processing',\n      startTime: Date.now()\n    };\n    steps.push(step);\n    return step;\n  }\n\n  private completeStep(step: ProcessingStep, result: any) {\n    step.status = 'completed';\n    step.endTime = Date.now();\n    step.result = result;\n  }\n\n  private async interpretDemand(request: GenerationRequest, step: ProcessingStep) {\n    try {\n      const prompt = `Analise a demanda jurídica e extraia as informações essenciais:\n\nINSTRUÇÕES DO USUÁRIO:\n${request.instructions}\n\nDOCUMENTOS DE APOIO: ${request.supportDocuments.length} arquivo(s) anexado(s)\n\nTarefas:\n1. Identifique o tipo de documento jurídico necessário\n2. Extraia fatos relevantes\n3. Identifique questões jurídicas centrais\n4. Determine o público-alvo (juiz, cliente, etc.)\n\nResponda em formato estruturado.`;\n\n      const response = await this.openai.chat.completions.create({\n        model: 'gpt-4',\n        messages: [{ role: 'user', content: prompt }],\n        max_tokens: 1000,\n        temperature: 0.3\n      });\n\n      const interpretation = response.choices[0].message.content || '';\n      this.completeStep(step, interpretation);\n      return interpretation;\n    } catch (error) {\n      step.status = 'error';\n      step.endTime = Date.now();\n      throw error;\n    }\n  }\n\n  private async legalFundamentation(\n    request: GenerationRequest, \n    interpretation: string, \n    step: ProcessingStep\n  ) {\n    try {\n      const prompt = `Com base na interpretação da demanda, desenvolva a fundamentação jurídica:\n\nINTERPRETAÇÃO:\n${interpretation}\n\nTarefas:\n1. Identifique normas jurídicas aplicáveis\n2. Cite jurisprudência relevante quando apropriado\n3. Desenvolva argumentação jurídica sólida\n4. Estruture logicamente os argumentos\n\nFoque em fundamentação consistente com o direito brasileiro.`;\n\n      const response = await this.openai.chat.completions.create({\n        model: 'gpt-4',\n        messages: [{ role: 'user', content: prompt }],\n        max_tokens: 2000,\n        temperature: 0.2\n      });\n\n      const fundamentation = response.choices[0].message.content || '';\n      this.completeStep(step, fundamentation);\n      return fundamentation;\n    } catch (error) {\n      step.status = 'error';\n      step.endTime = Date.now();\n      throw error;\n    }\n  }\n\n  private async finalWriting(\n    request: GenerationRequest,\n    agent: Agent | undefined,\n    interpretation: string,\n    fundamentation: string,\n    step: ProcessingStep\n  ) {\n    try {\n      let masterPrompt = '';\n      \n      if (request.mode === 'agent' && agent?.masterPrompt) {\n        masterPrompt = agent.masterPrompt;\n      } else {\n        masterPrompt = this.getDefaultPromptForType(request.promptType || 'generic');\n      }\n\n      const prompt = `${masterPrompt}\n\nINTERPRETAÇÃO DA DEMANDA:\n${interpretation}\n\nFUNDAMENTAÇÃO JURÍDICA:\n${fundamentation}\n\nINSTRUÇÕES ESPECÍFICAS:\n${request.instructions}\n\nMODO: ${request.strictMode ? 'RIGOROSO - Siga exatamente o modelo fornecido' : 'FLEXÍVEL - Adapte conforme necessário'}\n\nGere o documento jurídico final completo, profissional e tecnicamente correto.`;\n\n      const response = await this.openai.chat.completions.create({\n        model: 'gpt-4',\n        messages: [{ role: 'user', content: prompt }],\n        max_tokens: 4000,\n        temperature: 0.1\n      });\n\n      const content = response.choices[0].message.content || '';\n      const tokensUsed = response.usage?.total_tokens || 0;\n      \n      // Dividir em seções\n      const sections = this.extractSections(content);\n      \n      this.completeStep(step, { content, sections, tokensUsed });\n      \n      return { content, sections, tokensUsed };\n    } catch (error) {\n      step.status = 'error';\n      step.endTime = Date.now();\n      throw error;\n    }\n  }\n\n  private getDefaultPromptForType(promptType: string): string {\n    const prompts: Record<string, string> = {\n      'parecer': 'Você é um advogado especialista. Redija um parecer jurídico técnico e fundamentado.',\n      'peticao': 'Você é um advogado peticionário. Redija uma petição inicial clara e bem fundamentada.',\n      'contrato': 'Você é um advogado especialista em direito contratual. Redija um contrato completo e equilibrado.',\n      'recurso': 'Você é um advogado especialista em recursos. Redija um recurso bem fundamentado.',\n      'generic': 'Você é um advogado experiente. Redija um documento jurídico profissional.'\n    };\n\n    return prompts[promptType] || prompts['generic'];\n  }\n\n  private extractSections(content: string): DocumentSection[] {\n    const sections: DocumentSection[] = [];\n    const lines = content.split('\\n');\n    let currentSection: DocumentSection | null = null;\n    let order = 0;\n\n    lines.forEach(line => {\n      const trimmedLine = line.trim();\n      \n      // Detectar títulos de seção (linhas em maiúsculo ou com numeração)\n      if (this.isSectionTitle(trimmedLine)) {\n        if (currentSection) {\n          sections.push(currentSection);\n        }\n        \n        currentSection = {\n          title: trimmedLine,\n          content: '',\n          type: this.determineSectionType(trimmedLine),\n          order: order++\n        };\n      } else if (currentSection && trimmedLine) {\n        currentSection.content += line + '\\n';\n      }\n    });\n\n    if (currentSection) {\n      sections.push(currentSection);\n    }\n\n    return sections;\n  }\n\n  private isSectionTitle(line: string): boolean {\n    return /^[A-ZÁÊÇÕ\\s]+$/.test(line) && line.length > 3 && line.length < 100;\n  }\n\n  private determineSectionType(title: string): string {\n    const titleLower = title.toLowerCase();\n    \n    if (titleLower.includes('ementa') || titleLower.includes('súmula')) return 'header';\n    if (titleLower.includes('relatório') || titleLower.includes('fatos')) return 'body';\n    if (titleLower.includes('fundament') || titleLower.includes('mérito')) return 'body';\n    if (titleLower.includes('dispositivo') || titleLower.includes('conclusão')) return 'conclusion';\n    \n    return 'body';\n  }\n\n  // Método de conveniência para executar prompt e salvar documento\n  async executarPromptESalvar(\n    promptId: string,\n    instrucoes: string,\n    documentos: DocumentoApoio[],\n    uid: string,\n    workspaceId: string\n  ): Promise<{ textoGerado: string; documentId: string }> {\n    \n    const inicioProcessamento = Date.now();\n    \n    try {\n      // 1. Executar prompt predefinido\n      const textoGerado = await this.executarPromptPredefinido(promptId, instrucoes, documentos);\n      \n      // 2. Salvar documento\n      const tempoProcessamento = Date.now() - inicioProcessamento;\n      const resultado = await this.documentService.salvarDocumentoFinal(\n        uid,\n        workspaceId,\n        textoGerado,\n        'prompt',\n        {\n          promptId,\n          instrucoes,\n          tempoProcessamento\n        }\n      );\n      \n      return {\n        textoGerado,\n        documentId: resultado.documentId\n      };\n      \n    } catch (error) {\n      logger.error('Erro ao executar prompt e salvar:', { error: error instanceof Error ? error.toString() : error, promptId, workspaceId });\n      throw error;\n    }\n  }\n\n  // Método de conveniência para executar pipeline e salvar documento\n  async executarPipelineESalvar(\n    agentId: string,\n    variaveis: Record<string, string>,\n    documentos: DocumentoApoio[],\n    instrucoes: string,\n    uid: string,\n    workspaceId: string\n  ): Promise<{ resultado: PipelineResult; documentId: string }> {\n    \n    try {\n      // 1. Executar pipeline IA\n      const resultado = await this.executarPipelineIA(agentId, variaveis, documentos, instrucoes);\n      \n      // 2. Salvar documento\n      const documentoSalvo = await this.documentService.salvarDocumentoFinal(\n        uid,\n        workspaceId,\n        resultado.textoFinal,\n        'agent',\n        {\n          agentId,\n          instrucoes,\n          tokensUsados: resultado.metadata.tokensUsados.total,\n          tempoProcessamento: resultado.metadata.tempoProcessamento\n        }\n      );\n      \n      return {\n        resultado,\n        documentId: documentoSalvo.documentId\n      };\n      \n    } catch (error) {\n      logger.error('Erro ao executar pipeline e salvar:', { error: error instanceof Error ? error.toString() : error, agentId, workspaceId });\n      throw error;\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/functions/src/services/auditService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[254,257],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[254,257],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[914,917],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[914,917],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":76,"column":91,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":94,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1894,1897],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1894,1897],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":98,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2531,2534],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2531,2534],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":124,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3112,3115],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3112,3115],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":182,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":182,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5107,5110],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5107,5110],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":182,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":182,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5113,5116],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5113,5116],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport * as admin from 'firebase-admin';\nimport * as logger from 'firebase-functions/v2/logger';\n\nexport interface AuditLog {\n  id?: string;\n  userId: string;\n  workspaceId: string;\n  action: string;\n  resource: string;\n  resourceId: string;\n  details: any;\n  ipAddress?: string;\n  userAgent?: string;\n  timestamp: admin.firestore.FieldValue;\n  success: boolean;\n  errorMessage?: string;\n}\n\nexport interface SecurityMetrics {\n  workspaceId: string;\n  date: string;\n  totalRequests: number;\n  failedRequests: number;\n  uniqueUsers: string[];\n  actions: Record<string, number>;\n  errors: Record<string, number>;\n  averageResponseTime: number;\n}\n\nexport class AuditService {\n  private db: admin.firestore.Firestore;\n\n  constructor() {\n    this.db = admin.firestore();\n  }\n\n  async logAction(\n    userId: string,\n    workspaceId: string,\n    action: string,\n    resource: string,\n    resourceId: string,\n    details: any,\n    success: boolean = true,\n    errorMessage?: string,\n    ipAddress?: string,\n    userAgent?: string\n  ): Promise<void> {\n    try {\n      const auditLog: AuditLog = {\n        userId,\n        workspaceId,\n        action,\n        resource,\n        resourceId,\n        details: this.sanitizeDetails(details),\n        ipAddress,\n        userAgent,\n        timestamp: admin.firestore.FieldValue.serverTimestamp(),\n        success,\n        errorMessage\n      };\n\n      await this.db.collection('audit_logs').add(auditLog);\n\n      // Atualizar métricas em tempo real\n      await this.updateMetrics(workspaceId, action, success);\n\n    } catch (error) {\n      logger.error('Erro ao registrar log de auditoria:', { error: error instanceof Error ? error.toString() : error, workspaceId, action, resource, resourceId });\n      // Não falhar a operação principal por erro de auditoria\n    }\n  }\n\n  async logAgentCreation(userId: string, workspaceId: string, agentId: string, agentData: any): Promise<void> {\n    await this.logAction(\n      userId,\n      workspaceId,\n      'CREATE_AGENT',\n      'agent',\n      agentId,\n      {\n        agentName: agentData.name,\n        agentTheme: agentData.theme,\n        variablesCount: agentData.documentTemplate?.variables?.length || 0,\n        sectionsCount: agentData.documentTemplate?.structure?.sections?.length || 0,\n        classification: agentData.documentTemplate?.metadata?.classification,\n        qualityScore: agentData.confidenceScore\n      }\n    );\n  }\n\n  async logDocumentGeneration(\n    userId: string, \n    workspaceId: string, \n    documentId: string, \n    metadata: any,\n    success: boolean = true,\n    errorMessage?: string\n  ): Promise<void> {\n    await this.logAction(\n      userId,\n      workspaceId,\n      'GENERATE_DOCUMENT',\n      'document',\n      documentId,\n      {\n        mode: metadata.mode,\n        agentId: metadata.agentId,\n        tokensUsed: metadata.tokensUsed,\n        processingTime: metadata.processingTime,\n        contentLength: metadata.contentLength\n      },\n      success,\n      errorMessage\n    );\n  }\n\n  async logModelProcessing(\n    userId: string,\n    workspaceId: string,\n    promptId: string,\n    processingData: any,\n    success: boolean = true,\n    errorMessage?: string\n  ): Promise<void> {\n    await this.logAction(\n      userId,\n      workspaceId,\n      'PROCESS_MODEL',\n      'prompt',\n      promptId,\n      {\n        fileName: processingData.fileName,\n        fileSize: processingData.fileSize,\n        variablesFound: processingData.variablesFound,\n        sectionsFound: processingData.sectionsFound,\n        processingTime: processingData.processingTime,\n        classification: processingData.classification,\n        qualityScore: processingData.qualityMetrics?.overall\n      },\n      success,\n      errorMessage\n    );\n  }\n\n  private async updateMetrics(workspaceId: string, action: string, success: boolean): Promise<void> {\n    const today = new Date().toISOString().split('T')[0];\n    const metricsRef = this.db.collection('metrics').doc(`${workspaceId}_${today}`);\n\n    await this.db.runTransaction(async (transaction) => {\n      const metricsDoc = await transaction.get(metricsRef);\n      \n      if (metricsDoc.exists) {\n        const data = metricsDoc.data() as SecurityMetrics;\n        transaction.update(metricsRef, {\n          totalRequests: admin.firestore.FieldValue.increment(1),\n          failedRequests: success ? data.failedRequests : admin.firestore.FieldValue.increment(1),\n          [`actions.${action}`]: admin.firestore.FieldValue.increment(1),\n          updatedAt: admin.firestore.FieldValue.serverTimestamp()\n        });\n      } else {\n        const newMetrics: Partial<SecurityMetrics> = {\n          workspaceId,\n          date: today,\n          totalRequests: 1,\n          failedRequests: success ? 0 : 1,\n          actions: { [action]: 1 },\n          errors: {},\n          averageResponseTime: 0\n        };\n        transaction.set(metricsRef, {\n          ...newMetrics,\n          createdAt: admin.firestore.FieldValue.serverTimestamp(),\n          updatedAt: admin.firestore.FieldValue.serverTimestamp()\n        });\n      }\n    });\n  }\n\n  private sanitizeDetails(details: any): any {\n    // Remover informações sensíveis dos logs\n    const sanitized = { ...details };\n    \n    // Remover campos sensíveis\n    delete sanitized.password;\n    delete sanitized.token;\n    delete sanitized.apiKey;\n    delete sanitized.secret;\n    \n    // Truncar strings muito longas\n    Object.keys(sanitized).forEach(key => {\n      if (typeof sanitized[key] === 'string' && sanitized[key].length > 1000) {\n        sanitized[key] = sanitized[key].substring(0, 1000) + '...';\n      }\n    });\n    \n    return sanitized;\n  }\n\n  async getWorkspaceMetrics(workspaceId: string, days: number = 30): Promise<SecurityMetrics[]> {\n    const endDate = new Date();\n    const startDate = new Date();\n    startDate.setDate(endDate.getDate() - days);\n\n    const startDateStr = startDate.toISOString().split('T')[0];\n    const endDateStr = endDate.toISOString().split('T')[0];\n\n    const snapshot = await this.db\n      .collection('metrics')\n      .where('workspaceId', '==', workspaceId)\n      .where('date', '>=', startDateStr)\n      .where('date', '<=', endDateStr)\n      .orderBy('date', 'desc')\n      .get();\n\n    return snapshot.docs.map(doc => doc.data() as SecurityMetrics);\n  }\n\n  async getAuditLogs(\n    workspaceId: string, \n    limit: number = 100,\n    action?: string,\n    userId?: string\n  ): Promise<AuditLog[]> {\n    let query = this.db\n      .collection('audit_logs')\n      .where('workspaceId', '==', workspaceId)\n      .orderBy('timestamp', 'desc')\n      .limit(limit);\n\n    if (action) {\n      query = query.where('action', '==', action);\n    }\n\n    if (userId) {\n      query = query.where('userId', '==', userId);\n    }\n\n    const snapshot = await query.get();\n    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as AuditLog));\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/functions/src/services/documentProcessor.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'admin' is defined but never used.","line":2,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":39,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport * as admin from 'firebase-admin';\nimport * as logger from 'firebase-functions/v2/logger';\n\nexport class DocumentProcessor {\n  async processarDocumentos(documentos: Array<{url: string, tipo: 'pdf' | 'docx' | 'texto', nome: string}>): Promise<string[]> {\n    const resumos: string[] = [];\n    \n    for (const doc of documentos) {\n      try {\n        let conteudo = '';\n        \n        if (doc.tipo === 'texto') {\n          // Se for texto, pode estar na URL ou já processado\n          conteudo = await this.extrairTextoDeUrl(doc.url);\n        } else if (doc.tipo === 'pdf') {\n          conteudo = await this.extrairTextoDePdf(doc.url);\n        } else if (doc.tipo === 'docx') {\n          conteudo = await this.extrairTextoDeDocx(doc.url);\n        }\n        \n        // Resumir documento para otimizar tokens\n        const resumo = await this.resumirTexto(conteudo, doc.nome);\n        resumos.push(resumo);\n        \n      } catch (error) {\n        logger.error(`Erro ao processar documento ${doc.nome}:`, { error: error instanceof Error ? error.toString() : error, documentName: doc.nome, documentUrl: doc.url });\n        resumos.push(`Erro ao processar: ${doc.nome}`);\n      }\n    }\n    \n    return resumos;\n  }\n\n  private async extrairTextoDeUrl(url: string): Promise<string> {\n    try {\n      const response = await fetch(url);\n      return await response.text();\n    } catch (error) {\n      throw new Error(`Erro ao baixar texto de ${url}`);\n    }\n  }\n\n  private async extrairTextoDePdf(url: string): Promise<string> {\n    // Placeholder - em produção, usar biblioteca como pdf-parse\n    logger.warn('PDF processing não implementado ainda:', { url });\n    return 'Conteúdo PDF extraído (placeholder)';\n  }\n\n  private async extrairTextoDeDocx(url: string): Promise<string> {\n    // Placeholder - reutilizar mammoth do DocxProcessor\n    logger.warn('DOCX processing não implementado ainda:', { url });\n    return 'Conteúdo DOCX extraído (placeholder)';\n  }\n\n  private async resumirTexto(texto: string, nomeArquivo: string): Promise<string> {\n    // Resumir para máximo 500 caracteres para otimizar tokens\n    if (texto.length <= 500) {\n      return `${nomeArquivo}: ${texto}`;\n    }\n    \n    const resumo = texto.substring(0, 400) + '...';\n    return `${nomeArquivo}: ${resumo}`;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/functions/src/services/documentService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/functions/src/services/docxProcessor.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DocumentStructure' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport * as mammoth from 'mammoth';\nimport * as logger from 'firebase-functions/v2/logger';\nimport { DocumentStructure, Section } from '../types/agent';\n\nexport interface ProcessingResult {\n  textoExtraido: string;\n  variaveis: string[];\n  estruturas: Section[];\n}\n\nexport class DocxProcessor {\n  private sectionPatterns = [\n    { pattern: /^(EMENTA|SÚMULA|SUMÁRIO)/i, name: 'Ementa', type: 'header' as const },\n    { pattern: /^(RELATÓRIO|RELATORIO|FATOS|HISTÓRICO)/i, name: 'Relatório', type: 'body' as const },\n    { pattern: /^(FUNDAMENT|VOTO|MÉRITO|RAZÕES|ANÁLISE)/i, name: 'Fundamentação', type: 'body' as const },\n    { pattern: /^(DISPOSITIVO|DECISÃO|CONCLUSÃO|SENTENÇA)/i, name: 'Dispositivo', type: 'conclusion' as const },\n    { pattern: /^(PEDIDO|REQUERIMENTO|PLEITO)/i, name: 'Pedido', type: 'body' as const },\n    { pattern: /^(QUALIFICAÇÃO|PARTES|IDENTIFICAÇÃO)/i, name: 'Qualificação', type: 'header' as const },\n    { pattern: /^(ANEXOS|DOCUMENTOS|PROVAS)/i, name: 'Anexos', type: 'conclusion' as const },\n  ];\n\n  private variablePatterns = [\n    /\\{\\{([^}]+)\\}\\}/g,  // {{VARIAVEL}}\n    /\\{([^}]+)\\}/g,      // {VARIAVEL}\n    /\\[([^\\]]+)\\]/g,     // [VARIAVEL]\n  ];\n\n  async processDocx(buffer: Buffer): Promise<ProcessingResult> {\n    try {\n      // Validar arquivo\n      this.validateDocx(buffer);\n\n      // Extrair texto do DOCX\n      const result = await mammoth.extractRawText({ buffer });\n      const textoExtraido = result.value;\n\n      // Validar se o documento contém texto suficiente\n      if (textoExtraido.trim().length < 50) {\n        throw new Error('Documento muito pequeno ou sem conteúdo textual válido');\n      }\n\n      // Detectar estrutura do documento\n      const estruturas = this.detectStructure(textoExtraido);\n      \n      // Detectar variáveis\n      const variaveis = this.detectVariables(textoExtraido);\n\n      return {\n        textoExtraido,\n        variaveis,\n        estruturas\n      };\n    } catch (error) {\n      logger.error('Erro ao processar DOCX:', { error: error instanceof Error ? error.toString() : error });\n      if (error instanceof Error) {\n        throw error;\n      }\n      throw new Error('Falha ao processar arquivo DOCX');\n    }\n  }\n\n  private validateDocx(buffer: Buffer): void {\n    // Verificar tamanho do arquivo (máximo 50MB)\n    const maxSize = 50 * 1024 * 1024;\n    if (buffer.length > maxSize) {\n      throw new Error('Arquivo muito grande. Máximo permitido: 50MB');\n    }\n\n    // Verificar se é um arquivo ZIP válido (DOCX é baseado em ZIP)\n    const zipSignature = buffer.slice(0, 4);\n    const validSignatures = [\n      Buffer.from([0x50, 0x4B, 0x03, 0x04]), // PK..\n      Buffer.from([0x50, 0x4B, 0x05, 0x06]), // PK..\n      Buffer.from([0x50, 0x4B, 0x07, 0x08])  // PK..\n    ];\n\n    const isValidZip = validSignatures.some(sig => zipSignature.equals(sig));\n    if (!isValidZip) {\n      throw new Error('Arquivo não é um DOCX válido');\n    }\n  }\n\n  private detectStructure(text: string): Section[] {\n    const lines = text.split('\\n').filter(line => line.trim());\n    const sections: Section[] = [];\n    let order = 0;\n\n    // Detectar seções por padrões conhecidos\n    lines.forEach((line, index) => {\n      const trimmedLine = line.trim();\n      \n      // Verificar padrões de seções jurídicas\n      this.sectionPatterns.forEach(({ pattern, name, type }) => {\n        if (pattern.test(trimmedLine)) {\n          sections.push({\n            name,\n            type,\n            required: true,\n            order: order++,\n            startLine: index,\n            content: trimmedLine\n          });\n        }\n      });\n\n      // Detectar seções numeradas (1., 2., I., II., etc.)\n      const numberedPattern = /^((\\d+\\.)|([IVX]+\\.)|([a-z]\\)))\\s*(.+)$/i;\n      const numberedMatch = trimmedLine.match(numberedPattern);\n      if (numberedMatch && trimmedLine.length > 10) {\n        const sectionTitle = numberedMatch[5] || trimmedLine;\n        sections.push({\n          name: sectionTitle,\n          type: 'body' as const,\n          required: false,\n          order: order++,\n          startLine: index,\n          content: trimmedLine\n        });\n      }\n\n      // Detectar títulos em caixa alta\n      if (trimmedLine.length > 5 && \n          trimmedLine === trimmedLine.toUpperCase() && \n          /^[A-ZÁÉÍÓÚÂÊÎÔÛÃÕÇ\\s]+$/.test(trimmedLine)) {\n        sections.push({\n          name: trimmedLine,\n          type: 'header' as const,\n          required: false,\n          order: order++,\n          startLine: index,\n          content: trimmedLine\n        });\n      }\n    });\n\n    // Se não encontrou seções específicas, criar estrutura padrão\n    if (sections.length === 0) {\n      return [\n        { name: 'Introdução', type: 'header', required: true, order: 0 },\n        { name: 'Desenvolvimento', type: 'body', required: true, order: 1 },\n        { name: 'Conclusão', type: 'conclusion', required: true, order: 2 }\n      ];\n    }\n\n    // Remover duplicatas e ordenar\n    const uniqueSections = this.removeDuplicateSections(sections);\n    return uniqueSections.sort((a, b) => a.order - b.order);\n  }\n\n  private removeDuplicateSections(sections: Section[]): Section[] {\n    const seen = new Set<string>();\n    return sections.filter(section => {\n      const key = `${section.name.toLowerCase()}_${section.type}`;\n      if (seen.has(key)) {\n        return false;\n      }\n      seen.add(key);\n      return true;\n    });\n  }\n\n  private detectVariables(text: string): string[] {\n    const variables = new Set<string>();\n    \n    // Aplicar todos os padrões de variáveis\n    this.variablePatterns.forEach(pattern => {\n      let match;\n      const regex = new RegExp(pattern.source, pattern.flags);\n      \n      while ((match = regex.exec(text)) !== null) {\n        const variable = match[1].trim().toUpperCase();\n        \n        // Filtrar variáveis válidas (apenas letras, números e underscore)\n        if (/^[A-Z0-9_\\s]+$/.test(variable) && variable.length > 1) {\n          variables.add(variable);\n        }\n      }\n    });\n\n    // Categorizar variáveis por tipo\n    const categorizedVariables = Array.from(variables).map(variable => {\n      if (/DATA|DT_/.test(variable)) {\n        return `${variable} (data)`;\n      }\n      if (/NOME|NM_/.test(variable)) {\n        return `${variable} (nome)`;\n      }\n      if (/VALOR|VL_|PRECO/.test(variable)) {\n        return `${variable} (valor)`;\n      }\n      return variable;\n    });\n\n    return categorizedVariables.sort();\n  }\n\n  generateMasterPrompt(estruturas: Section[], variaveis: string[], textoExtraido: string): string {\n    const sectionsDescription = estruturas\n      .map(s => `${s.order + 1}. ${s.name} (${s.type})`)\n      .join('\\n');\n\n    const variablesDescription = variaveis.length > 0 \n      ? `\\nVariáveis identificadas: ${variaveis.join(', ')}`\n      : '';\n\n    const documentLength = textoExtraido.length;\n    const estimatedPages = Math.ceil(documentLength / 2000);\n\n    return `Você é um especialista jurídico brasileiro especializado na criação de documentos técnicos e precisos.\n\nANÁLISE DO DOCUMENTO MODELO:\n- Extensão: ${documentLength} caracteres (aprox. ${estimatedPages} páginas)\n- Seções identificadas: ${estruturas.length}\n- Variáveis detectadas: ${variaveis.length}\n\nESTRUTURA OBRIGATÓRIA:\n${sectionsDescription}\n\nVARIÁVEIS PARA SUBSTITUIÇÃO:\n${variablesDescription}\n\nINSTRUÇÕES DE GERAÇÃO:\n1. Mantenha EXATAMENTE a estrutura identificada\n2. Use linguagem jurídica formal e técnica brasileira\n3. Substitua todas as variáveis pelos valores fornecidos\n4. Mantenha a formatação e estilo do documento original\n5. Preserve numerações, marcadores e hierarquia de títulos\n6. Adapte o conteúdo ao caso específico fornecido\n7. Use fundamentação legal sólida e atualizada\n\nMODELO ORIGINAL (para referência de estilo):\n${textoExtraido.substring(0, 3000)}${textoExtraido.length > 3000 ? '...' : ''}\n\nIMPORTANTE: O documento gerado deve seguir rigorosamente esta estrutura e manter a qualidade técnica do modelo original.`;\n  }\n\n  async processWithRetry(buffer: Buffer, maxRetries: number = 3): Promise<ProcessingResult> {\n    let lastError: Error | null = null;\n    \n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        logger.info(`Tentativa ${attempt} de ${maxRetries} para processar DOCX`);\n        return await this.processDocx(buffer);\n      } catch (error) {\n        lastError = error as Error;\n        logger.warn(`Tentativa ${attempt} falhou:`, { error: error instanceof Error ? error.toString() : error, attempt, maxRetries });\n        \n        // Não tentar novamente em erros de validação\n        if (error instanceof Error && \n            (error.message.includes('muito grande') || \n             error.message.includes('não é um DOCX válido'))) {\n          throw error;\n        }\n        \n        // Aguardar antes da próxima tentativa\n        if (attempt < maxRetries) {\n          await new Promise(resolve => setTimeout(resolve, 1000 * attempt));\n        }\n      }\n    }\n    \n    throw lastError || new Error('Falha após múltiplas tentativas');\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/functions/src/services/intelligentDocxProcessor.ts","messages":[{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\..","line":151,"column":40,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":151,"endColumn":41,"suggestions":[{"messageId":"removeEscape","fix":{"range":[5630,5631],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[5630,5630],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport * as mammoth from 'mammoth';\nimport * as logger from 'firebase-functions/v2/logger';\nimport { Section } from '../types/agent';\n\nexport interface IntelligentProcessingResult {\n  textoExtraido: string;\n  variaveis: VariableDetection[];\n  estruturas: Section[];\n  classificacao: DocumentClassification;\n  qualidade: QualityMetrics;\n}\n\nexport interface VariableDetection {\n  name: string;\n  type: 'text' | 'date' | 'number' | 'currency' | 'email' | 'cpf' | 'cnpj';\n  pattern: string;\n  confidence: number;\n  examples: string[];\n  required: boolean;\n}\n\nexport interface DocumentClassification {\n  area: 'civil' | 'penal' | 'trabalhista' | 'tributario' | 'administrativo' | 'constitucional';\n  subtype: string;\n  confidence: number;\n  keywords: string[];\n}\n\nexport interface QualityMetrics {\n  completeness: number; // 0-100\n  clarity: number; // 0-100\n  structure: number; // 0-100\n  legalCompliance: number; // 0-100\n  overall: number; // 0-100\n}\n\nexport class IntelligentDocxProcessor {\n  private legalKeywords = {\n    civil: ['contrato', 'responsabilidade', 'indenização', 'danos', 'família', 'sucessões'],\n    penal: ['crime', 'delito', 'prisão', 'denúncia', 'sentença', 'absolvição'],\n    trabalhista: ['empregado', 'salário', 'jornada', 'rescisão', 'fgts', 'inss'],\n    tributario: ['imposto', 'tributo', 'icms', 'ipi', 'irpf', 'contribuição'],\n    administrativo: ['licitação', 'concurso', 'servidor', 'ato administrativo'],\n    constitucional: ['direitos fundamentais', 'supremo', 'constituição', 'habeas corpus']\n  };\n\n  private variablePatterns = [\n    // Texto genérico\n    { pattern: /\\{\\{([A-Z_]+)\\}\\}/g, type: 'text' as const, confidence: 0.9 },\n    { pattern: /\\[([A-Z_]+)\\]/g, type: 'text' as const, confidence: 0.8 },\n    \n    // Datas\n    { pattern: /\\{\\{(DATA_[A-Z_]*|DT_[A-Z_]*)\\}\\}/g, type: 'date' as const, confidence: 0.95 },\n    { pattern: /__\\/__\\/____|dd\\/mm\\/aaaa/g, type: 'date' as const, confidence: 0.7 },\n    \n    // Valores monetários\n    { pattern: /\\{\\{(VALOR_[A-Z_]*|VL_[A-Z_]*|PRECO_[A-Z_]*)\\}\\}/g, type: 'currency' as const, confidence: 0.95 },\n    { pattern: /R\\$\\s*[_]+/g, type: 'currency' as const, confidence: 0.8 },\n    \n    // Números\n    { pattern: /\\{\\{(NUM_[A-Z_]*|QTD_[A-Z_]*)\\}\\}/g, type: 'number' as const, confidence: 0.9 },\n    \n    // Email\n    { pattern: /\\{\\{(EMAIL_[A-Z_]*)\\}\\}/g, type: 'email' as const, confidence: 0.95 },\n    \n    // CPF/CNPJ\n    { pattern: /\\{\\{(CPF_[A-Z_]*)\\}\\}/g, type: 'cpf' as const, confidence: 0.95 },\n    { pattern: /\\{\\{(CNPJ_[A-Z_]*)\\}\\}/g, type: 'cnpj' as const, confidence: 0.95 },\n    { pattern: /___\\.___\\.___-__|___\\/__/__/g, type: 'cpf' as const, confidence: 0.8 }\n  ];\n\n  async processDocxIntelligently(buffer: Buffer): Promise<IntelligentProcessingResult> {\n    try {\n      // Extrair texto do DOCX\n      const result = await mammoth.extractRawText({ buffer });\n      const textoExtraido = result.value;\n\n      if (textoExtraido.trim().length < 50) {\n        throw new Error('Documento muito pequeno ou sem conteúdo válido');\n      }\n\n      // Detectar variáveis com IA\n      const variaveis = this.detectVariablesIntelligently(textoExtraido);\n      \n      // Detectar estrutura\n      const estruturas = this.detectStructureIntelligently(textoExtraido);\n      \n      // Classificar documento\n      const classificacao = this.classifyDocument(textoExtraido);\n      \n      // Calcular métricas de qualidade\n      const qualidade = this.calculateQualityMetrics(textoExtraido, estruturas, variaveis);\n\n      return {\n        textoExtraido,\n        variaveis,\n        estruturas,\n        classificacao,\n        qualidade\n      };\n    } catch (error) {\n      logger.error('Erro no processamento inteligente:', { error: error instanceof Error ? error.toString() : error });\n      throw error;\n    }\n  }\n\n  private detectVariablesIntelligently(text: string): VariableDetection[] {\n    const detectedVariables: Map<string, VariableDetection> = new Map();\n\n    // Aplicar padrões de detecção\n    this.variablePatterns.forEach(({ pattern, type, confidence }) => {\n      let match;\n      const regex = new RegExp(pattern.source, pattern.flags);\n      \n      while ((match = regex.exec(text)) !== null) {\n        const variableName = match[1] || this.generateVariableName(match[0], type);\n        const cleanName = variableName.trim().toUpperCase();\n        \n        if (cleanName.length > 1) {\n          const existing = detectedVariables.get(cleanName);\n          if (!existing || confidence > existing.confidence) {\n            detectedVariables.set(cleanName, {\n              name: cleanName,\n              type,\n              pattern: match[0],\n              confidence,\n              examples: [match[0]],\n              required: this.isRequiredVariable(cleanName, text)\n            });\n          } else {\n            existing.examples.push(match[0]);\n          }\n        }\n      }\n    });\n\n    // Detectar variáveis contextuais\n    this.detectContextualVariables(text, detectedVariables);\n\n    return Array.from(detectedVariables.values())\n      .sort((a, b) => b.confidence - a.confidence)\n      .slice(0, 20); // Limitar a 20 variáveis mais relevantes\n  }\n\n  private detectContextualVariables(text: string, variables: Map<string, VariableDetection>): void {\n    const contextPatterns = [\n      { context: /nome\\s+do\\s+(?:requerente|autor|réu)/gi, variable: 'NOME_PARTE', type: 'text' as const },\n      { context: /endereço\\s+(?:completo|residencial)/gi, variable: 'ENDERECO', type: 'text' as const },\n      { context: /telefone\\s+(?:celular|fixo)?/gi, variable: 'TELEFONE', type: 'text' as const },\n      { context: /processo\\s+n[úo]?\\s*[\\.:]/gi, variable: 'NUMERO_PROCESSO', type: 'text' as const },\n      { context: /comarca\\s+de/gi, variable: 'COMARCA', type: 'text' as const },\n      { context: /valor\\s+da\\s+(?:causa|condenação)/gi, variable: 'VALOR_CAUSA', type: 'currency' as const }\n    ];\n\n    contextPatterns.forEach(({ context, variable, type }) => {\n      if (context.test(text) && !variables.has(variable)) {\n        variables.set(variable, {\n          name: variable,\n          type,\n          pattern: `{{${variable}}}`,\n          confidence: 0.85,\n          examples: [`{{${variable}}}`],\n          required: true\n        });\n      }\n    });\n  }\n\n  private generateVariableName(match: string, type: string): string {\n    const cleanMatch = match.replace(/[{}[\\]]/g, '');\n    if (cleanMatch.length > 1) return cleanMatch;\n    \n    const typePrefix = {\n      text: 'TEXTO',\n      date: 'DATA',\n      currency: 'VALOR',\n      number: 'NUMERO',\n      email: 'EMAIL',\n      cpf: 'CPF',\n      cnpj: 'CNPJ'\n    };\n    \n    return `${typePrefix[type as keyof typeof typePrefix]}_${Date.now()}`;\n  }\n\n  private isRequiredVariable(variableName: string, text: string): boolean {\n    const requiredKeywords = ['obrigatório', 'necessário', 'requerido', 'essencial'];\n    const context = this.getVariableContext(variableName, text, 100);\n    return requiredKeywords.some(keyword => context.toLowerCase().includes(keyword));\n  }\n\n  private getVariableContext(variableName: string, text: string, contextLength: number): string {\n    const index = text.indexOf(variableName);\n    if (index === -1) return '';\n    \n    const start = Math.max(0, index - contextLength);\n    const end = Math.min(text.length, index + variableName.length + contextLength);\n    return text.substring(start, end);\n  }\n\n  private detectStructureIntelligently(text: string): Section[] {\n    const lines = text.split('\\n').filter(line => line.trim());\n    const sections: Section[] = [];\n    let order = 0;\n\n    // Padrões específicos para documentos jurídicos brasileiros\n    const legalPatterns = [\n      { pattern: /^(EXCELENTÍSSIMO|MERITÍSSIMO|ILUSTRÍSSIMO)/i, name: 'Vocativo', type: 'header' as const },\n      { pattern: /^(REQUERENTE|AUTOR|REQUERIDO|RÉU)[:]/i, name: 'Partes', type: 'header' as const },\n      { pattern: /^(DOS\\s+FATOS|RELATÓRIO|HISTÓRICO)/i, name: 'Fatos', type: 'body' as const },\n      { pattern: /^(DO\\s+DIREITO|FUNDAMENTAÇÃO|MÉRITO)/i, name: 'Fundamentação Jurídica', type: 'body' as const },\n      { pattern: /^(DOS\\s+PEDIDOS|REQUERIMENTOS)/i, name: 'Pedidos', type: 'conclusion' as const },\n      { pattern: /^(TERMOS|CONCLUSÃO)/i, name: 'Conclusão', type: 'conclusion' as const }\n    ];\n\n    lines.forEach((line, index) => {\n      const trimmedLine = line.trim();\n      \n      // Verificar padrões jurídicos específicos\n      legalPatterns.forEach(({ pattern, name, type }) => {\n        if (pattern.test(trimmedLine)) {\n          sections.push({\n            name,\n            type,\n            required: true,\n            order: order++,\n            startLine: index,\n            content: trimmedLine\n          });\n        }\n      });\n\n      // Detectar títulos em caixa alta (mínimo 3 palavras)\n      if (trimmedLine.length > 10 && \n          trimmedLine === trimmedLine.toUpperCase() && \n          /^[A-ZÁÉÍÓÚÂÊÎÔÛÃÕÇ\\s]+$/.test(trimmedLine) &&\n          trimmedLine.split(' ').length >= 3) {\n        \n        if (!sections.find(s => s.name === trimmedLine)) {\n          sections.push({\n            name: trimmedLine,\n            type: this.inferSectionType(trimmedLine),\n            required: false,\n            order: order++,\n            startLine: index,\n            content: trimmedLine\n          });\n        }\n      }\n    });\n\n    return sections.sort((a, b) => a.order - b.order);\n  }\n\n  private inferSectionType(title: string): 'header' | 'body' | 'conclusion' {\n    const headerKeywords = ['identificação', 'qualificação', 'partes', 'processo'];\n    const conclusionKeywords = ['pedidos', 'requerimentos', 'conclusão', 'termos'];\n    \n    const lowerTitle = title.toLowerCase();\n    \n    if (headerKeywords.some(keyword => lowerTitle.includes(keyword))) {\n      return 'header';\n    }\n    if (conclusionKeywords.some(keyword => lowerTitle.includes(keyword))) {\n      return 'conclusion';\n    }\n    return 'body';\n  }\n\n  private classifyDocument(text: string): DocumentClassification {\n    const lowerText = text.toLowerCase();\n    const classifications: Array<{ area: keyof typeof this.legalKeywords, score: number, keywords: string[] }> = [];\n\n    Object.entries(this.legalKeywords).forEach(([area, keywords]) => {\n      const foundKeywords = keywords.filter(keyword => lowerText.includes(keyword));\n      const score = foundKeywords.length / keywords.length;\n      \n      if (score > 0) {\n        classifications.push({\n          area: area as keyof typeof this.legalKeywords,\n          score,\n          keywords: foundKeywords\n        });\n      }\n    });\n\n    classifications.sort((a, b) => b.score - a.score);\n    \n    const topClassification = classifications[0];\n    if (!topClassification) {\n      return {\n        area: 'civil',\n        subtype: 'genérico',\n        confidence: 0.3,\n        keywords: []\n      };\n    }\n\n    return {\n      area: topClassification.area,\n      subtype: this.inferSubtype(topClassification.area, text),\n      confidence: Math.min(topClassification.score * 100, 95),\n      keywords: topClassification.keywords\n    };\n  }\n\n  private inferSubtype(area: string, text: string): string {\n    const subtypes = {\n      civil: ['contrato', 'responsabilidade civil', 'família', 'sucessões', 'propriedade'],\n      penal: ['homicídio', 'furto', 'roubo', 'estelionato', 'tráfico'],\n      trabalhista: ['rescisão', 'horas extras', 'acidente trabalho', 'assédio'],\n      tributario: ['icms', 'ipi', 'irpf', 'contribuições', 'elisão'],\n      administrativo: ['licitação', 'servidor público', 'ato administrativo'],\n      constitucional: ['habeas corpus', 'mandado segurança', 'adin']\n    };\n\n    const areaSubtypes = subtypes[area as keyof typeof subtypes] || [];\n    const lowerText = text.toLowerCase();\n    \n    for (const subtype of areaSubtypes) {\n      if (lowerText.includes(subtype)) {\n        return subtype;\n      }\n    }\n    \n    return 'genérico';\n  }\n\n  private calculateQualityMetrics(text: string, sections: Section[], variables: VariableDetection[]): QualityMetrics {\n    // Completeness: estrutura obrigatória presente\n    const requiredSections = sections.filter(s => s.required).length;\n    const completeness = Math.min((requiredSections / 4) * 100, 100); // Assumindo 4 seções obrigatórias ideais\n\n    // Clarity: proporção de texto vs variáveis\n    const textLength = text.length;\n    const variableLength = variables.reduce((sum, v) => sum + v.examples.join('').length, 0);\n    const clarity = Math.min(((textLength - variableLength) / textLength) * 100, 100);\n\n    // Structure: seções bem organizadas\n    const structure = sections.length > 0 ? Math.min(sections.length * 20, 100) : 50;\n\n    // Legal compliance: palavras-chave jurídicas\n    const legalWords = ['considerando', 'fundamentação', 'jurisprudência', 'doutrina'];\n    const legalCount = legalWords.filter(word => text.toLowerCase().includes(word)).length;\n    const legalCompliance = Math.min(legalCount * 25, 100);\n\n    // Overall quality\n    const overall = Math.round((completeness + clarity + structure + legalCompliance) / 4);\n\n    return {\n      completeness: Math.round(completeness),\n      clarity: Math.round(clarity),\n      structure: Math.round(structure),\n      legalCompliance: Math.round(legalCompliance),\n      overall\n    };\n  }\n\n  generateIntelligentPrompt(\n    estruturas: Section[], \n    variaveis: VariableDetection[], \n    classificacao: DocumentClassification,\n    qualidade: QualityMetrics,\n    textoExtraido: string\n  ): string {\n    const variablesDesc = variaveis\n      .filter(v => v.confidence > 0.7)\n      .map(v => `- ${v.name} (${v.type}): ${v.required ? 'obrigatório' : 'opcional'}`)\n      .join('\\n');\n\n    const sectionsDesc = estruturas\n      .map(s => `${s.order + 1}. ${s.name} (${s.type})${s.required ? ' - OBRIGATÓRIO' : ''}`)\n      .join('\\n');\n\n    return `Você é um especialista jurídico brasileiro especializado em ${classificacao.area}, especificamente em ${classificacao.subtype}.\n\nANÁLISE DO DOCUMENTO MODELO:\n- Área jurídica: ${classificacao.area.toUpperCase()} (${classificacao.confidence}% confiança)\n- Subtipo: ${classificacao.subtype}\n- Qualidade geral: ${qualidade.overall}/100\n- Extensão: ${textoExtraido.length} caracteres\n- Seções identificadas: ${estruturas.length}\n- Variáveis detectadas: ${variaveis.length}\n\nESTRUTURA OBRIGATÓRIA:\n${sectionsDesc}\n\nVARIÁVEIS PARA SUBSTITUIÇÃO:\n${variablesDesc}\n\nMÉTRICAS DE QUALIDADE:\n- Completeness: ${qualidade.completeness}/100\n- Clareza: ${qualidade.clarity}/100  \n- Estrutura: ${qualidade.structure}/100\n- Conformidade legal: ${qualidade.legalCompliance}/100\n\nINSTRUÇÕES ESPECÍFICAS PARA ${classificacao.area.toUpperCase()}:\n${this.getAreaSpecificInstructions(classificacao.area)}\n\nPALAVRAS-CHAVE IDENTIFICADAS: ${classificacao.keywords.join(', ')}\n\nINSTRUÇÕES DE GERAÇÃO:\n1. Mantenha RIGOROSAMENTE a estrutura identificada\n2. Use linguagem jurídica formal brasileira específica para ${classificacao.area}\n3. Substitua TODAS as variáveis pelos valores fornecidos\n4. Preserve formatação, numeração e hierarquia\n5. Mantenha coerência com o subtipo \"${classificacao.subtype}\"\n6. Use fundamentação legal sólida e atualizada\n7. Aplique as melhores práticas de ${classificacao.area}\n\nMODELO ORIGINAL (para referência de estilo):\n${textoExtraido.substring(0, 2000)}${textoExtraido.length > 2000 ? '...' : ''}\n\nIMPORTANTE: Gere um documento juridicamente correto, tecnicamente preciso e formalmente adequado para ${classificacao.area} brasileiro.`;\n  }\n\n  private getAreaSpecificInstructions(area: string): string {\n    const instructions = {\n      civil: '- Use fundamentação no Código Civil e legislação específica\\n- Cite jurisprudência do STJ quando relevante\\n- Observe prazos prescricionais e decadenciais',\n      penal: '- Aplique o Código Penal e legislação especial\\n- Observe princípios constitucionais penais\\n- Use jurisprudência do STF e STJ',\n      trabalhista: '- Fundamente na CLT e legislação trabalhista\\n- Cite súmulas do TST\\n- Observe princípios protetivos',\n      tributario: '- Use CTN e legislação tributária específica\\n- Cite jurisprudência administrativa\\n- Observe princípios tributários constitucionais',\n      administrativo: '- Aplique a Lei 9.784/99 e legislação administrativa\\n- Use precedentes administrativos\\n- Observe princípios da administração pública',\n      constitucional: '- Fundamente na Constituição Federal\\n- Cite jurisprudência do STF\\n- Observe direitos fundamentais'\n    };\n\n    return instructions[area as keyof typeof instructions] || 'Use a legislação brasileira aplicável e jurisprudência pertinente';\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/functions/src/services/storageService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/functions/src/types/agent.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/functions/src/types/document.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[724,727],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[724,727],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nexport interface GenerationRequest {\n  mode: 'agent' | 'prompt';\n  agentId?: string;\n  promptType?: string;\n  supportDocuments: string[];\n  instructions: string;\n  templateFile?: string;\n  strictMode: boolean;\n  workspaceId: string;\n}\n\nexport interface GenerationResponse {\n  success: boolean;\n  documentId: string;\n  content: string;\n  metadata: GenerationMetadata;\n  sections: DocumentSection[];\n}\n\nexport interface GenerationMetadata {\n  generatedAt: FirebaseFirestore.Timestamp;\n  tokensUsed: number;\n  processingTime: number;\n  steps: ProcessingStep[];\n}\n\nexport interface ProcessingStep {\n  name: string;\n  status: 'pending' | 'processing' | 'completed' | 'error';\n  startTime: number;\n  endTime?: number;\n  result?: any;\n}\n\nexport interface DocumentSection {\n  title: string;\n  content: string;\n  type: string;\n  order: number;\n}\n\nexport interface Document {\n  id: string;\n  title: string;\n  content: string;\n  agentId?: string;\n  promptType?: string;\n  workspaceId: string;\n  userId: string;\n  metadata: GenerationMetadata;\n  status: 'draft' | 'final';\n  createdAt: FirebaseFirestore.Timestamp;\n  updatedAt: FirebaseFirestore.Timestamp;\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/functions/src/types/pipeline.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/functions/src/types/workspace.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/functions/src/utils/errors.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[905,908],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[905,908],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nexport class AppError extends Error {\n  constructor(\n    public message: string,\n    public statusCode: number = 500,\n    public code?: string\n  ) {\n    super(message);\n    this.name = 'AppError';\n  }\n}\n\nexport class ValidationError extends AppError {\n  constructor(message: string) {\n    super(message, 400, 'VALIDATION_ERROR');\n  }\n}\n\nexport class AuthenticationError extends AppError {\n  constructor(message: string = 'Não autenticado') {\n    super(message, 401, 'AUTHENTICATION_ERROR');\n  }\n}\n\nexport class AuthorizationError extends AppError {\n  constructor(message: string = 'Acesso negado') {\n    super(message, 403, 'AUTHORIZATION_ERROR');\n  }\n}\n\nexport class NotFoundError extends AppError {\n  constructor(message: string = 'Recurso não encontrado') {\n    super(message, 404, 'NOT_FOUND_ERROR');\n  }\n}\n\nimport * as logger from 'firebase-functions/v2/logger';\n\nexport function handleError(error: any) {\n  logger.error('Erro capturado:', { error: error instanceof Error ? error.toString() : error, stack: error?.stack });\n\n  if (error instanceof AppError) {\n    return {\n      success: false,\n      error: error.message,\n      code: error.code,\n      statusCode: error.statusCode\n    };\n  }\n\n  return {\n    success: false,\n    error: 'Erro interno do servidor',\n    code: 'INTERNAL_ERROR',\n    statusCode: 500\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/functions/src/utils/rateLimiting.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":179,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":179,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5594,5597],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5594,5597],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport * as admin from 'firebase-admin';\nimport * as logger from 'firebase-functions/v2/logger';\nimport { Request, Response, NextFunction } from 'express';\n\ninterface RateLimitRule {\n  requests: number;\n  window: number; // em segundos\n  blockDuration: number; // em segundos\n}\n\ninterface RateLimitConfig {\n  global: RateLimitRule;\n  perUser: RateLimitRule;\n  perWorkspace: RateLimitRule;\n  perIP: RateLimitRule;\n}\n\n// Configuração padrão de rate limiting\nconst DEFAULT_CONFIG: RateLimitConfig = {\n  global: { requests: 1000, window: 60, blockDuration: 300 },\n  perUser: { requests: 50, window: 60, blockDuration: 60 },\n  perWorkspace: { requests: 200, window: 60, blockDuration: 120 },\n  perIP: { requests: 100, window: 60, blockDuration: 180 }\n};\n\nexport class RateLimitService {\n  private db: admin.firestore.Firestore;\n  private config: RateLimitConfig;\n\n  constructor(config: Partial<RateLimitConfig> = {}) {\n    this.db = admin.firestore();\n    this.config = { ...DEFAULT_CONFIG, ...config };\n  }\n\n  async checkRateLimit(\n    userId?: string,\n    workspaceId?: string,\n    ipAddress?: string\n  ): Promise<{ allowed: boolean; retryAfter?: number; reason?: string }> {\n    const now = Date.now();\n    const checks = [];\n\n    // Verificar limite global\n    checks.push(this.checkLimit('global', 'global', this.config.global, now));\n\n    // Verificar limite por usuário\n    if (userId) {\n      checks.push(this.checkLimit('user', userId, this.config.perUser, now));\n    }\n\n    // Verificar limite por workspace\n    if (workspaceId) {\n      checks.push(this.checkLimit('workspace', workspaceId, this.config.perWorkspace, now));\n    }\n\n    // Verificar limite por IP\n    if (ipAddress) {\n      checks.push(this.checkLimit('ip', ipAddress, this.config.perIP, now));\n    }\n\n    const results = await Promise.all(checks);\n    const blocked = results.find(result => !result.allowed);\n\n    if (blocked) {\n      return blocked;\n    }\n\n    // Se passou em todos os checks, incrementar contadores\n    const increments = [];\n    \n    if (userId) {\n      increments.push(this.incrementCounter('user', userId, now));\n    }\n    if (workspaceId) {\n      increments.push(this.incrementCounter('workspace', workspaceId, now));\n    }\n    if (ipAddress) {\n      increments.push(this.incrementCounter('ip', ipAddress, now));\n    }\n    increments.push(this.incrementCounter('global', 'global', now));\n\n    await Promise.all(increments);\n\n    return { allowed: true };\n  }\n\n  private async checkLimit(\n    type: string,\n    identifier: string,\n    rule: RateLimitRule,\n    now: number\n  ): Promise<{ allowed: boolean; retryAfter?: number; reason?: string }> {\n    const key = `${type}_${identifier}`;\n    const windowStart = now - (rule.window * 1000);\n\n    try {\n      const doc = await this.db.collection('rate_limits').doc(key).get();\n      \n      if (!doc.exists) {\n        return { allowed: true };\n      }\n\n      const data = doc.data();\n      \n      // Verificar se está bloqueado\n      if (data?.blockedUntil && data.blockedUntil > now) {\n        return {\n          allowed: false,\n          retryAfter: Math.ceil((data.blockedUntil - now) / 1000),\n          reason: `Rate limited: ${type}`\n        };\n      }\n\n      // Contar requests na janela atual\n      const requests = data?.requests?.filter((timestamp: number) => timestamp > windowStart) || [];\n      \n      if (requests.length >= rule.requests) {\n        // Bloquear por blockDuration\n        const blockedUntil = now + (rule.blockDuration * 1000);\n        await this.db.collection('rate_limits').doc(key).update({\n          blockedUntil,\n          lastViolation: now\n        });\n\n        return {\n          allowed: false,\n          retryAfter: rule.blockDuration,\n          reason: `Rate limit exceeded: ${type}`\n        };\n      }\n\n      return { allowed: true };\n    } catch (error) {\n      logger.error(`Erro ao verificar rate limit para ${key}:`, { error: error instanceof Error ? error.toString() : error, key });\n      // Em caso de erro, permitir a requisição (fail-open)\n      return { allowed: true };\n    }\n  }\n\n  private async incrementCounter(type: string, identifier: string, now: number): Promise<void> {\n    const key = `${type}_${identifier}`;\n    const rule = this.config[`per${type.charAt(0).toUpperCase() + type.slice(1)}` as keyof RateLimitConfig] || this.config.global;\n    const windowStart = now - (rule.window * 1000);\n\n    try {\n      await this.db.runTransaction(async (transaction) => {\n        const docRef = this.db.collection('rate_limits').doc(key);\n        const doc = await transaction.get(docRef);\n        \n        if (doc.exists) {\n          const data = doc.data();\n          const requests = data?.requests?.filter((timestamp: number) => timestamp > windowStart) || [];\n          requests.push(now);\n          \n          transaction.update(docRef, {\n            requests,\n            lastRequest: now,\n            updatedAt: admin.firestore.FieldValue.serverTimestamp()\n          });\n        } else {\n          transaction.set(docRef, {\n            requests: [now],\n            lastRequest: now,\n            createdAt: admin.firestore.FieldValue.serverTimestamp(),\n            updatedAt: admin.firestore.FieldValue.serverTimestamp()\n          });\n        }\n      });\n    } catch (error) {\n      logger.error(`Erro ao incrementar contador para ${key}:`, { error: error instanceof Error ? error.toString() : error, key });\n    }\n  }\n\n  // Middleware Express para rate limiting\n  middleware() {\n    return async (req: Request, res: Response, next: NextFunction) => {\n      try {\n        const userId = (req as any).user?.uid;\n        const workspaceId = req.body?.workspaceId || req.query?.workspaceId;\n        const ipAddress = req.ip || req.connection.remoteAddress;\n\n        const result = await this.checkRateLimit(userId, workspaceId, ipAddress);\n\n        if (!result.allowed) {\n          return res.status(429).json({\n            success: false,\n            error: result.reason || 'Rate limit exceeded',\n            retryAfter: result.retryAfter\n          });\n        }\n\n        next();\n      } catch (error) {\n        logger.error('Erro no middleware de rate limiting:', { error: error instanceof Error ? error.toString() : error });\n        // Em caso de erro, permitir a requisição\n        next();\n      }\n    };\n  }\n\n  // Limpar dados antigos (para ser executado periodicamente)\n  async cleanup(): Promise<void> {\n    const cutoff = Date.now() - (24 * 60 * 60 * 1000); // 24 horas atrás\n    \n    try {\n      const batch = this.db.batch();\n      const snapshot = await this.db\n        .collection('rate_limits')\n        .where('updatedAt', '<', new Date(cutoff))\n        .limit(500)\n        .get();\n\n      snapshot.docs.forEach(doc => {\n        batch.delete(doc.ref);\n      });\n\n      await batch.commit();\n      logger.info(`Limpeza do rate limiting: ${snapshot.size} registros removidos`);\n    } catch (error) {\n      logger.error('Erro na limpeza do rate limiting:', { error: error instanceof Error ? error.toString() : error });\n    }\n  }\n}\n\n// Instância global do serviço\nexport const rateLimitService = new RateLimitService();\n","usedDeprecatedRules":[]},{"filePath":"/app/functions/src/utils/validation.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":75,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2874,2877],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2874,2877],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":101,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3638,3641],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3638,3641],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":101,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3644,3647],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3644,3647],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\$.","line":120,"column":49,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":120,"endColumn":50,"suggestions":[{"messageId":"removeEscape","fix":{"range":[4612,4613],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[4612,4612],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\{.","line":120,"column":51,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":120,"endColumn":52,"suggestions":[{"messageId":"removeEscape","fix":{"range":[4614,4615],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[4614,4614],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\}.","line":120,"column":53,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":120,"endColumn":54,"suggestions":[{"messageId":"removeEscape","fix":{"range":[4616,4617],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[4616,4616],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":134,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5174,5177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5174,5177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":190,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7279,7282],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7279,7282],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":192,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":192,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7330,7333],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7330,7333],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport * as Joi from 'joi';\n\n// Schema para processamento de modelo V2\nexport const processarModeloSchema = Joi.object({\n  workspaceId: Joi.string().uuid().required(),\n  createAgent: Joi.boolean().default(false),\n  agentName: Joi.string().min(2).max(100).when('createAgent', {\n    is: true,\n    then: Joi.required(),\n    otherwise: Joi.optional()\n  }),\n  userPreferences: Joi.object({\n    complexity: Joi.string().valid('simple', 'intermediate', 'advanced').default('intermediate'),\n    focus: Joi.string().valid('speed', 'quality', 'precision').default('quality'),\n    style: Joi.string().valid('formal', 'didactic', 'technical').default('formal')\n  }).optional()\n});\n\nexport const gerarDocumentoSchema = Joi.object({\n  mode: Joi.string().valid('agent', 'prompt').required(),\n  agentId: Joi.string().uuid().when('mode', {\n    is: 'agent',\n    then: Joi.required(),\n    otherwise: Joi.optional()\n  }),\n  promptType: Joi.string().when('mode', {\n    is: 'prompt',\n    then: Joi.required(),\n    otherwise: Joi.optional()\n  }),\n  supportDocuments: Joi.array().items(Joi.string().uri()).max(10).default([]),\n  instructions: Joi.string().min(10).max(5000).required(),\n  templateFile: Joi.string().uri().optional(),\n  strictMode: Joi.boolean().default(false),\n  workspaceId: Joi.string().uuid().required()\n});\n\nexport const criarAgenteSchema = Joi.object({\n  name: Joi.string().min(2).max(100).required(),\n  theme: Joi.string().min(2).max(200).required(),\n  description: Joi.string().max(500).optional(),\n  workspaceId: Joi.string().uuid().required(),\n  variables: Joi.array().items(Joi.string()).min(1).required(),\n  structure: Joi.array().items(Joi.object({\n    name: Joi.string().required(),\n    type: Joi.string().valid('header', 'body', 'conclusion', 'section').required(),\n    required: Joi.boolean().required(),\n    order: Joi.number().integer().min(0).required(),\n    startLine: Joi.number().integer().min(0).optional(),\n    content: Joi.string().optional()\n  })).min(1).required(),\n  extractedText: Joi.string().min(50).max(500000).required(),\n  documentTemplate: Joi.object({\n    fileUrl: Joi.string().uri().required(),\n    fileName: Joi.string().min(1).max(255).required()\n  }).optional()\n});\n\n// Schema para workspace\nexport const workspaceSchema = Joi.object({\n  name: Joi.string().min(2).max(100).required(),\n  description: Joi.string().max(500).optional(),\n  members: Joi.array().items(Joi.string().email()).max(50).default([])\n});\n\nexport const exportarDocumentoSchema = Joi.object({\n  formato: Joi.string().valid('docx', 'pdf').required()\n});\n\n// Função de validação com sanitização\n// ATENÇÃO: Esta função realiza uma sanitização básica.\n// É crucial complementar com outras práticas de segurança,\n// como output encoding para prevenir XSS e queries parametrizadas para evitar SQL/NoSQL Injection.\nexport function validateRequest(schema: Joi.ObjectSchema, data: any) {\n  // Sanitizar dados primeiro\n  const sanitizedData = sanitizeInput(data);\n  \n  const { error, value } = schema.validate(sanitizedData, {\n    abortEarly: false,\n    stripUnknown: true,\n    convert: true\n  });\n  \n  if (error) {\n    const details = error.details.map(detail => ({\n      field: detail.path.join('.'),\n      message: detail.message,\n      value: detail.context?.value\n    }));\n    \n    throw new ValidationError(`Validação falhou: ${details.map(d => d.message).join(', ')}`, details);\n  }\n  \n  return value;\n}\n\n// Sanitização de entrada\n// Esta função aplica várias regras de sanitização para mitigar riscos comuns.\n// No entanto, é fundamental entender suas limitações e combiná-la com outras medidas de segurança.\nfunction sanitizeInput(data: any): any {\n  if (typeof data === 'string') {\n    let sanitizedString = data.trim();\n\n    // Remover caracteres < e > para mitigar XSS básico.\n    // IMPORTANTE: Isso não é uma proteção completa contra XSS.\n    // Output encoding adequado é essencial no frontend/template engine.\n    sanitizedString = sanitizedString.replace(/[<>]/g, '');\n\n    // Remover \"javascript:\" para prevenir XSS via URLs.\n    sanitizedString = sanitizedString.replace(/javascript:/gi, '');\n\n    // Remover atributos \"on<event>=\" para desarmar handlers de eventos inline.\n    sanitizedString = sanitizedString.replace(/on\\w+=/gi, '');\n\n    // Remover caracteres comuns de injeção NoSQL ($, {, }).\n    // ATENÇÃO: Isso pode ser restritivo demais se esses caracteres forem esperados em algum campo.\n    // Avalie o impacto e considere abordagens mais específicas se necessário.\n    // O ideal é usar queries parametrizadas/preparadas no banco de dados.\n    sanitizedString = sanitizedString.replace(/[\\$\\{\\}]/g, '');\n\n    // Limitar o tamanho da string para prevenir ataques de negação de serviço (DoS) ou sobrecarga.\n    // O limite de 10000 caracteres deve ser ajustado conforme a necessidade da aplicação.\n    return sanitizedString.substring(0, 10000);\n  }\n  \n  if (Array.isArray(data)) {\n    // Limitar o número de elementos em arrays para prevenir DoS.\n    // O limite de 100 elementos deve ser ajustado conforme a necessidade.\n    return data.slice(0, 100).map(sanitizeInput);\n  }\n  \n  if (typeof data === 'object' && data !== null) {\n    const sanitized: any = {};\n    for (const [key, value] of Object.entries(data)) {\n      if (typeof key === 'string' && key.length <= 100) { // Limitar tamanho da chave\n        // Sanitizar chaves de objeto para permitir apenas caracteres alfanuméricos, underscores e hífens.\n        // Isso ajuda a prevenir ataques como prototype pollution e outros baseados em chaves maliciosas.\n        // ATENÇÃO: Se chaves com outros caracteres são esperadas, esta regra pode ser muito restritiva.\n        // Considere logar um aviso se chaves forem significativamente alteradas.\n        const sanitizedKey = key.replace(/[^a-zA-Z0-9_-]/g, '');\n        sanitized[sanitizedKey] = sanitizeInput(value);\n      }\n    }\n    return sanitized;\n  }\n  \n  // Retornar o dado como está se não for string, array ou objeto.\n  return data;\n}\n\n// Validação de arquivo\nexport function validateFile(file: Express.Multer.File, allowedTypes: string[], maxSize: number = 50 * 1024 * 1024) {\n  if (!file) {\n    throw new ValidationError('Arquivo é obrigatório');\n  }\n  \n  if (!allowedTypes.includes(file.mimetype)) {\n    throw new ValidationError(`Tipo de arquivo não permitido. Permitidos: ${allowedTypes.join(', ')}`);\n  }\n  \n  if (file.size > maxSize) {\n    throw new ValidationError(`Arquivo muito grande. Máximo: ${Math.floor(maxSize / 1024 / 1024)}MB`);\n  }\n  \n  // Verificar extensão do arquivo\n  const allowedExtensions = allowedTypes.map(type => {\n    switch (type) {\n      case 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':\n        return '.docx';\n      case 'application/pdf':\n        return '.pdf';\n      case 'text/plain':\n        return '.txt';\n      default:\n        return '';\n    }\n  }).filter(Boolean);\n  \n  const fileExtension = file.originalname.toLowerCase().substring(file.originalname.lastIndexOf('.'));\n  if (!allowedExtensions.includes(fileExtension)) {\n    throw new ValidationError(`Extensão de arquivo não permitida. Permitidas: ${allowedExtensions.join(', ')}`);\n  }\n  \n  return true;\n}\n\n// Classe de erro de validação personalizada\nexport class ValidationError extends Error {\n  public details?: any[];\n  \n  constructor(message: string, details?: any[]) {\n    super(message);\n    this.name = 'ValidationError';\n    this.details = details;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/AppSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/DocumentEditor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/DocumentEditorAdvanced.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Badge' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":112,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":112,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useEffect, useRef, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { \n  FileText, \n  Copy, \n  Download, \n  Eye, \n  Edit3, \n  Check, \n  AlertTriangle,\n  Lightbulb,\n  Zap,\n  BookOpen\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface DocumentEditorAdvancedProps {\n  content: string;\n  onChange: (content: string) => void;\n  title?: string;\n  suggestions?: string[];\n  onExport?: (format: 'docx' | 'pdf') => void;\n}\n\ninterface DocumentStats {\n  words: number;\n  characters: number;\n  paragraphs: number;\n  pages: number;\n}\n\ninterface QualityCheck {\n  type: 'error' | 'warning' | 'suggestion';\n  message: string;\n  line?: number;\n}\n\nexport function DocumentEditorAdvanced({ \n  content, \n  onChange, \n  title = \"Documento\",\n  suggestions = [],\n  onExport \n}: DocumentEditorAdvancedProps) {\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const [isPreviewMode, setIsPreviewMode] = useState(false);\n  const [stats, setStats] = useState<DocumentStats>({ words: 0, characters: 0, paragraphs: 0, pages: 0 });\n  const [qualityChecks, setQualityChecks] = useState<QualityCheck[]>([]);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const { toast } = useToast();\n\n  // Auto-resize textarea\n  useEffect(() => {\n    if (textareaRef.current && !isPreviewMode) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = textareaRef.current.scrollHeight + 'px';\n    }\n  }, [content, isPreviewMode]);\n\n  // Calculate document statistics\n  useEffect(() => {\n    const words = content.trim() ? content.trim().split(/\\s+/).length : 0;\n    const characters = content.length;\n    const paragraphs = content.split('\\n\\n').filter(p => p.trim().length > 0).length;\n    const pages = Math.max(1, Math.ceil(words / 250)); // Approx 250 words per page\n\n    setStats({ words, characters, paragraphs, pages });\n  }, [content]);\n\n  // Quality checks (simplified)\n  useEffect(() => {\n    const checks: QualityCheck[] = [];\n    \n    // Check for common issues\n    if (content.includes('  ')) {\n      checks.push({\n        type: 'warning',\n        message: 'Espaços duplos detectados'\n      });\n    }\n    \n    if (content.length > 0 && !content.trim().endsWith('.')) {\n      checks.push({\n        type: 'suggestion',\n        message: 'Documento não termina com ponto final'\n      });\n    }\n    \n    // Check for very long paragraphs\n    const longParagraphs = content.split('\\n\\n').filter(p => p.length > 500);\n    if (longParagraphs.length > 0) {\n      checks.push({\n        type: 'suggestion',\n        message: `${longParagraphs.length} parágrafo(s) muito longo(s) - considere dividir`\n      });\n    }\n\n    setQualityChecks(checks);\n  }, [content]);\n\n  const handleCopy = async () => {\n    try {\n      await navigator.clipboard.writeText(content);\n      toast({\n        title: \"Copiado!\",\n        description: \"Conteúdo copiado para a área de transferência\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Erro ao copiar\",\n        description: \"Não foi possível copiar o conteúdo\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const getQualityIcon = (type: QualityCheck['type']) => {\n    switch (type) {\n      case 'error': return <AlertTriangle className=\"h-4 w-4 text-red-500\" />;\n      case 'warning': return <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />;\n      case 'suggestion': return <Lightbulb className=\"h-4 w-4 text-blue-500\" />;\n    }\n  };\n\n  const formatText = (text: string) => {\n    return text.split('\\n').map((line, index) => (\n      <p key={index} className=\"mb-2 leading-relaxed\">\n        {line || <br />}\n      </p>\n    ));\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Header com título e estatísticas */}\n      <Card className=\"border-blue-200\">\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2 text-lg\">\n              <FileText className=\"h-5 w-5 text-blue-600\" />\n              {title}\n            </CardTitle>\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setIsPreviewMode(!isPreviewMode)}\n                className={isPreviewMode ? \"bg-blue-50 border-blue-300\" : \"\"}\n              >\n                {isPreviewMode ? <Edit3 className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                {isPreviewMode ? \"Editar\" : \"Preview\"}\n              </Button>\n              {suggestions.length > 0 && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setShowSuggestions(!showSuggestions)}\n                  className=\"flex items-center gap-1\"\n                >\n                  <Zap className=\"h-4 w-4\" />\n                  Sugestões ({suggestions.length})\n                </Button>\n              )}\n            </div>\n          </div>\n          \n          {/* Estatísticas */}\n          <div className=\"flex gap-4 text-sm text-gray-600\">\n            <span>{stats.words} palavras</span>\n            <span>{stats.characters} caracteres</span>\n            <span>{stats.paragraphs} parágrafos</span>\n            <span>~{stats.pages} página(s)</span>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Sugestões (se houver) */}\n      {showSuggestions && suggestions.length > 0 && (\n        <Card className=\"border-yellow-200 bg-yellow-50\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"flex items-center gap-2 text-lg\">\n              <Lightbulb className=\"h-5 w-5 text-yellow-600\" />\n              Sugestões de Melhoria\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {suggestions.map((suggestion, index) => (\n                <div key={index} className=\"flex items-start gap-2 p-2 bg-white rounded border\">\n                  <BookOpen className=\"h-4 w-4 text-yellow-600 mt-0.5 flex-shrink-0\" />\n                  <p className=\"text-sm\">{suggestion}</p>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Editor principal */}\n      <Card className=\"border-gray-200\">\n        <CardContent className=\"p-0\">\n          {isPreviewMode ? (\n            <div className=\"p-6 min-h-[400px] bg-white\">\n              <div className=\"prose max-w-none\">\n                {formatText(content)}\n              </div>\n            </div>\n          ) : (\n            <Textarea\n              ref={textareaRef}\n              value={content}\n              onChange={(e) => onChange(e.target.value)}\n              className=\"min-h-[400px] border-0 rounded-none resize-none font-mono text-sm leading-relaxed\"\n              placeholder=\"Digite o conteúdo do documento...\"\n            />\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Quality checks */}\n      {qualityChecks.length > 0 && (\n        <Card className=\"border-gray-200\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"flex items-center gap-2 text-sm\">\n              <Check className=\"h-4 w-4 text-green-600\" />\n              Verificação de Qualidade\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {qualityChecks.map((check, index) => (\n                <div key={index} className=\"flex items-start gap-2 text-sm\">\n                  {getQualityIcon(check.type)}\n                  <span>{check.message}</span>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Actions */}\n      <div className=\"flex gap-3\">\n        <Button onClick={handleCopy} variant=\"outline\" className=\"flex items-center gap-2\">\n          <Copy className=\"h-4 w-4\" />\n          Copiar\n        </Button>\n        \n        {onExport && (\n          <>\n            <Button \n              onClick={() => onExport('docx')} \n              variant=\"outline\"\n              className=\"flex items-center gap-2\"\n            >\n              <Download className=\"h-4 w-4\" />\n              Baixar DOCX\n            </Button>\n            <Button \n              onClick={() => onExport('pdf')} \n              variant=\"outline\"\n              className=\"flex items-center gap-2\"\n            >\n              <Download className=\"h-4 w-4\" />\n              Baixar PDF\n            </Button>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/DocumentRating.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MessageSquare' is defined but never used.","line":7,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":84,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":84,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Star, ThumbsUp, ThumbsDown, MessageSquare, Send, Sparkles } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface DocumentRatingProps {\n  documentId: string;\n  documentTitle: string;\n  onRatingSubmit: (rating: DocumentRating) => void;\n}\n\ninterface DocumentRating {\n  documentId: string;\n  rating: number;\n  feedback: string;\n  categories: string[];\n  timestamp: string;\n}\n\nconst FEEDBACK_CATEGORIES = [\n  \"Precisão Jurídica\",\n  \"Formatação\",\n  \"Clareza\",\n  \"Completude\",\n  \"Estrutura\",\n  \"Linguagem\"\n];\n\nexport function DocumentRating({ documentId, documentTitle, onRatingSubmit }: DocumentRatingProps) {\n  const [rating, setRating] = useState<number>(0);\n  const [feedback, setFeedback] = useState(\"\");\n  const [selectedCategories, setSelectedCategories] = useState<string[]>([]);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n\n  const handleStarClick = (starRating: number) => {\n    setRating(starRating);\n  };\n\n  const toggleCategory = (category: string) => {\n    setSelectedCategories(prev => \n      prev.includes(category) \n        ? prev.filter(c => c !== category)\n        : [...prev, category]\n    );\n  };\n\n  const handleSubmit = async () => {\n    if (rating === 0) {\n      toast({\n        title: \"Rating obrigatório\",\n        description: \"Por favor, selecione uma nota de 1 a 5 estrelas\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    const ratingData: DocumentRating = {\n      documentId,\n      rating,\n      feedback,\n      categories: selectedCategories,\n      timestamp: new Date().toISOString()\n    };\n\n    try {\n      await onRatingSubmit(ratingData);\n      \n      toast({\n        title: \"Obrigado pelo feedback!\",\n        description: \"Sua avaliação nos ajuda a melhorar continuamente\",\n      });\n\n      // Reset form\n      setRating(0);\n      setFeedback(\"\");\n      setSelectedCategories([]);\n    } catch (error) {\n      toast({\n        title: \"Erro ao enviar feedback\",\n        description: \"Tente novamente em alguns instantes\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const getQuickFeedback = (type: 'good' | 'bad') => {\n    if (type === 'good') {\n      setRating(5);\n      setFeedback(\"Documento excelente! Atendeu perfeitamente às expectativas.\");\n    } else {\n      setRating(2);\n      setFeedback(\"Documento precisa de melhorias. \");\n    }\n  };\n\n  return (\n    <Card className=\"border-purple-200 bg-gradient-to-br from-purple-50 to-blue-50\">\n      <CardHeader className=\"pb-4\">\n        <CardTitle className=\"flex items-center gap-2 text-lg\">\n          <Sparkles className=\"h-5 w-5 text-purple-600\" />\n          Avalie este documento\n        </CardTitle>\n        <p className=\"text-sm text-gray-600\">\n          <strong>{documentTitle}</strong> - Sua avaliação nos ajuda a melhorar\n        </p>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-6\">\n        {/* Rating com estrelas */}\n        <div className=\"space-y-3\">\n          <label className=\"text-sm font-medium\">Nota geral (1-5 estrelas)</label>\n          <div className=\"flex gap-1\">\n            {[1, 2, 3, 4, 5].map((star) => (\n              <button\n                key={star}\n                onClick={() => handleStarClick(star)}\n                className=\"transition-all hover:scale-110\"\n              >\n                <Star\n                  className={`h-8 w-8 ${\n                    star <= rating \n                      ? 'fill-yellow-400 text-yellow-400' \n                      : 'text-gray-300 hover:text-yellow-300'\n                  }`}\n                />\n              </button>\n            ))}\n          </div>\n          {rating > 0 && (\n            <p className=\"text-sm text-gray-600\">\n              {rating === 5 && \"⭐ Excelente!\"}\n              {rating === 4 && \"👍 Muito bom!\"}\n              {rating === 3 && \"👌 Bom\"}\n              {rating === 2 && \"⚠️ Precisa melhorar\"}\n              {rating === 1 && \"❌ Insatisfatório\"}\n            </p>\n          )}\n        </div>\n\n        {/* Feedback rápido */}\n        <div className=\"space-y-3\">\n          <label className=\"text-sm font-medium\">Avaliação rápida</label>\n          <div className=\"flex gap-3\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => getQuickFeedback('good')}\n              className=\"flex items-center gap-2 hover:bg-green-50 hover:border-green-300\"\n            >\n              <ThumbsUp className=\"h-4 w-4\" />\n              Documento bom\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => getQuickFeedback('bad')}\n              className=\"flex items-center gap-2 hover:bg-red-50 hover:border-red-300\"\n            >\n              <ThumbsDown className=\"h-4 w-4\" />\n              Precisa melhorar\n            </Button>\n          </div>\n        </div>\n\n        {/* Categorias de feedback */}\n        <div className=\"space-y-3\">\n          <label className=\"text-sm font-medium\">Aspectos avaliados (opcional)</label>\n          <div className=\"flex flex-wrap gap-2\">\n            {FEEDBACK_CATEGORIES.map((category) => (\n              <button\n                key={category}\n                onClick={() => toggleCategory(category)}\n                className=\"transition-all\"\n              >\n                <Badge\n                  variant={selectedCategories.includes(category) ? \"default\" : \"outline\"}\n                  className={`cursor-pointer ${\n                    selectedCategories.includes(category)\n                      ? 'bg-purple-100 text-purple-800 border-purple-300'\n                      : 'hover:bg-purple-50'\n                  }`}\n                >\n                  {category}\n                </Badge>\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Comentários detalhados */}\n        <div className=\"space-y-3\">\n          <label className=\"text-sm font-medium\">Comentários (opcional)</label>\n          <Textarea\n            placeholder=\"Compartilhe sua experiência... O que funcionou bem? O que pode melhorar?\"\n            value={feedback}\n            onChange={(e) => setFeedback(e.target.value)}\n            className=\"min-h-[100px]\"\n          />\n        </div>\n\n        {/* Botão de envio */}\n        <Button\n          onClick={handleSubmit}\n          disabled={rating === 0 || isSubmitting}\n          className=\"w-full bg-purple-600 hover:bg-purple-700\"\n        >\n          <Send className=\"mr-2 h-4 w-4\" />\n          {isSubmitting ? \"Enviando...\" : \"Enviar Avaliação\"}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ExpandableDocument.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Download' is defined but never used.","line":6,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":51}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport { ChevronDown, ChevronRight, Copy, Download, Edit3, FileText } from \"lucide-react\";\nimport { DocumentEditor } from \"./DocumentEditor\";\nimport { ExportButtons } from \"./ExportButtons\";\n\ninterface ExpandableDocumentProps {\n  content: string;\n  onContentChange: (content: string) => void;\n  title: string;\n}\n\nexport function ExpandableDocument({ content, onContentChange, title }: ExpandableDocumentProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n\n  const handleCopy = () => {\n    navigator.clipboard.writeText(content);\n  };\n\n  if (!content) {\n    return (\n      <Card>\n        <CardContent className=\"p-12 text-center\">\n          <FileText className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n          <p className=\"text-muted-foreground\">O documento gerado aparecerá aqui</p>\n          <p className=\"text-sm text-muted-foreground\">Configure os parâmetros e clique em \"Gerar Documento\"</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <Collapsible open={isExpanded} onOpenChange={setIsExpanded}>\n        <CollapsibleTrigger asChild>\n          <CardHeader className=\"cursor-pointer hover:bg-muted/50\">\n            <CardTitle className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <FileText className=\"h-5 w-5\" />\n                {title}\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <ExportButtons content={content} filename={title} />\n                <Button size=\"sm\" variant=\"ghost\" onClick={handleCopy}>\n                  <Copy className=\"h-4 w-4\" />\n                </Button>\n                {isExpanded ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n              </div>\n            </CardTitle>\n          </CardHeader>\n        </CollapsibleTrigger>\n        \n        <CollapsibleContent>\n          <CardContent>\n            {isEditing ? (\n              <div className=\"space-y-4\">\n                <DocumentEditor content={content} onChange={onContentChange} />\n                <div className=\"flex gap-2\">\n                  <Button size=\"sm\" onClick={() => setIsEditing(false)}>\n                    Salvar\n                  </Button>\n                  <Button size=\"sm\" variant=\"outline\" onClick={() => setIsEditing(false)}>\n                    Cancelar\n                  </Button>\n                </div>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                <div className=\"bg-muted p-4 rounded-lg max-h-96 overflow-auto\">\n                  <pre className=\"whitespace-pre-wrap text-sm font-mono\">{content}</pre>\n                </div>\n                <Button size=\"sm\" variant=\"outline\" onClick={() => setIsEditing(true)}>\n                  <Edit3 className=\"h-4 w-4 mr-2\" />\n                  Editar Documento\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </CollapsibleContent>\n      </Collapsible>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ExportButtons.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/FileUpload.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'processSupportFiles' and 'toast'. Either include them or remove the dependency array.","line":95,"column":6,"nodeType":"ArrayExpression","endLine":95,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [processSupportFiles, toast]","fix":{"range":[3286,3288],"text":"[processSupportFiles, toast]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState, useCallback } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Upload, FileText, X, Eye, Loader2, BookOpen, Files, Image, FileType } from \"lucide-react\";\nimport { createWorker } from 'tesseract.js';\nimport { useToast } from \"@/components/ui/use-toast\";\n\ninterface UploadedFile {\n  id: string;\n  name: string;\n  size: number;\n  type: string;\n  content?: string;\n}\n\ninterface FileUploadProps {\n  onSupportFilesChange: (files: UploadedFile[]) => void;\n  onTemplateFileChange: (file: UploadedFile | null) => void;\n  onStrictModeChange: (enabled: boolean) => void;\n  strictMode: boolean;\n}\n\nexport function FileUpload({ onSupportFilesChange, onTemplateFileChange, onStrictModeChange, strictMode }: FileUploadProps) {\n  const [supportFiles, setSupportFiles] = useState<UploadedFile[]>([]);\n  const [templateFile, setTemplateFile] = useState<UploadedFile | null>(null);\n  const [isProcessingSupportFiles, setIsProcessingSupportFiles] = useState(false);\n  const [isProcessingTemplate, setIsProcessingTemplate] = useState(false);\n  const [processingFileName, setProcessingFileName] = useState<string>(\"\");\n  const [isDragOver, setIsDragOver] = useState(false);\n  const { toast } = useToast();\n\n  const performOCR = async (file: File): Promise<string> => {\n    try {\n      const worker = await createWorker('por');\n      const { data: { text } } = await worker.recognize(file);\n      await worker.terminate();\n      return text;\n    } catch (error) {\n      console.error('Erro no OCR:', error);\n      toast({\n        title: \"Erro no OCR\",\n        description: `Não foi possível processar ${file.name} com OCR`,\n        variant: \"destructive\",\n      });\n      return `Erro ao processar ${file.name} com OCR`;\n    }\n  };\n\n  const readTextFile = (file: File): Promise<string> => {\n    return new Promise((resolve) => {\n      const reader = new FileReader();\n      reader.onload = (e) => resolve(e.target?.result as string || '');\n      reader.readAsText(file);\n    });\n  };\n\n  const handleDragOver = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(true);\n  }, []);\n\n  const handleDragLeave = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n  }, []);\n\n  const handleDrop = useCallback(async (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n    \n    const files = Array.from(e.dataTransfer.files);\n    if (files.length === 0) return;\n\n    // Check if files are acceptable for support documents\n    const acceptedTypes = ['.pdf', '.doc', '.docx', '.txt', '.jpg', '.png'];\n    const validFiles = files.filter(file => \n      acceptedTypes.some(type => file.name.toLowerCase().endsWith(type.replace('.', '')))\n    );\n\n    if (validFiles.length !== files.length) {\n      toast({\n        title: \"Arquivos não suportados\",\n        description: \"Alguns arquivos não são suportados e foram ignorados\",\n        variant: \"destructive\",\n      });\n    }\n\n    if (validFiles.length > 0) {\n      await processSupportFiles(validFiles);\n    }\n  }, []);\n\n  const processSupportFiles = async (selectedFiles: File[]) => {\n    setIsProcessingSupportFiles(true);\n    const newFiles: UploadedFile[] = [];\n    \n    for (const file of selectedFiles) {\n      setProcessingFileName(file.name);\n      \n      let content = '';\n      \n      if (file.type.startsWith('image/')) {\n        content = await performOCR(file);\n      } else if (file.type === 'text/plain') {\n        content = await readTextFile(file);\n      } else {\n        content = `Arquivo ${file.name} carregado. Tipo: ${file.type}`;\n      }\n      \n      const uploadedFile: UploadedFile = {\n        id: Math.random().toString(36).substring(7),\n        name: file.name,\n        size: file.size,\n        type: file.type,\n        content\n      };\n      \n      newFiles.push(uploadedFile);\n    }\n\n    const updatedFiles = [...supportFiles, ...newFiles];\n    setSupportFiles(updatedFiles);\n    onSupportFilesChange(updatedFiles);\n    setIsProcessingSupportFiles(false);\n    setProcessingFileName(\"\");\n\n    toast({\n      title: \"Upload concluído\",\n      description: `${newFiles.length} arquivo(s) processado(s) com sucesso`,\n    });\n  };\n\n  const handleSupportFilesUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFiles = Array.from(event.target.files || []);\n    if (selectedFiles.length === 0) return;\n\n    await processSupportFiles(selectedFiles);\n  };\n\n  const handleTemplateFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFile = event.target.files?.[0];\n    if (!selectedFile) return;\n\n    if (!selectedFile.name.toLowerCase().endsWith('.docx')) {\n      toast({\n        title: \"Arquivo inválido\",\n        description: \"Apenas arquivos .docx são aceitos para modelos\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsProcessingTemplate(true);\n    setProcessingFileName(selectedFile.name);\n\n    const uploadedFile: UploadedFile = {\n      id: Math.random().toString(36).substring(7),\n      name: selectedFile.name,\n      size: selectedFile.size,\n      type: selectedFile.type,\n      content: `Modelo jurídico ${selectedFile.name} carregado`\n    };\n\n    setTemplateFile(uploadedFile);\n    onTemplateFileChange(uploadedFile);\n    setIsProcessingTemplate(false);\n    setProcessingFileName(\"\");\n\n    toast({\n      title: \"Modelo carregado\",\n      description: `${selectedFile.name} foi carregado como modelo de referência`,\n    });\n  };\n\n  const removeSupportFile = (fileId: string) => {\n    const fileToRemove = supportFiles.find(f => f.id === fileId);\n    const updatedFiles = supportFiles.filter(f => f.id !== fileId);\n    setSupportFiles(updatedFiles);\n    onSupportFilesChange(updatedFiles);\n\n    toast({\n      title: \"Arquivo removido\",\n      description: `${fileToRemove?.name} foi removido`,\n    });\n  };\n\n  const removeTemplateFile = () => {\n    const fileName = templateFile?.name;\n    setTemplateFile(null);\n    onTemplateFileChange(null);\n\n    toast({\n      title: \"Modelo removido\",\n      description: `${fileName} foi removido`,\n    });\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const getFileIcon = (fileName: string, fileType: string) => {\n    if (fileType.startsWith('image/')) return Image;\n    if (fileName.toLowerCase().endsWith('.pdf')) return FileType;\n    return FileText;\n  };\n\n  const getFilePreview = (file: UploadedFile) => {\n    if (file.type.startsWith('image/')) {\n      return (\n        <div className=\"w-8 h-8 bg-blue-50 border border-blue-200 rounded flex items-center justify-center\">\n          <Image className=\"h-4 w-4 text-blue-600\" />\n        </div>\n      );\n    }\n    \n    const Icon = getFileIcon(file.name, file.type);\n    return <Icon className=\"h-4 w-4\" />;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Documentos de Apoio */}\n      <Card className=\"border-blue-200 transition-all hover:shadow-md\">\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"flex items-center gap-2 text-lg\">\n            <Files className=\"h-5 w-5 text-blue-600\" />\n            Documentos de Apoio (Contexto Fático e Jurídico)\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"support-files\">Anexar Documentos (opcional)</Label>\n            <div className=\"mt-2\">\n              {/* Drag & Drop Zone */}\n              <div\n                className={`border-2 border-dashed rounded-lg p-6 text-center transition-all cursor-pointer hover:border-blue-400 hover:bg-blue-50/50 ${\n                  isDragOver ? 'border-blue-500 bg-blue-50' : 'border-gray-300'\n                } ${isProcessingSupportFiles ? 'pointer-events-none opacity-50' : ''}`}\n                onDragOver={handleDragOver}\n                onDragLeave={handleDragLeave}\n                onDrop={handleDrop}\n                onClick={() => document.getElementById('support-files')?.click()}\n              >\n                <Upload className={`h-8 w-8 mx-auto mb-2 ${isDragOver ? 'text-blue-500' : 'text-gray-400'}`} />\n                <p className=\"text-sm font-medium mb-1\">\n                  {isDragOver ? 'Solte os arquivos aqui' : 'Arraste arquivos ou clique para selecionar'}\n                </p>\n                <p className=\"text-xs text-muted-foreground\">\n                  PDF, DOC, DOCX, TXT, JPG, PNG com OCR automático\n                </p>\n              </div>\n              \n              <Input\n                id=\"support-files\"\n                type=\"file\"\n                multiple\n                accept=\".pdf,.doc,.docx,.txt,.jpg,.png\"\n                onChange={handleSupportFilesUpload}\n                disabled={isProcessingSupportFiles}\n                className=\"hidden\"\n              />\n              \n              <p className=\"text-sm text-muted-foreground mt-2\">\n                Estes documentos serão analisados pela IA para compreender o caso.\n              </p>\n            </div>\n          </div>\n\n          {supportFiles.length > 0 && (\n            <div className=\"space-y-3\">\n              <h4 className=\"font-medium text-sm\">Documentos Anexados ({supportFiles.length})</h4>\n              <div className=\"space-y-2\">\n                {supportFiles.map((file) => (\n                  <div key={file.id} className=\"flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50 transition-colors\">\n                    <div className=\"flex items-center gap-3\">\n                      {getFilePreview(file)}\n                      <div>\n                        <p className=\"text-sm font-medium\">{file.name}</p>\n                        <p className=\"text-xs text-muted-foreground\">{formatFileSize(file.size)}</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Button size=\"sm\" variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                        <Eye className=\"h-3 w-3\" />\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"ghost\" \n                        onClick={() => removeSupportFile(file.id)}\n                        className=\"h-8 w-8 p-0 hover:bg-red-50 hover:text-red-600\"\n                      >\n                        <X className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {isProcessingSupportFiles && (\n            <div className=\"flex items-center justify-center gap-2 text-sm text-muted-foreground p-4 bg-blue-50 rounded-lg\">\n              <Loader2 className=\"h-4 w-4 animate-spin\" />\n              Processando {processingFileName} com OCR...\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Modelo Jurídico de Referência */}\n      <Card className=\"border-green-200 transition-all hover:shadow-md\">\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"flex items-center gap-2 text-lg\">\n            <BookOpen className=\"h-5 w-5 text-green-600\" />\n            Modelo Jurídico de Referência\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"template-file\">Upload de Modelo (opcional)</Label>\n            <div className=\"mt-2\">\n              <Input\n                id=\"template-file\"\n                type=\"file\"\n                accept=\".docx\"\n                onChange={handleTemplateFileUpload}\n                disabled={isProcessingTemplate}\n                className=\"cursor-pointer\"\n              />\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Este modelo ajuda a IA a redigir no seu formato preferido. Recomendado.\n              </p>\n              <p className=\"text-xs text-muted-foreground\">\n                Apenas arquivos .docx são aceitos\n              </p>\n            </div>\n          </div>\n\n          {templateFile && (\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <h4 className=\"font-medium text-sm\">Modelo Anexado</h4>\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox \n                    id=\"strict-mode\" \n                    checked={strictMode}\n                    onCheckedChange={onStrictModeChange}\n                  />\n                  <Label htmlFor=\"strict-mode\" className=\"text-sm cursor-pointer\">\n                    Modo Rigoroso (seguir modelo exatamente)\n                  </Label>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center justify-between p-3 border rounded-lg bg-green-50 border-green-200\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-8 h-8 bg-green-100 border border-green-300 rounded flex items-center justify-center\">\n                    <BookOpen className=\"h-4 w-4 text-green-600\" />\n                  </div>\n                  <div>\n                    <p className=\"text-sm font-medium\">{templateFile.name}</p>\n                    <p className=\"text-xs text-muted-foreground\">{formatFileSize(templateFile.size)}</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Button size=\"sm\" variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                    <Eye className=\"h-3 w-3\" />\n                  </Button>\n                  <Button \n                    size=\"sm\" \n                    variant=\"ghost\" \n                    onClick={removeTemplateFile}\n                    className=\"h-8 w-8 p-0 hover:bg-red-50 hover:text-red-600\"\n                  >\n                    <X className=\"h-3 w-3\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {isProcessingTemplate && (\n            <div className=\"flex items-center justify-center gap-2 text-sm text-muted-foreground p-4 bg-green-50 rounded-lg\">\n              <Loader2 className=\"h-4 w-4 animate-spin\" />\n              Processando {processingFileName}...\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/FileUploadModern.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":186,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":186,"endColumn":19},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'handleFiles'. Either include it or remove the dependency array.","line":251,"column":6,"nodeType":"ArrayExpression","endLine":251,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [handleFiles]","fix":{"range":[6998,7000],"text":"[handleFiles]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Upload, \n  FileText, \n  X, \n  Check, \n  Loader2, \n  Image, \n  FileType,\n  Film,\n  Music,\n  Archive,\n  AlertCircle,\n  Sparkles,\n  Eye\n} from \"lucide-react\";\nimport { createWorker } from 'tesseract.js';\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface UploadedFile {\n  id: string;\n  name: string;\n  size: number;\n  type: string;\n  content?: string;\n  status: 'uploading' | 'processing' | 'completed' | 'error';\n  progress: number;\n  preview?: string;\n}\n\ninterface FileUploadModernProps {\n  onFilesChange: (files: UploadedFile[]) => void;\n  maxFiles?: number;\n  maxSize?: number; // in MB\n  acceptedTypes?: string[];\n  enableOCR?: boolean;\n  enablePreview?: boolean;\n}\n\nexport function FileUploadModern({ \n  onFilesChange, \n  maxFiles = 10,\n  maxSize = 50,\n  acceptedTypes = ['.pdf', '.doc', '.docx', '.txt', '.jpg', '.png', '.jpeg'],\n  enableOCR = true,\n  enablePreview = true\n}: FileUploadModernProps) {\n  const [files, setFiles] = useState<UploadedFile[]>([]);\n  const [isDragOver, setIsDragOver] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const getFileIcon = (fileName: string, fileType: string) => {\n    if (fileType.startsWith('image/')) return Image;\n    if (fileType.startsWith('video/')) return Film;\n    if (fileType.startsWith('audio/')) return Music;\n    if (fileName.toLowerCase().endsWith('.pdf')) return FileType;\n    if (fileType.includes('zip') || fileType.includes('rar')) return Archive;\n    return FileText;\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const validateFile = (file: File): string | null => {\n    // Check file size\n    if (file.size > maxSize * 1024 * 1024) {\n      return `Arquivo muito grande. Máximo ${maxSize}MB permitido.`;\n    }\n\n    // Check file type\n    const fileExtension = '.' + file.name.split('.').pop()?.toLowerCase();\n    if (!acceptedTypes.includes(fileExtension)) {\n      return `Tipo de arquivo não suportado. Tipos aceitos: ${acceptedTypes.join(', ')}`;\n    }\n\n    return null;\n  };\n\n  const performOCR = async (file: File, uploadedFile: UploadedFile): Promise<string> => {\n    try {\n      const worker = await createWorker('por');\n      \n      // Update progress during OCR\n      const progressInterval = setInterval(() => {\n        setFiles(prev => prev.map(f => \n          f.id === uploadedFile.id \n            ? { ...f, progress: Math.min(f.progress + 10, 90) }\n            : f\n        ));\n      }, 500);\n\n      const { data: { text } } = await worker.recognize(file);\n      await worker.terminate();\n      \n      clearInterval(progressInterval);\n      return text;\n    } catch (error) {\n      console.error('OCR Error:', error);\n      throw new Error('Falha no processamento OCR');\n    }\n  };\n\n  const readTextFile = (file: File): Promise<string> => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = (e) => resolve(e.target?.result as string || '');\n      reader.onerror = () => reject(new Error('Falha ao ler arquivo'));\n      reader.readAsText(file);\n    });\n  };\n\n  const generatePreview = (file: File): Promise<string | null> => {\n    return new Promise((resolve) => {\n      if (!enablePreview || !file.type.startsWith('image/')) {\n        resolve(null);\n        return;\n      }\n\n      const reader = new FileReader();\n      reader.onload = (e) => resolve(e.target?.result as string);\n      reader.onerror = () => resolve(null);\n      reader.readAsDataURL(file);\n    });\n  };\n\n  const processFile = async (file: File) => {\n    const fileId = Math.random().toString(36).substring(7);\n    \n    const uploadedFile: UploadedFile = {\n      id: fileId,\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      status: 'uploading',\n      progress: 0\n    };\n\n    // Add file to list immediately\n    setFiles(prev => [...prev, uploadedFile]);\n\n    try {\n      // Generate preview\n      const preview = await generatePreview(file);\n      \n      // Update with preview and start processing\n      setFiles(prev => prev.map(f => \n        f.id === fileId \n          ? { ...f, preview, status: 'processing', progress: 20 }\n          : f\n      ));\n\n      let content = '';\n      \n      // Process based on file type\n      if (file.type.startsWith('image/') && enableOCR) {\n        content = await performOCR(file, uploadedFile);\n      } else if (file.type === 'text/plain') {\n        content = await readTextFile(file);\n      } else {\n        content = `Arquivo ${file.name} carregado. Tipo: ${file.type}`;\n      }\n\n      // Complete processing\n      setFiles(prev => prev.map(f => \n        f.id === fileId \n          ? { ...f, content, status: 'completed', progress: 100 }\n          : f\n      ));\n\n      toast({\n        title: \"Arquivo processado\",\n        description: `${file.name} foi processado com sucesso`,\n      });\n\n    } catch (error) {\n      setFiles(prev => prev.map(f => \n        f.id === fileId \n          ? { ...f, status: 'error', progress: 0 }\n          : f\n      ));\n\n      toast({\n        title: \"Erro no processamento\",\n        description: `Falha ao processar ${file.name}`,\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleFiles = async (selectedFiles: FileList | File[]) => {\n    const fileArray = Array.from(selectedFiles);\n    \n    // Check max files limit\n    if (files.length + fileArray.length > maxFiles) {\n      toast({\n        title: \"Muitos arquivos\",\n        description: `Máximo de ${maxFiles} arquivos permitidos`,\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsProcessing(true);\n\n    for (const file of fileArray) {\n      const error = validateFile(file);\n      if (error) {\n        toast({\n          title: \"Arquivo inválido\",\n          description: error,\n          variant: \"destructive\"\n        });\n        continue;\n      }\n\n      await processFile(file);\n    }\n\n    setIsProcessing(false);\n  };\n\n  const handleDragOver = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(true);\n  }, []);\n\n  const handleDragLeave = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n  }, []);\n\n  const handleDrop = useCallback(async (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n    \n    const droppedFiles = e.dataTransfer.files;\n    if (droppedFiles.length > 0) {\n      await handleFiles(droppedFiles);\n    }\n  }, []);\n\n  const handleFileInput = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFiles = e.target.files;\n    if (selectedFiles && selectedFiles.length > 0) {\n      await handleFiles(selectedFiles);\n    }\n    // Reset input\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  const removeFile = (fileId: string) => {\n    const updatedFiles = files.filter(f => f.id !== fileId);\n    setFiles(updatedFiles);\n    onFilesChange(updatedFiles);\n  };\n\n  const retryFile = async (fileId: string) => {\n    const file = files.find(f => f.id === fileId);\n    if (!file) return;\n\n    // Reset file status\n    setFiles(prev => prev.map(f => \n      f.id === fileId \n        ? { ...f, status: 'uploading', progress: 0 }\n        : f\n    ));\n\n    // Retry processing (would need original File object - simplified here)\n    setTimeout(() => {\n      setFiles(prev => prev.map(f => \n        f.id === fileId \n          ? { ...f, status: 'completed', progress: 100, content: 'Reprocessado com sucesso' }\n          : f\n      ));\n    }, 2000);\n  };\n\n  // Update parent component when files change\n  useEffect(() => {\n    onFilesChange(files.filter(f => f.status === 'completed'));\n  }, [files, onFilesChange]);\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Drop Zone */}\n      <Card \n        className={`transition-all duration-200 cursor-pointer ${\n          isDragOver \n            ? 'border-blue-500 bg-blue-50 border-2 border-dashed' \n            : 'border-gray-300 border-2 border-dashed hover:border-blue-400 hover:bg-blue-50/50'\n        } ${isProcessing ? 'pointer-events-none opacity-50' : ''}`}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onDrop={handleDrop}\n        onClick={() => fileInputRef.current?.click()}\n      >\n        <CardContent className=\"p-8 text-center\">\n          <div className=\"space-y-4\">\n            <div className={`w-16 h-16 mx-auto rounded-full flex items-center justify-center ${\n              isDragOver ? 'bg-blue-200' : 'bg-gray-100'\n            }`}>\n              {isDragOver ? (\n                <Sparkles className=\"h-8 w-8 text-blue-600 animate-pulse\" />\n              ) : (\n                <Upload className=\"h-8 w-8 text-gray-400\" />\n              )}\n            </div>\n            \n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">\n                {isDragOver ? 'Solte os arquivos aqui!' : 'Arraste arquivos ou clique para selecionar'}\n              </h3>\n              <p className=\"text-sm text-gray-600 mb-1\">\n                Tipos aceitos: {acceptedTypes.join(', ')}\n              </p>\n              <p className=\"text-xs text-gray-500\">\n                Máximo {maxFiles} arquivos • {maxSize}MB por arquivo\n                {enableOCR && ' • OCR automático para imagens'}\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        multiple\n        accept={acceptedTypes.join(',')}\n        onChange={handleFileInput}\n        className=\"hidden\"\n      />\n\n      {/* File List */}\n      {files.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <FileText className=\"h-5 w-5\" />\n              Arquivos ({files.length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {files.map((file) => {\n                const Icon = getFileIcon(file.name, file.type);\n                \n                return (\n                  <div key={file.id} className=\"flex items-center gap-3 p-3 border rounded-lg hover:bg-gray-50 transition-colors\">\n                    {/* Preview or Icon */}\n                    <div className=\"w-12 h-12 flex-shrink-0 rounded border bg-gray-50 flex items-center justify-center overflow-hidden\">\n                      {file.preview ? (\n                        <img src={file.preview} alt={file.name} className=\"w-full h-full object-cover\" />\n                      ) : (\n                        <Icon className=\"h-6 w-6 text-gray-400\" />\n                      )}\n                    </div>\n\n                    {/* File Info */}\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <h4 className=\"font-medium truncate\">{file.name}</h4>\n                        <div className=\"flex items-center gap-2\">\n                          {file.status === 'completed' && (\n                            <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\n                              <Check className=\"h-3 w-3 mr-1\" />\n                              Concluído\n                            </Badge>\n                          )}\n                          {file.status === 'error' && (\n                            <Badge variant=\"destructive\">\n                              <AlertCircle className=\"h-3 w-3 mr-1\" />\n                              Erro\n                            </Badge>\n                          )}\n                          {(file.status === 'uploading' || file.status === 'processing') && (\n                            <Badge variant=\"outline\">\n                              <Loader2 className=\"h-3 w-3 mr-1 animate-spin\" />\n                              {file.status === 'uploading' ? 'Enviando...' : 'Processando...'}\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between text-sm text-gray-600 mb-2\">\n                        <span>{formatFileSize(file.size)}</span>\n                        {file.status === 'completed' && file.content && (\n                          <span className=\"text-xs text-green-600\">\n                            {file.content.length} caracteres extraídos\n                          </span>\n                        )}\n                      </div>\n\n                      {/* Progress Bar */}\n                      {(file.status === 'uploading' || file.status === 'processing') && (\n                        <Progress value={file.progress} className=\"h-2\" />\n                      )}\n                    </div>\n\n                    {/* Actions */}\n                    <div className=\"flex items-center gap-1\">\n                      {file.status === 'completed' && enablePreview && (\n                        <Button size=\"sm\" variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                          <Eye className=\"h-3 w-3\" />\n                        </Button>\n                      )}\n                      {file.status === 'error' && (\n                        <Button \n                          size=\"sm\" \n                          variant=\"ghost\" \n                          onClick={() => retryFile(file.id)}\n                          className=\"h-8 w-8 p-0\"\n                        >\n                          <Loader2 className=\"h-3 w-3\" />\n                        </Button>\n                      )}\n                      <Button \n                        size=\"sm\" \n                        variant=\"ghost\" \n                        onClick={() => removeFile(file.id)}\n                        className=\"h-8 w-8 p-0 hover:bg-red-50 hover:text-red-600\"\n                      >\n                        <X className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/GenerationProgress.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'steps'. Either include it or remove the dependency array.","line":114,"column":6,"nodeType":"ArrayExpression","endLine":114,"endColumn":32,"suggestions":[{"desc":"Update the dependencies array to be: [isGenerating, onComplete, steps]","fix":{"range":[3400,3426],"text":"[isGenerating, onComplete, steps]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":144,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":144,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState, useEffect } from \"react\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { FileText, Brain, PenTool, CheckCircle, Zap } from \"lucide-react\";\n\ninterface GenerationStep {\n  id: string;\n  label: string;\n  description: string;\n  Icon: React.ComponentType<{ className?: string }>;\n  completed: boolean;\n  active: boolean;\n  duration: number;\n}\n\ninterface GenerationProgressProps {\n  isGenerating: boolean;\n  onComplete: () => void;\n}\n\nexport function GenerationProgress({ isGenerating, onComplete }: GenerationProgressProps) {\n  const [steps, setSteps] = useState<GenerationStep[]>([\n    { \n      id: 'reading', \n      label: 'Lendo documentos', \n      description: 'Analisando documentos anexados e extraindo informações relevantes',\n      Icon: FileText, \n      completed: false, \n      active: false,\n      duration: 2000\n    },\n    { \n      id: 'applying', \n      label: 'Aplicando inteligência', \n      description: 'Processando com agente ou prompt predefinido',\n      Icon: Brain, \n      completed: false, \n      active: false,\n      duration: 3000\n    },\n    { \n      id: 'writing', \n      label: 'Redigindo texto jurídico', \n      description: 'Gerando conteúdo baseado no contexto e modelo fornecidos',\n      Icon: PenTool, \n      completed: false, \n      active: false,\n      duration: 2500\n    },\n    { \n      id: 'finalizing', \n      label: 'Finalizando documento', \n      description: 'Aplicando formatação e verificações finais',\n      Icon: CheckCircle, \n      completed: false, \n      active: false,\n      duration: 1500\n    }\n  ]);\n\n  const [progress, setProgress] = useState(0);\n  const [currentStepIndex, setCurrentStepIndex] = useState(0);\n\n  useEffect(() => {\n    if (!isGenerating) {\n      setSteps(prev => prev.map(step => ({ ...step, completed: false, active: false })));\n      setProgress(0);\n      setCurrentStepIndex(0);\n      return;\n    }\n\n    let currentStep = 0;\n    let stepProgress = 0;\n    \n    const updateProgress = () => {\n      if (currentStep < steps.length) {\n        const currentStepData = steps[currentStep];\n        \n        setSteps(prev => prev.map((step, index) => ({\n          ...step,\n          active: index === currentStep,\n          completed: index < currentStep\n        })));\n        \n        // Animate progress within current step\n        const stepDuration = currentStepData.duration;\n        const stepIncrement = (100 / steps.length) / (stepDuration / 50);\n        \n        const progressInterval = setInterval(() => {\n          stepProgress += stepIncrement;\n          const totalProgress = (currentStep * (100 / steps.length)) + (stepProgress * (100 / steps.length) / 100);\n          setProgress(Math.min(totalProgress, (currentStep + 1) * (100 / steps.length)));\n          \n          if (stepProgress >= 100) {\n            clearInterval(progressInterval);\n            currentStep++;\n            stepProgress = 0;\n            setCurrentStepIndex(currentStep);\n            \n            if (currentStep < steps.length) {\n              setTimeout(updateProgress, 100);\n            } else {\n              setSteps(prev => prev.map(step => ({ ...step, completed: true, active: false })));\n              setProgress(100);\n              setTimeout(() => onComplete(), 500);\n            }\n          }\n        }, 50);\n      }\n    };\n\n    updateProgress();\n  }, [isGenerating, onComplete]);\n\n  if (!isGenerating) return null;\n\n  const activeStep = steps[currentStepIndex];\n\n  return (\n    <Card className=\"border-2 border-primary/20 bg-gradient-to-br from-blue-50 to-indigo-50\">\n      <CardContent className=\"p-6\">\n        <div className=\"space-y-6\">\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center gap-2 mb-2\">\n              <Zap className=\"h-5 w-5 text-primary animate-pulse\" />\n              <h3 className=\"font-semibold text-lg\">Gerando documento...</h3>\n            </div>\n            <Progress value={progress} className=\"w-full h-3\" />\n            <p className=\"text-sm text-muted-foreground mt-2\">\n              {Math.round(progress)}% concluído\n            </p>\n          </div>\n          \n          {activeStep && (\n            <div className=\"text-center p-4 bg-white/50 rounded-lg border\">\n              <activeStep.Icon className=\"h-8 w-8 mx-auto mb-2 text-primary animate-pulse\" />\n              <p className=\"font-medium text-sm mb-1\">{activeStep.label}</p>\n              <p className=\"text-xs text-muted-foreground\">{activeStep.description}</p>\n            </div>\n          )}\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n            {steps.map((step, index) => (\n              <div key={step.id} className=\"text-center\">\n                <div className={`w-8 h-8 mx-auto mb-2 rounded-full flex items-center justify-center transition-all ${\n                  step.completed ? 'bg-green-100 text-green-600' : \n                  step.active ? 'bg-primary/20 text-primary scale-110' : \n                  'bg-muted text-muted-foreground'\n                }`}>\n                  {step.completed ? (\n                    <CheckCircle className=\"h-4 w-4\" />\n                  ) : (\n                    <step.Icon className=\"h-4 w-4\" />\n                  )}\n                </div>\n                <span className={`text-xs transition-colors ${\n                  step.completed ? 'text-green-600 font-medium' : \n                  step.active ? 'text-primary font-medium' : \n                  'text-muted-foreground'\n                }`}>\n                  {step.label}\n                </span>\n              </div>\n            ))}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/Layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/OnboardingTour.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'navigate' is assigned a value but never used.","line":81,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":81,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useOnboardingTour } from \"@/contexts/OnboardingTourContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport { X, ArrowRight } from \"lucide-react\";\n\nconst tourSteps = [\n  {\n    title: \"Bem-vindo ao LexAI!\",\n    text: (\n      <>\n        <p>\n          O LexAI foi criado para facilitar o seu dia a dia jurídico com tecnologia de ponta!\n        </p>\n        <p className=\"mt-2\">\n          Neste mini guia, você verá em poucos passos como usar a plataforma para criar, automatizar e organizar documentos jurídicos.\n        </p>\n      </>\n    ),\n  },\n  {\n    title: \"1. Crie seu Ambiente de Trabalho\",\n    text: (\n      <>\n        <p>\n          Comece criando um <span className=\"font-semibold\">Workspace</span>, onde você pode agrupar projetos, documentos e agentes por área de atuação ou cliente.\n        </p>\n        <p className=\"mt-2 text-sm text-muted-foreground\">\n          Dica: Você pode criar diferentes workspaces para cada tipo de processo ou cliente!\n        </p>\n      </>\n    ),\n  },\n  {\n    title: \"2. Personalize com Agentes Inteligentes\",\n    text: (\n      <>\n        <p>\n          Cadastre <span className=\"font-semibold\">Agentes</span> personalizados (modelos de IA com expertise jurídica) ou utilize agentes oficiais LexAI.\n        </p>\n        <p className=\"mt-2 text-sm text-muted-foreground\">\n          Use cada agente para atender demandas específicas ou automatizar tarefas repetitivas.\n        </p>\n      </>\n    ),\n  },\n  {\n    title: \"3. Gere Documentos em Segundos\",\n    text: (\n      <>\n        <p>\n          Clique em <span className=\"font-semibold\">Gerar</span> para criar petições, contratos ou pareceres de forma automatizada.\n        </p>\n        <ul className=\"list-disc ml-5 mt-2 text-sm text-muted-foreground\">\n          <li>Anexe documentos de apoio</li>\n          <li>Escolha um modelo</li>\n          <li>Revise, edite e exporte para PDF ou DOCX</li>\n        </ul>\n      </>\n    ),\n  },\n  {\n    title: \"4. Ajuste e Progrida!\",\n    text: (\n      <>\n        <p>\n          Utilize o menu <span className=\"font-semibold\">Configurações</span> para personalizar o sistema, convidar membros e gerenciar sua conta.\n        </p>\n        <p className=\"mt-2\">\n          Pronto! Agora você já pode explorar o LexAI e transformar seu fluxo jurídico!\n        </p>\n      </>\n    ),\n  },\n];\n\nexport function OnboardingTour() {\n  const [step, setStep] = useState(0);\n  const { showTour, endTour } = useOnboardingTour();\n  const navigate = useNavigate();\n\n  if (!showTour) return null;\n  const { title, text } = tourSteps[step];\n\n  const handleNext = () => {\n    if (step < tourSteps.length - 1) {\n      setStep((s) => s + 1);\n    } else {\n      endTour();\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 z-[9999] bg-black/50 flex items-center justify-center animate-fade-in\">\n      <div className=\"bg-background border shadow-lg rounded-lg p-6 max-w-sm w-full relative space-y-4\">\n        <button\n          className=\"absolute top-3 right-3 text-muted-foreground hover:text-foreground\"\n          onClick={endTour}\n          aria-label=\"Fechar\"\n        >\n          <X className=\"w-5 h-5\" />\n        </button>\n        <h2 className=\"text-2xl font-bold\">{title}</h2>\n        <div className=\"text-muted-foreground\">{text}</div>\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-xs text-muted-foreground\">{step + 1} / {tourSteps.length}</span>\n          <div>\n            <Button onClick={handleNext}>\n              {step === tourSteps.length - 1\n                ? \"Começar a usar\"\n                : <>\n                    Próximo\n                    <ArrowRight className=\"ml-2 w-4 h-4\" />\n                  </>}\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/PromptGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/PromptSearch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/SmartSearch.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":233,"column":104,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":233,"endColumn":107,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7639,7642],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7639,7642],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":284,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":284,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9811,9814],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9811,9814],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState, useEffect, useMemo } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { \n  Search, \n  Filter, \n  X, \n  Calendar, \n  Star, \n  Tag,\n  SortAsc,\n  SortDesc,\n  Grid,\n  List,\n  Clock\n} from \"lucide-react\";\n\ninterface SearchFilters {\n  query: string;\n  categories: string[];\n  dateRange: 'all' | 'today' | 'week' | 'month';\n  rating: number | null;\n  sortBy: 'name' | 'date' | 'rating' | 'usage';\n  sortOrder: 'asc' | 'desc';\n  viewMode: 'grid' | 'list';\n}\n\ninterface SmartSearchProps {\n  onFiltersChange: (filters: SearchFilters) => void;\n  availableCategories: string[];\n  placeholder?: string;\n  showViewMode?: boolean;\n  showAdvancedFilters?: boolean;\n}\n\nconst INITIAL_FILTERS: SearchFilters = {\n  query: '',\n  categories: [],\n  dateRange: 'all',\n  rating: null,\n  sortBy: 'name',\n  sortOrder: 'asc',\n  viewMode: 'grid'\n};\n\nexport function SmartSearch({ \n  onFiltersChange, \n  availableCategories = [],\n  placeholder = \"Buscar...\",\n  showViewMode = true,\n  showAdvancedFilters = true\n}: SmartSearchProps) {\n  const [filters, setFilters] = useState<SearchFilters>(INITIAL_FILTERS);\n  const [showFilters, setShowFilters] = useState(false);\n  const [recentSearches, setRecentSearches] = useState<string[]>([]);\n\n  // Load recent searches from localStorage\n  useEffect(() => {\n    const saved = localStorage.getItem('lexai-recent-searches');\n    if (saved) {\n      setRecentSearches(JSON.parse(saved));\n    }\n  }, []);\n\n  // Save recent searches\n  const saveRecentSearch = (query: string) => {\n    if (!query.trim() || recentSearches.includes(query)) return;\n    \n    const updated = [query, ...recentSearches.slice(0, 4)];\n    setRecentSearches(updated);\n    localStorage.setItem('lexai-recent-searches', JSON.stringify(updated));\n  };\n\n  // Update filters and notify parent\n  const updateFilters = (newFilters: Partial<SearchFilters>) => {\n    const updated = { ...filters, ...newFilters };\n    setFilters(updated);\n    onFiltersChange(updated);\n  };\n\n  // Handle search query\n  const handleSearch = (query: string) => {\n    updateFilters({ query });\n    if (query.trim()) {\n      saveRecentSearch(query.trim());\n    }\n  };\n\n  // Toggle category filter\n  const toggleCategory = (category: string) => {\n    const categories = filters.categories.includes(category)\n      ? filters.categories.filter(c => c !== category)\n      : [...filters.categories, category];\n    updateFilters({ categories });\n  };\n\n  // Clear all filters\n  const clearFilters = () => {\n    setFilters(INITIAL_FILTERS);\n    onFiltersChange(INITIAL_FILTERS);\n    setShowFilters(false);\n  };\n\n  // Active filters count\n  const activeFiltersCount = useMemo(() => {\n    let count = 0;\n    if (filters.query) count++;\n    if (filters.categories.length > 0) count++;\n    if (filters.dateRange !== 'all') count++;\n    if (filters.rating !== null) count++;\n    return count;\n  }, [filters]);\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Main search bar */}\n      <div className=\"flex gap-2\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n          <Input\n            placeholder={placeholder}\n            value={filters.query}\n            onChange={(e) => handleSearch(e.target.value)}\n            className=\"pl-10 pr-4\"\n          />\n          \n          {/* Recent searches dropdown */}\n          {filters.query === '' && recentSearches.length > 0 && (\n            <Card className=\"absolute top-full left-0 right-0 mt-1 z-10 shadow-lg\">\n              <CardContent className=\"p-2\">\n                <div className=\"space-y-1\">\n                  <p className=\"text-xs font-medium text-gray-500 px-2 py-1\">Buscas recentes</p>\n                  {recentSearches.map((search, index) => (\n                    <button\n                      key={index}\n                      onClick={() => handleSearch(search)}\n                      className=\"w-full text-left px-2 py-1 text-sm hover:bg-gray-100 rounded\"\n                    >\n                      <div className=\"flex items-center gap-2\">\n                        <Clock className=\"h-3 w-3 text-gray-400\" />\n                        {search}\n                      </div>\n                    </button>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        {/* Filter toggle */}\n        {showAdvancedFilters && (\n          <Button\n            variant=\"outline\"\n            onClick={() => setShowFilters(!showFilters)}\n            className={`flex items-center gap-2 ${activeFiltersCount > 0 ? 'border-blue-500 bg-blue-50' : ''}`}\n          >\n            <Filter className=\"h-4 w-4\" />\n            Filtros\n            {activeFiltersCount > 0 && (\n              <Badge variant=\"default\" className=\"bg-blue-600 text-white text-xs\">\n                {activeFiltersCount}\n              </Badge>\n            )}\n          </Button>\n        )}\n\n        {/* View mode toggle */}\n        {showViewMode && (\n          <div className=\"flex border border-gray-200 rounded-lg\">\n            <Button\n              variant={filters.viewMode === 'grid' ? 'default' : 'ghost'}\n              size=\"sm\"\n              onClick={() => updateFilters({ viewMode: 'grid' })}\n              className=\"rounded-r-none\"\n            >\n              <Grid className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              variant={filters.viewMode === 'list' ? 'default' : 'ghost'}\n              size=\"sm\"\n              onClick={() => updateFilters({ viewMode: 'list' })}\n              className=\"rounded-l-none border-l\"\n            >\n              <List className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        )}\n      </div>\n\n      {/* Advanced filters panel */}\n      {showFilters && showAdvancedFilters && (\n        <Card className=\"border-gray-200\">\n          <CardContent className=\"p-4 space-y-4\">\n            {/* Categories */}\n            {availableCategories.length > 0 && (\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium flex items-center gap-2\">\n                  <Tag className=\"h-4 w-4\" />\n                  Categorias\n                </label>\n                <div className=\"flex flex-wrap gap-2\">\n                  {availableCategories.map((category) => (\n                    <button key={category} onClick={() => toggleCategory(category)}>\n                      <Badge\n                        variant={filters.categories.includes(category) ? \"default\" : \"outline\"}\n                        className=\"cursor-pointer hover:bg-blue-50\"\n                      >\n                        {category}\n                      </Badge>\n                    </button>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Date range */}\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium flex items-center gap-2\">\n                <Calendar className=\"h-4 w-4\" />\n                Período\n              </label>\n              <div className=\"flex gap-2\">\n                {[\n                  { value: 'all', label: 'Todos' },\n                  { value: 'today', label: 'Hoje' },\n                  { value: 'week', label: 'Esta semana' },\n                  { value: 'month', label: 'Este mês' }\n                ].map((option) => (\n                  <button key={option.value} onClick={() => updateFilters({ dateRange: option.value as any })}>\n                    <Badge\n                      variant={filters.dateRange === option.value ? \"default\" : \"outline\"}\n                      className=\"cursor-pointer hover:bg-blue-50\"\n                    >\n                      {option.label}\n                    </Badge>\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            {/* Rating filter */}\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium flex items-center gap-2\">\n                <Star className=\"h-4 w-4\" />\n                Avaliação mínima\n              </label>\n              <div className=\"flex gap-2\">\n                {[null, 1, 2, 3, 4, 5].map((rating) => (\n                  <button key={rating || 0} onClick={() => updateFilters({ rating })}>\n                    <Badge\n                      variant={filters.rating === rating ? \"default\" : \"outline\"}\n                      className=\"cursor-pointer hover:bg-blue-50\"\n                    >\n                      {rating ? `${rating}+ ⭐` : 'Todas'}\n                    </Badge>\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            {/* Sort options */}\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium flex items-center gap-2\">\n                {filters.sortOrder === 'asc' ? <SortAsc className=\"h-4 w-4\" /> : <SortDesc className=\"h-4 w-4\" />}\n                Ordenar por\n              </label>\n              <div className=\"flex gap-2\">\n                {[\n                  { value: 'name', label: 'Nome' },\n                  { value: 'date', label: 'Data' },\n                  { value: 'rating', label: 'Avaliação' },\n                  { value: 'usage', label: 'Uso' }\n                ].map((option) => (\n                  <button \n                    key={option.value} \n                    onClick={() => {\n                      if (filters.sortBy === option.value) {\n                        updateFilters({ sortOrder: filters.sortOrder === 'asc' ? 'desc' : 'asc' });\n                      } else {\n                        updateFilters({ sortBy: option.value as any, sortOrder: 'asc' });\n                      }\n                    }}\n                  >\n                    <Badge\n                      variant={filters.sortBy === option.value ? \"default\" : \"outline\"}\n                      className=\"cursor-pointer hover:bg-blue-50\"\n                    >\n                      {option.label}\n                      {filters.sortBy === option.value && (\n                        <span className=\"ml-1\">\n                          {filters.sortOrder === 'asc' ? '↑' : '↓'}\n                        </span>\n                      )}\n                    </Badge>\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            {/* Clear filters */}\n            <div className=\"flex justify-end pt-2 border-t\">\n              <Button variant=\"outline\" size=\"sm\" onClick={clearFilters}>\n                <X className=\"h-4 w-4 mr-2\" />\n                Limpar filtros\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Active filters display */}\n      {activeFiltersCount > 0 && (\n        <div className=\"flex items-center gap-2 text-sm\">\n          <span className=\"text-gray-600\">Filtros ativos:</span>\n          {filters.query && (\n            <Badge variant=\"outline\" className=\"bg-blue-50\">\n              \"{filters.query}\"\n              <button onClick={() => handleSearch('')} className=\"ml-1 hover:text-red-600\">\n                <X className=\"h-3 w-3\" />\n              </button>\n            </Badge>\n          )}\n          {filters.categories.map((category) => (\n            <Badge key={category} variant=\"outline\" className=\"bg-purple-50\">\n              {category}\n              <button onClick={() => toggleCategory(category)} className=\"ml-1 hover:text-red-600\">\n                <X className=\"h-3 w-3\" />\n              </button>\n            </Badge>\n          ))}\n          {filters.dateRange !== 'all' && (\n            <Badge variant=\"outline\" className=\"bg-green-50\">\n              {filters.dateRange}\n              <button onClick={() => updateFilters({ dateRange: 'all' })} className=\"ml-1 hover:text-red-600\">\n                <X className=\"h-3 w-3\" />\n              </button>\n            </Badge>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/WorkspaceAnalytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/WorkspaceSelector.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DialogTrigger' is defined but never used.","line":5,"column":79,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":92},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Settings' is defined but never used.","line":15,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1116,1119],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1116,1119],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1869,1872],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1869,1872],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { ChevronDown, Plus, Settings, Trash2, Building2, AlertTriangle } from \"lucide-react\";\nimport { useWorkspace } from \"@/contexts/WorkspaceContext\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function WorkspaceSelector() {\n  const { workspaces, selectedWorkspace, setSelectedWorkspace, addWorkspace, getAgentsForWorkspace } = useWorkspace();\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [isDeleteOpen, setIsDeleteOpen] = useState(false);\n  const [isConfirmDeleteOpen, setIsConfirmDeleteOpen] = useState(false);\n  const [workspaceToDelete, setWorkspaceToDelete] = useState<any>(null);\n  const [newWorkspaceName, setNewWorkspaceName] = useState(\"\");\n  const [transferAgents, setTransferAgents] = useState(false);\n  const { toast } = useToast();\n\n  const handleCreateWorkspace = () => {\n    if (newWorkspaceName.trim()) {\n      const newWorkspace = {\n        id: Date.now().toString(),\n        name: newWorkspaceName,\n        icon: \"Building2\",\n        iconColor: \"text-blue-500\",\n        createdAt: new Date().toLocaleDateString()\n      };\n      \n      addWorkspace(newWorkspace);\n      setNewWorkspaceName(\"\");\n      setIsCreateOpen(false);\n      \n      toast({\n        title: \"Ambiente criado!\",\n        description: `${newWorkspaceName} foi criado com sucesso`,\n      });\n    }\n  };\n\n  const handleDeleteClick = (workspace: any) => {\n    setWorkspaceToDelete(workspace);\n    setIsDeleteOpen(true);\n  };\n\n  const handleConfirmDelete = () => {\n    setIsDeleteOpen(false);\n    setIsConfirmDeleteOpen(true);\n  };\n\n  const handleFinalDelete = () => {\n    // Implementar lógica de exclusão aqui\n    toast({\n      title: \"Ambiente excluído\",\n      description: `${workspaceToDelete?.name} foi excluído com sucesso`,\n    });\n    setIsConfirmDeleteOpen(false);\n    setWorkspaceToDelete(null);\n    setTransferAgents(false);\n  };\n\n  const agentsCount = workspaceToDelete ? getAgentsForWorkspace(workspaceToDelete.id).length : 0;\n\n  return (\n    <>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"ghost\" className=\"flex items-center gap-2 px-3 py-2 h-auto\">\n            <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center\">\n              <span className=\"text-white font-bold text-sm\">\n                {selectedWorkspace?.name?.charAt(0) || \"L\"}\n              </span>\n            </div>\n            <div className=\"flex flex-col items-start\">\n              <span className=\"font-medium text-sm\">\n                {selectedWorkspace?.name || \"Selecionar Ambiente\"}\n              </span>\n              <span className=\"text-xs text-muted-foreground\">\n                {workspaces.length} {workspaces.length === 1 ? 'ambiente' : 'ambientes'}\n              </span>\n            </div>\n            <ChevronDown className=\"h-4 w-4 text-muted-foreground\" />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"start\" className=\"w-80\">\n          <div className=\"p-2\">\n            <div className=\"text-xs font-medium text-muted-foreground mb-2\">AMBIENTES</div>\n            {workspaces.map((workspace) => (\n              <div key={workspace.id} className=\"flex items-center justify-between p-2 rounded-md hover:bg-accent group\">\n                <div \n                  className=\"flex items-center gap-3 flex-1 cursor-pointer\"\n                  onClick={() => setSelectedWorkspace(workspace)}\n                >\n                  <div className=\"w-8 h-8 bg-gray-100 rounded-lg flex items-center justify-center\">\n                    <Building2 className=\"h-4 w-4 text-gray-600\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"font-medium text-sm\">{workspace.name}</span>\n                      {selectedWorkspace?.id === workspace.id && (\n                        <Badge variant=\"secondary\" className=\"text-xs\">Ativo</Badge>\n                      )}\n                    </div>\n                    <span className=\"text-xs text-muted-foreground\">\n                      {getAgentsForWorkspace(workspace.id).length} agentes\n                    </span>\n                  </div>\n                </div>\n                <div className=\"opacity-0 group-hover:opacity-100 transition-opacity\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      handleDeleteClick(workspace);\n                    }}\n                    className=\"h-8 w-8 p-0 text-muted-foreground hover:text-destructive\"\n                  >\n                    <Trash2 className=\"h-3 w-3\" />\n                  </Button>\n                </div>\n              </div>\n            ))}\n          </div>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem onClick={() => setIsCreateOpen(true)}>\n            <Plus className=\"mr-2 h-4 w-4\" />\n            Criar Novo Ambiente\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n\n      {/* Dialog para criar ambiente */}\n      <Dialog open={isCreateOpen} onOpenChange={setIsCreateOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Criar Novo Ambiente</DialogTitle>\n            <DialogDescription>\n              Defina um nome para o seu novo ambiente de trabalho\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"workspace-name\">Nome do Ambiente</Label>\n              <Input\n                id=\"workspace-name\"\n                placeholder=\"Ex: 20ª Promotoria, Escritório...\"\n                value={newWorkspaceName}\n                onChange={(e) => setNewWorkspaceName(e.target.value)}\n                onKeyDown={(e) => e.key === 'Enter' && handleCreateWorkspace()}\n              />\n            </div>\n            <div className=\"flex gap-2 justify-end\">\n              <Button variant=\"outline\" onClick={() => setIsCreateOpen(false)}>\n                Cancelar\n              </Button>\n              <Button onClick={handleCreateWorkspace}>\n                Criar\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Dialog de confirmação inicial */}\n      <Dialog open={isDeleteOpen} onOpenChange={setIsDeleteOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <AlertTriangle className=\"h-5 w-5 text-destructive\" />\n              Excluir Ambiente\n            </DialogTitle>\n            <DialogDescription>\n              Você tem certeza que deseja excluir o ambiente \"{workspaceToDelete?.name}\"?\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            {agentsCount > 0 && (\n              <div className=\"p-3 bg-yellow-50 border border-yellow-200 rounded-md\">\n                <p className=\"text-sm text-yellow-800\">\n                  Este ambiente possui {agentsCount} {agentsCount === 1 ? 'agente' : 'agentes'} criado{agentsCount === 1 ? '' : 's'}.\n                </p>\n              </div>\n            )}\n            <div className=\"flex gap-2 justify-end\">\n              <Button variant=\"outline\" onClick={() => setIsDeleteOpen(false)}>\n                Cancelar\n              </Button>\n              <Button variant=\"destructive\" onClick={handleConfirmDelete}>\n                Continuar\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Dialog de confirmação final */}\n      <Dialog open={isConfirmDeleteOpen} onOpenChange={setIsConfirmDeleteOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <AlertTriangle className=\"h-5 w-5 text-destructive\" />\n              Confirmação Final\n            </DialogTitle>\n            <DialogDescription>\n              Esta ação não pode ser desfeita. O ambiente \"{workspaceToDelete?.name}\" será permanentemente excluído.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            {agentsCount > 0 && (\n              <div className=\"space-y-3\">\n                <div className=\"p-3 bg-red-50 border border-red-200 rounded-md\">\n                  <p className=\"text-sm text-red-800 font-medium mb-2\">\n                    Atenção: {agentsCount} {agentsCount === 1 ? 'agente será perdido' : 'agentes serão perdidos'}\n                  </p>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"transfer-agents\"\n                    checked={transferAgents}\n                    onChange={(e) => setTransferAgents(e.target.checked)}\n                    className=\"rounded border-gray-300\"\n                  />\n                  <Label htmlFor=\"transfer-agents\" className=\"text-sm\">\n                    Exportar agentes antes de excluir (recomendado)\n                  </Label>\n                </div>\n              </div>\n            )}\n            <div className=\"flex gap-2 justify-end\">\n              <Button variant=\"outline\" onClick={() => setIsConfirmDeleteOpen(false)}>\n                Cancelar\n              </Button>\n              <Button variant=\"destructive\" onClick={handleFinalDelete}>\n                Excluir Definitivamente\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/generate/Step1CreationMode.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/generate/Step2Selection.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: JSX element 'div' has no corresponding closing tag.","line":60,"column":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { PromptGrid } from '@/components/PromptGrid';\nimport { Crown, Users } from 'lucide-react';\n// Assuming Agent type is defined elsewhere and can be imported\n// import { Agent } from '@/types/agent'; \n// For now, using a placeholder type\ninterface Agent { id: string; name: string; theme: string; workspaceId?: string; }\n\ninterface Step2SelectionProps {\n  creationMode: 'assistant' | 'template';\n  selectedAgent: string;\n  onSetSelectedAgent: (agentId: string) => void;\n  officialAgents: Agent[];\n  workspaceAgents: Agent[];\n  selectedPromptId: string;\n  onPromptSelect: (promptId: string) => void;\n}\n\nexport function Step2Selection({\n  creationMode,\n  selectedAgent,\n  onSetSelectedAgent,\n  officialAgents,\n  workspaceAgents,\n  selectedPromptId,\n  onPromptSelect,\n}: Step2SelectionProps) {\n  if (creationMode === 'assistant') {\n    return (\n      <div className=\"space-y-6\">\n        <Label htmlFor=\"agent\" className=\"text-lg text-gray-900\">Qual modelo você quer usar?</Label>\n        <Select value={selectedAgent} onValueChange={onSetSelectedAgent}>\n          <SelectTrigger className=\"h-14 text-left\">\n            <SelectValue placeholder=\"Escolha um modelo que se encaixa no que você precisa\" />\n          </SelectTrigger>\n          <SelectContent className=\"bg-white\">\n            <SelectItem value=\"official-header\" disabled className=\"text-xs font-medium text-gray-500 bg-gray-50\">\n              🏆 MODELOS OFICIAIS (RECOMENDADOS)\n            </SelectItem>\n            {officialAgents.map((agent) => (\n              <SelectItem key={agent.id} value={agent.id} className=\"py-3\">\n                <div className=\"flex items-center gap-3\">\n                  <Crown className=\"h-4 w-4 text-yellow-500\" />\n                  <div>\n                    <div className=\"font-medium\">{agent.name}</div>\n                    <div className=\"text-sm text-gray-500\">{agent.theme}</div>\n                  </div>\n                </div>\n              </SelectItem>\n            ))}\n            {workspaceAgents.length > 0 && (\n              <>\n                <SelectItem value=\"my-agents-header\" disabled className=\"text-xs font-medium text-gray-500 bg-gray-50 mt-2\">\n                  👤 MEUS MODELOS PERSONALIZADOS\n                </SelectItem>\n                {workspaceAgents.map((agent) => (\n                  <SelectItem key={agent.id} value={agent.id} className=\"py-3\">\n                    <div className=\"flex items-center gap-3\">\n                      <Users className=\"h-4 w-4 text-blue-500\" />\n                      <div>\n                        <div className=\"font-medium\">{agent.name}</div>\n                        <div className=\"text-sm text-gray-500\">{agent.theme}</div>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </>\n            )}\n          </SelectContent>\n        </Select>\n      </div>\n    );\n  }\n\n  if (creationMode === 'template') {\n    return (\n      <div className=\"space-y-6\">\n        <Label className=\"text-lg text-gray-900\">Que tipo de documento você precisa?</Label>\n        <PromptGrid\n          selectedPromptId={selectedPromptId}\n          onPromptSelect={onPromptSelect}\n        />\n      </div>\n    );\n  }\n  return null;\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/generate/Step3Instructions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/badge.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":37,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":37,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/button.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":56,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":56,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/calendar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_props' is defined but never used.","line":55,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_props' is defined but never used.","line":56,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { DayPicker } from \"react-day-picker\";\n\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/components/ui/button\";\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ..._props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ..._props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = \"Calendar\";\n\nexport { Calendar };\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/chart.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":70,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":8}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/collapsible.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":2,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport * as React from \"react\"\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/command.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":24,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":24,"endColumn":29,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[701,752],"text":"type CommandDialogProps = DialogProps"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/error-boundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/form.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":168,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":168,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/loading-spinner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/navigation-menu.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":119,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":119,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/sidebar.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":760,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":760,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/sonner.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":29,"column":19,"nodeType":"Identifier","messageId":"namedExport","endLine":29,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useTheme } from \"next-themes\"\nimport { Toaster as Sonner, toast } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster, toast }\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/textarea.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":5,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":5,"endColumn":31,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[73,159],"text":"type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/toggle.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":43,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":43,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/components/ui/use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/contexts/OnboardingTourContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Move your React context(s) to a separate file.","line":12,"column":14,"nodeType":"Identifier","messageId":"reactContext","endLine":12,"endColumn":35},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":59,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":59,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { createContext, useContext, useState, useEffect } from \"react\";\n\ninterface OnboardingTourContextType {\n  showTour: boolean;\n  startTour: () => void;\n  endTour: () => void;\n  currentTourStep: number;\n  setCurrentTourStep: (step: number) => void;\n}\n\nexport const OnboardingTourContext = createContext<OnboardingTourContextType>({\n  showTour: false,\n  startTour: () => {},\n  endTour: () => {},\n  currentTourStep: 0,\n  setCurrentTourStep: () => {},\n});\n\nexport function OnboardingTourProvider({ children }: { children: React.ReactNode }) {\n  const [showTour, setShowTour] = useState(false);\n  const [currentTourStep, setCurrentTourStep] = useState(0);\n\n  useEffect(() => {\n    // Exibe o tour visual somente se o usuário nunca viu antes\n    const hasSeenTour = localStorage.getItem(\"hasSeenVisualTour\");\n    if (!hasSeenTour) {\n      // Pequeno delay para a interface carregar\n      setTimeout(() => {\n        setShowTour(true);\n      }, 1000);\n    }\n  }, []);\n\n  const startTour = () => {\n    setShowTour(true);\n    setCurrentTourStep(0);\n  };\n  \n  const endTour = () => {\n    setShowTour(false);\n    setCurrentTourStep(0);\n    localStorage.setItem(\"hasSeenVisualTour\", \"true\");\n  };\n\n  return (\n    <OnboardingTourContext.Provider value={{ \n      showTour, \n      startTour, \n      endTour, \n      currentTourStep, \n      setCurrentTourStep \n    }}>\n      {children}\n    </OnboardingTourContext.Provider>\n  );\n}\n\nexport function useOnboardingTour() {\n  return useContext(OnboardingTourContext);\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/contexts/WorkspaceContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":159,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":159,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { LegalSubject } from '@/types/legalSubjects';\n\nexport interface Agent {\n  id: string;\n  name: string;\n  type: LegalSubject;\n  theme: string;\n  isOfficial: boolean;\n  workspaceId?: string;\n  createdAt: string;\n}\n\nexport interface Workspace {\n  id: string;\n  name: string;\n  icon: string;\n  iconColor: string;\n  createdAt: string;\n}\n\ninterface WorkspaceContextType {\n  workspaces: Workspace[];\n  selectedWorkspace: Workspace | null;\n  agents: Agent[];\n  officialAgents: Agent[];\n  setSelectedWorkspace: (workspace: Workspace) => void;\n  addWorkspace: (workspace: Workspace) => void;\n  addAgent: (agent: Agent) => void;\n  getAgentsForWorkspace: (workspaceId: string) => Agent[];\n  getAgentsByLegalSubject: (workspaceId: string, subject: LegalSubject) => Agent[];\n  getAvailableLegalSubjects: (workspaceId: string) => LegalSubject[];\n}\n\nconst WorkspaceContext = createContext<WorkspaceContextType | undefined>(undefined);\n\n// Agentes oficiais da plataforma\nconst OFFICIAL_AGENTS: Agent[] = [\n  {\n    id: 'official-contador',\n    name: 'Contador',\n    type: 'Direito Tributário',\n    theme: 'Análises contábeis e financeiras',\n    isOfficial: true,\n    createdAt: 'Agente oficial'\n  },\n  {\n    id: 'official-engenheiro',\n    name: 'Engenheiro',\n    type: 'Direito Ambiental',\n    theme: 'Laudos técnicos e perícias',\n    isOfficial: true,\n    createdAt: 'Agente oficial'\n  },\n  {\n    id: 'official-medico',\n    name: 'Médico',\n    type: 'Direito Civil',\n    theme: 'Pareceres médicos e análises clínicas',\n    isOfficial: true,\n    createdAt: 'Agente oficial'\n  }\n];\n\nexport function WorkspaceProvider({ children }: { children: React.ReactNode }) {\n  const [workspaces, setWorkspaces] = useState<Workspace[]>([]);\n  const [selectedWorkspace, setSelectedWorkspace] = useState<Workspace | null>(null);\n  const [agents, setAgents] = useState<Agent[]>([]);\n\n  // Carregar dados salvos do localStorage\n  useEffect(() => {\n    const savedWorkspaces = localStorage.getItem('lexai-workspaces');\n    const savedAgents = localStorage.getItem('lexai-agents');\n    const savedSelectedWorkspace = localStorage.getItem('lexai-selected-workspace');\n\n    if (savedWorkspaces) {\n      const parsedWorkspaces = JSON.parse(savedWorkspaces);\n      setWorkspaces(parsedWorkspaces);\n      \n      if (savedSelectedWorkspace) {\n        const selected = parsedWorkspaces.find((w: Workspace) => w.id === savedSelectedWorkspace);\n        if (selected) setSelectedWorkspace(selected);\n      } else if (parsedWorkspaces.length > 0) {\n        setSelectedWorkspace(parsedWorkspaces[0]);\n      }\n    }\n\n    if (savedAgents) {\n      setAgents(JSON.parse(savedAgents));\n    }\n  }, []);\n\n  // Salvar mudanças no localStorage\n  useEffect(() => {\n    localStorage.setItem('lexai-workspaces', JSON.stringify(workspaces));\n  }, [workspaces]);\n\n  useEffect(() => {\n    localStorage.setItem('lexai-agents', JSON.stringify(agents));\n  }, [agents]);\n\n  useEffect(() => {\n    if (selectedWorkspace) {\n      localStorage.setItem('lexai-selected-workspace', selectedWorkspace.id);\n    }\n  }, [selectedWorkspace]);\n\n  const addWorkspace = (workspace: Workspace) => {\n    setWorkspaces(prev => [...prev, workspace]);\n    if (!selectedWorkspace) {\n      setSelectedWorkspace(workspace);\n    }\n  };\n\n  const addAgent = (agent: Agent) => {\n    setAgents(prev => [...prev, agent]);\n  };\n\n  const getAgentsForWorkspace = (workspaceId: string) => {\n    return agents.filter(agent => agent.workspaceId === workspaceId);\n  };\n\n  const getAgentsByLegalSubject = (workspaceId: string, subject: LegalSubject) => {\n    return agents.filter(agent => \n      agent.workspaceId === workspaceId && agent.type === subject\n    );\n  };\n\n  const getAvailableLegalSubjects = (workspaceId: string) => {\n    const workspaceAgents = getAgentsForWorkspace(workspaceId);\n    const subjects = new Set<LegalSubject>();\n    \n    workspaceAgents.forEach(agent => {\n      subjects.add(agent.type);\n    });\n    \n    return Array.from(subjects).sort();\n  };\n\n  return (\n    <WorkspaceContext.Provider value={{\n      workspaces,\n      selectedWorkspace,\n      agents,\n      officialAgents: OFFICIAL_AGENTS,\n      setSelectedWorkspace,\n      addWorkspace,\n      addAgent,\n      getAgentsForWorkspace,\n      getAgentsByLegalSubject,\n      getAvailableLegalSubjects\n    }}>\n      {children}\n    </WorkspaceContext.Provider>\n  );\n}\n\nexport function useWorkspace() {\n  const context = useContext(WorkspaceContext);\n  if (context === undefined) {\n    throw new Error('useWorkspace must be used within a WorkspaceProvider');\n  }\n  return context;\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/hooks/use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/hooks/use-toast.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'actionTypes' is assigned a value but only used as a type.","line":18,"column":7,"nodeType":null,"messageId":"usedOnlyAsType","endLine":18,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","usedDeprecatedRules":[]},{"filePath":"/app/src/hooks/useAuth.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":89,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":89,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState, useEffect, createContext, useContext } from 'react';\nimport { \n  User,\n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n  signInWithPopup,\n  signOut,\n  onAuthStateChanged\n} from 'firebase/auth';\nimport { auth, googleProvider, isFirebaseConfigured } from '@/lib/firebase';\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  signIn: (email: string, password: string) => Promise<void>;\n  signUp: (email: string, password: string) => Promise<void>;\n  signInWithGoogle: () => Promise<void>;\n  logout: () => Promise<void>;\n  isFirebaseConfigured: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Se Firebase não estiver configurado, apenas definir loading como false\n    if (!isFirebaseConfigured || !auth) {\n      setLoading(false);\n      return;\n    }\n\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\n      setUser(user);\n      setLoading(false);\n    });\n\n    return unsubscribe;\n  }, []);\n\n  const signIn = async (email: string, password: string) => {\n    if (!auth) {\n      throw new Error('Firebase não está configurado');\n    }\n    await signInWithEmailAndPassword(auth, email, password);\n  };\n\n  const signUp = async (email: string, password: string) => {\n    if (!auth) {\n      throw new Error('Firebase não está configurado');\n    }\n    await createUserWithEmailAndPassword(auth, email, password);\n  };\n\n  const signInWithGoogle = async () => {\n    if (!auth || !googleProvider) {\n      throw new Error('Firebase não está configurado');\n    }\n    await signInWithPopup(auth, googleProvider);\n  };\n\n  const logout = async () => {\n    if (!auth) {\n      throw new Error('Firebase não está configurado');\n    }\n    await signOut(auth);\n  };\n\n  const value = {\n    user,\n    loading,\n    signIn,\n    signUp,\n    signInWithGoogle,\n    logout,\n    isFirebaseConfigured\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/hooks/useFormValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/hooks/useTheme.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/lib/firebase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/pages/Agents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/pages/CreateAgent.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FileText' is defined but never used.","line":8,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isAnalyzing' is assigned a value but never used.","line":18,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ArrowLeft, Upload, FileText, Bot, CheckCircle, Lightbulb, Sparkles, Crown, Building2 } from \"lucide-react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useWorkspace } from \"@/contexts/WorkspaceContext\";\nimport { LEGAL_SUBJECTS, LegalSubject } from \"@/types/legalSubjects\";\n\nexport default function CreateAgent() {\n  const [agentName, setAgentName] = useState(\"\");\n  const [agentTheme, setAgentTheme] = useState<LegalSubject | \"\">(\"\");\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [step, setStep] = useState(1);\n  \n  const navigate = useNavigate();\n  const { toast } = useToast();\n  const { selectedWorkspace, addAgent } = useWorkspace();\n\n  if (!selectedWorkspace) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"pt-6 text-center\">\n            <div className=\"w-16 h-16 bg-gray-100 rounded-xl flex items-center justify-center mx-auto mb-4\">\n              <Building2 className=\"h-8 w-8 text-gray-400\" />\n            </div>\n            <h2 className=\"text-xl font-bold mb-2\">Ops! Falta configurar algo</h2>\n            <p className=\"text-gray-600 mb-6\">\n              Você precisa ter um escritório ativo para criar modelos personalizados\n            </p>\n            <Button asChild className=\"w-full\">\n              <Link to=\"/workspace\">Configurar Meu Escritório</Link>\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file && file.name.endsWith('.docx')) {\n      setSelectedFile(file);\n    } else {\n      toast({\n        title: \"Arquivo não compatível\",\n        description: \"Por favor, escolha um arquivo .docx (Word)\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!agentName.trim() || !agentTheme || !selectedFile) return;\n\n    setIsAnalyzing(true);\n    setStep(2);\n\n    // Simular análise do documento\n    setTimeout(() => {\n      const newAgent = {\n        id: `agent-${Date.now()}`,\n        name: agentName,\n        type: agentTheme as LegalSubject,\n        theme: `Especializado em ${agentTheme.toLowerCase()}`,\n        isOfficial: false,\n        workspaceId: selectedWorkspace!.id,\n        createdAt: new Date().toLocaleDateString()\n      };\n\n      addAgent(newAgent);\n\n      toast({\n        title: \"🎉 Modelo criado com sucesso!\",\n        description: `${agentName} está pronto para uso`,\n      });\n\n      navigate(`/dashboard?workspace=${selectedWorkspace!.id}`);\n    }, 3000);\n  };\n\n  if (step === 2) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-purple-50\">\n        <Card className=\"w-full max-w-lg\">\n          <CardContent className=\"pt-8 text-center space-y-6\">\n            <div className=\"relative\">\n              <div className=\"w-20 h-20 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center mx-auto\">\n                <Bot className=\"h-10 w-10 text-white animate-pulse\" />\n              </div>\n              <div className=\"absolute -top-2 -right-6 w-8 h-8 bg-yellow-400 rounded-full flex items-center justify-center\">\n                <Sparkles className=\"h-4 w-4 text-yellow-800 animate-spin\" />\n              </div>\n            </div>\n            <div className=\"space-y-3\">\n              <h2 className=\"text-2xl font-bold text-gray-900\">Analisando seu documento...</h2>\n              <p className=\"text-gray-600 leading-relaxed\">\n                Estou estudando o seu modelo e aprendendo como fazer documentos similares\n              </p>\n            </div>\n            <div className=\"space-y-3\">\n              <div className=\"w-full bg-gray-200 rounded-full h-3\">\n                <div className=\"bg-gradient-to-r from-blue-500 to-purple-600 h-3 rounded-full animate-pulse\" style={{width: '70%'}}></div>\n              </div>\n              <p className=\"text-sm text-gray-500\">\n                Isso pode levar alguns segundos... ⏳\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"flex items-center gap-4\">\n        <Button variant=\"ghost\" size=\"sm\" asChild className=\"hover:bg-gray-100\">\n          <Link to=\"/dashboard\">\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Link>\n        </Button>\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Criar Modelo Personalizado</h1>\n          <p className=\"text-gray-600\">\n            Escritório: <span className=\"font-medium text-blue-600\">{selectedWorkspace?.name}</span>\n          </p>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        <Card className=\"h-fit\">\n          <CardHeader className=\"text-center pb-6\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-purple-100 to-blue-100 rounded-2xl mx-auto mb-4 flex items-center justify-center\">\n              <Bot className=\"h-8 w-8 text-purple-600\" />\n            </div>\n            <CardTitle className=\"text-2xl\">Vamos criar seu modelo</CardTitle>\n            <CardDescription className=\"text-lg\">\n              Envie um documento que você usa e eu aprendo como fazer outros iguais\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-8\">\n              {/* Upload do arquivo */}\n              <div className=\"space-y-4\">\n                <Label htmlFor=\"document\" className=\"text-lg font-medium text-gray-900\">\n                  Seu Documento Modelo\n                </Label>\n                <div className={`border-2 border-dashed rounded-xl p-8 text-center transition-all cursor-pointer ${\n                  selectedFile \n                    ? 'border-green-300 bg-green-50' \n                    : 'border-gray-300 hover:border-blue-400 hover:bg-blue-50'\n                }`}>\n                  <input\n                    type=\"file\"\n                    id=\"document\"\n                    accept=\".docx\"\n                    onChange={handleFileChange}\n                    className=\"hidden\"\n                  />\n                  <label htmlFor=\"document\" className=\"cursor-pointer\">\n                    {selectedFile ? (\n                      <div className=\"space-y-3\">\n                        <CheckCircle className=\"h-12 w-12 text-green-500 mx-auto\" />\n                        <div>\n                          <p className=\"font-semibold text-green-900\">{selectedFile.name}</p>\n                          <p className=\"text-sm text-green-700\">\n                            Perfeito! Arquivo carregado com sucesso \n                          </p>\n                        </div>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-3\">\n                        <Upload className=\"h-12 w-12 text-gray-400 mx-auto\" />\n                        <div>\n                          <p className=\"font-semibold text-gray-900\">Clique para escolher seu arquivo</p>\n                          <p className=\"text-sm text-gray-600\">\n                            Aceito apenas arquivos .docx (Word)\n                          </p>\n                        </div>\n                      </div>\n                    )}\n                  </label>\n                </div>\n                <p className=\"text-sm text-gray-600\">\n                  💡 <strong>Dica:</strong> Escolha um documento que você usa frequentemente e está bem formatado\n                </p>\n              </div>\n\n              {/* Nome do modelo */}\n              <div className=\"space-y-3\">\n                <Label htmlFor=\"agent-name\" className=\"text-lg font-medium text-gray-900\">\n                  Como quer chamar este modelo?\n                </Label>\n                <Input\n                  id=\"agent-name\"\n                  placeholder=\"Ex: Meu Modelo de Petições Trabalhistas\"\n                  value={agentName}\n                  onChange={(e) => setAgentName(e.target.value)}\n                  required\n                  className=\"h-12 text-base\"\n                />\n                <p className=\"text-sm text-gray-600\">\n                  Escolha um nome que te ajude a identificar facilmente\n                </p>\n              </div>\n\n              {/* Área jurídica */}\n              <div className=\"space-y-3\">\n                <Label htmlFor=\"agent-theme\" className=\"text-lg font-medium text-gray-900\">\n                  Qual área jurídica?\n                </Label>\n                <Select value={agentTheme} onValueChange={(value: LegalSubject) => setAgentTheme(value)} required>\n                  <SelectTrigger className=\"h-12\">\n                    <SelectValue placeholder=\"Escolha a área principal do seu documento\" />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-white max-h-60\">\n                    {LEGAL_SUBJECTS.map((subject) => (\n                      <SelectItem key={subject} value={subject} className=\"py-2\">\n                        {subject}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <p className=\"text-sm text-gray-600\">\n                  Isso me ajuda a entender melhor o contexto do seu documento\n                </p>\n              </div>\n\n              {/* Botões */}\n              <div className=\"flex gap-4 pt-4\">\n                <Button \n                  type=\"submit\" \n                  disabled={!agentName.trim() || !agentTheme || !selectedFile}\n                  className=\"flex-1 h-12 bg-gradient-to-r from-purple-500 to-blue-600 hover:from-purple-600 hover:to-blue-700 text-white border-0\"\n                >\n                  <Sparkles className=\"mr-2 h-4 w-4\" />\n                  Criar Meu Modelo\n                </Button>\n                <Button type=\"button\" variant=\"outline\" asChild className=\"h-12\">\n                  <Link to=\"/dashboard\">Cancelar</Link>\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n\n        {/* Informações sobre o processo */}\n        <div className=\"space-y-6\">\n          <Card className=\"bg-gradient-to-br from-blue-50 to-purple-50 border-blue-200\">\n            <CardHeader>\n              <CardTitle className=\"text-xl flex items-center gap-3 text-blue-900\">\n                <Lightbulb className=\"h-6 w-6\" />\n                Como isso funciona?\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start gap-4\">\n                  <div className=\"w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0\">\n                    <span className=\"text-sm font-bold text-white\">1</span>\n                  </div>\n                  <p className=\"text-blue-800\">Você envia um documento modelo (.docx) que usa frequentemente</p>\n                </div>\n                <div className=\"flex items-start gap-4\">\n                  <div className=\"w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0\">\n                    <span className=\"text-sm font-bold text-white\">2</span>\n                  </div>\n                  <p className=\"text-blue-800\">Eu analiso a estrutura, linguagem e padrões do seu documento</p>\n                </div>\n                <div className=\"flex items-start gap-4\">\n                  <div className=\"w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0\">\n                    <span className=\"text-sm font-bold text-white\">3</span>\n                  </div>\n                  <p className=\"text-blue-800\">O modelo fica disponível para criar documentos similares rapidamente</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-yellow-50 border-yellow-200\">\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-start gap-3\">\n                <div className=\"w-8 h-8 bg-yellow-400 rounded-full flex items-center justify-center flex-shrink-0\">\n                  <Crown className=\"h-4 w-4 text-yellow-800\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-yellow-900 mb-2\">Dica Importante</h3>\n                  <p className=\"text-yellow-800 text-sm leading-relaxed\">\n                    Quanto melhor for o seu documento modelo, mais preciso será o modelo criado. \n                    Use documentos bem estruturados e completos.\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Exemplos de bons modelos</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3 text-sm\">\n                <div className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                  <span>Petição inicial completa</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                  <span>Parecer jurídico estruturado</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                  <span>Contrato padronizado</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                  <span>Recurso bem fundamentado</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/Dashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Zap' is defined but never used.","line":5,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":47}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FileText, Plus, Crown, Building2, Zap, Users, BookOpen, PenTool, FileCheck, Shield, Play, MessageCircle, Sparkles } from \"lucide-react\";\nimport { Link } from \"react-router-dom\";\nimport { useWorkspace } from \"@/contexts/WorkspaceContext\";\n\nconst scenarios = [\n  {\n    title: \"Preciso criar uma petição\",\n    description: \"Tenho um cliente que precisa processar alguém\",\n    icon: FileText,\n    color: \"bg-gradient-to-br from-blue-500 to-blue-600\",\n    href: \"/generate?type=peticao\",\n    example: \"Ex: Ação de cobrança, indenização por danos...\"\n  },\n  {\n    title: \"Quero fazer um parecer jurídico\",\n    description: \"Preciso analisar um caso ou contrato\",\n    icon: BookOpen,\n    color: \"bg-gradient-to-br from-green-500 to-green-600\",\n    href: \"/generate?type=parecer\",\n    example: \"Ex: Análise de viabilidade, opinião legal...\"\n  },\n  {\n    title: \"Vou redigir um contrato\",\n    description: \"Meu cliente precisa de um acordo\",\n    icon: PenTool,\n    color: \"bg-gradient-to-br from-purple-500 to-purple-600\",\n    href: \"/generate?type=contrato\",\n    example: \"Ex: Prestação de serviços, compra e venda...\"\n  },\n  {\n    title: \"Tenho que fazer um recurso\",\n    description: \"Perdi na primeira instância\",\n    icon: FileCheck,\n    color: \"bg-gradient-to-br from-orange-500 to-orange-600\",\n    href: \"/generate?type=recurso\",\n    example: \"Ex: Apelação, agravo, embargos...\"\n  }\n];\n\nexport default function Dashboard() {\n  const { selectedWorkspace, getAgentsForWorkspace, officialAgents } = useWorkspace();\n\n  if (!selectedWorkspace) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100\">\n        <div className=\"text-center space-y-8 max-w-lg mx-auto p-8\">\n          <div className=\"relative\">\n            <div className=\"w-24 h-24 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl mx-auto flex items-center justify-center mb-6\">\n              <Building2 className=\"h-12 w-12 text-white\" />\n            </div>\n            <div className=\"absolute -top-2 -right-2 w-8 h-8 bg-yellow-400 rounded-full flex items-center justify-center\">\n              <Sparkles className=\"h-4 w-4 text-yellow-800\" />\n            </div>\n          </div>\n          <div className=\"space-y-4\">\n            <h1 className=\"text-3xl font-bold text-gray-900\">Olá! Bem-vindo ao LexAI</h1>\n            <p className=\"text-gray-600 text-lg leading-relaxed\">\n              Sou sua assistente jurídica inteligente. Para começarmos a trabalhar juntos, \n              vamos configurar seu escritório virtual.\n            </p>\n          </div>\n          <Button asChild size=\"lg\" className=\"w-full bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white border-0 py-6 text-lg\">\n            <Link to=\"/workspace\">\n              <Plus className=\"mr-3 h-5 w-5\" />\n              Configurar Meu Escritório\n            </Link>\n          </Button>\n          <p className=\"text-sm text-gray-500\">\n            Levará apenas 2 minutos ⏰\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  const workspaceAgents = getAgentsForWorkspace(selectedWorkspace.id);\n\n  return (\n    <div className=\"space-y-10\">\n      {/* Header Conversacional */}\n      <div className=\"text-center space-y-6 py-8\">\n        <div className=\"inline-flex items-center gap-3 bg-gradient-to-r from-blue-100 to-purple-100 px-6 py-3 rounded-full\">\n          <MessageCircle className=\"h-5 w-5 text-blue-600\" />\n          <span className=\"text-blue-800 font-medium\">Como posso te ajudar hoje?</span>\n        </div>\n        <h1 className=\"text-4xl font-bold text-gray-900\">O que você precisa fazer?</h1>\n        <p className=\"text-gray-600 text-xl max-w-2xl mx-auto\">\n          Escolha abaixo a situação que mais se parece com a sua\n        </p>\n      </div>\n\n      {/* Cenários Visuais - Cards Grandes */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n        {scenarios.map((scenario) => (\n          <Card key={scenario.title} className=\"group hover:shadow-2xl transition-all duration-300 cursor-pointer border-0 overflow-hidden\">\n            <Link to={scenario.href}>\n              <div className=\"relative\">\n                <div className={`${scenario.color} p-8 text-white`}>\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"space-y-4\">\n                      <div className=\"w-14 h-14 bg-white/20 rounded-xl flex items-center justify-center\">\n                        <scenario.icon className=\"h-7 w-7 text-white\" />\n                      </div>\n                      <div>\n                        <h3 className=\"text-2xl font-bold mb-2\">{scenario.title}</h3>\n                        <p className=\"text-blue-100 text-lg\">{scenario.description}</p>\n                      </div>\n                    </div>\n                    <div className=\"opacity-70 group-hover:opacity-100 transition-opacity\">\n                      <Play className=\"h-6 w-6 text-white\" />\n                    </div>\n                  </div>\n                </div>\n                <CardContent className=\"p-6 bg-white\">\n                  <p className=\"text-gray-600 italic\">{scenario.example}</p>\n                  <div className=\"mt-4 flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-500\">Clique para começar</span>\n                    <div className=\"w-2 h-2 bg-green-400 rounded-full\"></div>\n                  </div>\n                </CardContent>\n              </div>\n            </Link>\n          </Card>\n        ))}\n      </div>\n\n      {/* Modelos Inteligentes Oficiais */}\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center gap-4\">\n          <div className=\"w-10 h-10 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-xl flex items-center justify-center\">\n            <Crown className=\"h-5 w-5 text-white\" />\n          </div>\n          <div>\n            <h2 className=\"text-2xl font-bold text-gray-900\">Modelos Prontos para Usar</h2>\n            <p className=\"text-gray-600\">Criados por especialistas jurídicos</p>\n          </div>\n          <Badge className=\"bg-yellow-100 text-yellow-800 border-yellow-300\">\n            ⭐ Recomendados\n          </Badge>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {officialAgents.map((agent) => (\n            <Card key={agent.id} className=\"relative hover:shadow-lg transition-all duration-200 border border-gray-200\">\n              <div className=\"absolute top-4 right-4\">\n                <div className=\"w-6 h-6 bg-yellow-100 rounded-full flex items-center justify-center\">\n                  <Crown className=\"h-3 w-3 text-yellow-600\" />\n                </div>\n              </div>\n              <CardHeader className=\"pb-4\">\n                <CardTitle className=\"text-lg text-gray-900\">{agent.name}</CardTitle>\n                <CardDescription className=\"text-gray-600\">{agent.theme}</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <Badge variant=\"outline\" className=\"text-xs\">{agent.type}</Badge>\n                  <Button size=\"sm\" asChild className=\"w-full bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white border-0\">\n                    <Link to={`/generate?agent=${agent.id}`}>\n                      <Sparkles className=\"mr-2 h-4 w-4\" />\n                      Usar Este Modelo\n                    </Link>\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n\n      {/* Meus Modelos Personalizados */}\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl flex items-center justify-center\">\n              <Users className=\"h-5 w-5 text-white\" />\n            </div>\n            <div>\n              <h2 className=\"text-2xl font-bold text-gray-900\">Meus Modelos Personalizados</h2>\n              <p className=\"text-gray-600\">Baseados nos seus documentos</p>\n            </div>\n          </div>\n          <Button variant=\"outline\" asChild className=\"border-2 border-dashed border-gray-300 hover:border-blue-400 hover:bg-blue-50\">\n            <Link to=\"/agents/create\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Criar Novo Modelo\n            </Link>\n          </Button>\n        </div>\n        \n        {workspaceAgents.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {workspaceAgents.map((agent) => (\n              <Card key={agent.id} className=\"hover:shadow-lg transition-all duration-200 border border-gray-200\">\n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-start justify-between\">\n                    <div>\n                      <CardTitle className=\"text-lg text-gray-900\">{agent.name}</CardTitle>\n                      <CardDescription className=\"text-gray-600\">{agent.theme}</CardDescription>\n                    </div>\n                    <div className=\"w-2 h-2 bg-blue-400 rounded-full\"></div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <Badge variant=\"secondary\" className=\"text-xs\">{agent.type}</Badge>\n                      <span className=\"text-xs text-gray-500\">Criado {agent.createdAt}</span>\n                    </div>\n                    <Button size=\"sm\" asChild className=\"w-full\">\n                      <Link to={`/generate?agent=${agent.id}`}>\n                        <FileText className=\"mr-2 h-4 w-4\" />\n                        Usar Este Modelo\n                      </Link>\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Card className=\"border-2 border-dashed border-gray-300 bg-gray-50\">\n            <CardContent className=\"flex flex-col items-center justify-center py-16\">\n              <div className=\"w-16 h-16 bg-gray-200 rounded-xl flex items-center justify-center mb-6\">\n                <Shield className=\"h-8 w-8 text-gray-400\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-3\">Ainda não há modelos personalizados</h3>\n              <p className=\"text-gray-600 text-center mb-8 max-w-md leading-relaxed\">\n                Que tal criar seu primeiro modelo? Envie um documento que você usa frequentemente e eu aprendo como fazer outros iguais.\n              </p>\n              <Button asChild className=\"bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white border-0\">\n                <Link to=\"/agents/create\">\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Criar Meu Primeiro Modelo\n                </Link>\n              </Button>\n              <p className=\"text-sm text-gray-500 mt-4\">É rápido e fácil! 📝</p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Dica com Visual Mais Amigável */}\n      <Card className=\"bg-gradient-to-r from-blue-50 to-purple-50 border-blue-200\">\n        <CardHeader>\n          <CardTitle className=\"text-blue-900 flex items-center gap-3\">\n            💡 Dica para Iniciantes\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <p className=\"text-blue-800 leading-relaxed\">\n              <strong>Primeira vez aqui?</strong> Comece testando um dos modelos prontos acima. \n              Depois, quando se sentir à vontade, você pode criar seus próprios modelos personalizados.\n            </p>\n            <div className=\"flex items-center gap-2 text-sm text-blue-700\">\n              <span>🎯</span>\n              <span>Quanto mais específico você for, melhor será o resultado!</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/Generate.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Label' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Textarea' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Select' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SelectContent' is defined but never used.","line":6,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SelectItem' is defined but never used.","line":6,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SelectTrigger' is defined but never used.","line":6,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SelectValue' is defined but never used.","line":6,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":71},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertTriangle' is defined but never used.","line":20,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Info' is defined but never used.","line":20,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ArrowLeft, ArrowRight, FileText, CheckCircle, MessageCircle, Sparkles } from \"lucide-react\"; // Removed Bot, Zap, Crown, Users as they are in sub-components\nimport { Link, useSearchParams } from \"react-router-dom\";\nimport { useWorkspace } from \"@/contexts/WorkspaceContext\";\nimport { FileUpload } from \"@/components/FileUpload\"; // UploadedFile interface is also used by Generate.tsx\nimport { GenerationProgress } from \"@/components/GenerationProgress\";\n// PromptGrid is now part of Step2Selection\n// import { PromptGrid } from \"@/components/PromptGrid\"; \nimport { ExpandableDocument } from \"@/components/ExpandableDocument\";\nimport { PREDEFINED_PROMPTS } from \"@/types/prompts\";\nimport { Step1CreationMode } from '@/components/generate/Step1CreationMode';\nimport { Step2Selection } from '@/components/generate/Step2Selection';\nimport { Step3Instructions } from '@/components/generate/Step3Instructions';\n// Keep AlertTriangle and Info if error display uses them, or add if not present\nimport { AlertTriangle, Info } from 'lucide-react'; \nimport { Toaster } from \"@/components/ui/toaster\";\n\ninterface UploadedFile {\n  id: string;\n  name: string;\n  size: number;\n  type: string;\n  content?: string;\n}\n\nexport default function Generate() {\n  const [searchParams] = useSearchParams();\n  const { agents, officialAgents, selectedWorkspace } = useWorkspace();\n  \n  const [currentStep, setCurrentStep] = useState(1);\n  const [creationMode, setCreationMode] = useState<\"assistant\" | \"template\" | \"\">(\n    searchParams.get('agent') ? \"assistant\" : searchParams.get('type') ? \"template\" : \"\"\n  );\n  const [selectedAgent, setSelectedAgent] = useState(searchParams.get('agent') || \"\");\n  const [instructions, setInstructions] = useState(\"\");\n  const [selectedPromptId, setSelectedPromptId] = useState(searchParams.get('type') || \"\");\n  const [additionalInstructions, setAdditionalInstructions] = useState(\"\");\n  const [supportFiles, setSupportFiles] = useState<UploadedFile[]>([]);\n  const [templateFile, setTemplateFile] = useState<UploadedFile | null>(null);\n  const [strictMode, setStrictMode] = useState(false);\n  const [generatedContent, setGeneratedContent] = useState(\"\");\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [documentTitle, setDocumentTitle] = useState(\"\");\n\n  const workspaceAgents = selectedWorkspace ? agents.filter(a => a.workspaceId === selectedWorkspace.id) : [];\n  const allAgents = [...officialAgents, ...workspaceAgents];\n\n  const handleNext = () => {\n    if (currentStep < 4) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const handleBack = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const handleGenerate = async () => {\n    setIsGenerating(true);\n    setGeneratedContent(\"\");\n    \n    // Set document title based on mode\n    if (creationMode === 'template' && selectedPromptId) {\n      const prompt = PREDEFINED_PROMPTS.find(p => p.id === selectedPromptId);\n      setDocumentTitle(prompt?.name || 'Documento Jurídico');\n    } else if (creationMode === 'assistant' && selectedAgent) {\n      const agent = allAgents.find(a => a.id === selectedAgent);\n      setDocumentTitle(`Documento - ${agent?.name || 'Assistente'}`);\n    }\n  };\n\n  const handleGenerationComplete = () => {\n    setIsGenerating(false);\n    \n    // Generate content based on mode\n    let content = '';\n    if (creationMode === 'assistant') {\n      const agent = allAgents.find(a => a.id === selectedAgent);\n      content = `DOCUMENTO JURÍDICO GERADO\n\nCriado com o modelo: ${agent?.name || 'Modelo selecionado'}\nEspecialidade: ${agent?.theme || 'Não especificado'}\n\nEste documento foi elaborado com base nas suas instruções e nos documentos anexados.\n\nSUAS INSTRUÇÕES:\n${instructions}\n\nDOCUMENTOS ANALISADOS:\n${supportFiles.length > 0 ? supportFiles.map(f => `- ${f.name}`).join('\\n') : 'Nenhum documento anexado.'}\n\n${templateFile ? `MODELO USADO COMO REFERÊNCIA: ${templateFile.name}` : ''}\n\n1. CONSIDERAÇÕES INICIAIS\nCom base na análise dos documentos anexados e no conhecimento jurídico especializado...\n\n2. FUNDAMENTAÇÃO JURÍDICA\n${instructions || 'Análise jurídica detalhada será desenvolvida conforme o caso específico...'}\n\n3. CONCLUSÃO\nPelos fundamentos expostos, conclui-se que...\n\n${strictMode && templateFile ? '\\n[Documento criado seguindo rigorosamente o modelo fornecido]' : ''}\n\n---\nDocumento criado automaticamente pelo LexAI`;\n    } else {\n      const prompt = PREDEFINED_PROMPTS.find(p => p.id === selectedPromptId);\n      content = `${prompt?.name.toUpperCase() || 'DOCUMENTO JURÍDICO'}\n\nTipo de documento: ${prompt?.name || 'Documento personalizado'}\n\n${additionalInstructions ? `SUAS INSTRUÇÕES:\\n${additionalInstructions}\\n` : ''}\n\nDOCUMENTOS ANALISADOS:\n${supportFiles.length > 0 ? supportFiles.map(f => `- ${f.name}`).join('\\n') : 'Nenhum documento anexado.'}\n\n${templateFile ? `MODELO USADO COMO REFERÊNCIA: ${templateFile.name}` : ''}\n\n1. CONSIDERAÇÕES INICIAIS\nEste documento foi elaborado seguindo os padrões para ${prompt?.name.toLowerCase() || 'documentos jurídicos'}...\n\n2. DESENVOLVIMENTO\n${additionalInstructions || 'Conteúdo será desenvolvido conforme suas especificações...'}\n\n3. FUNDAMENTAÇÃO JURÍDICA\nCom base na doutrina e jurisprudência aplicáveis...\n\n4. CONCLUSÃO\nPelos fundamentos expostos...\n\n${strictMode && templateFile ? '\\n[Documento criado seguindo rigorosamente o modelo fornecido]' : ''}\n\n---\nDocumento criado automaticamente pelo LexAI`;\n    }\n    \n    setGeneratedContent(content);\n  };\n\n  const handlePromptSelect = (promptId: string) => {\n    setSelectedPromptId(promptId);\n  };\n\n  const canProceedStep1 = creationMode !== \"\";\n  const canProceedStep2 = creationMode === 'assistant' ? selectedAgent : selectedPromptId;\n  const canProceedStep3 = creationMode === 'assistant' ? instructions.trim() : true;\n  const canGenerate = currentStep === 4;\n\n  const steps = [\n    { number: 1, title: \"Como vamos fazer?\", description: \"Escolha o método\", icon: MessageCircle },\n    { number: 2, title: creationMode === 'assistant' ? \"Qual modelo usar?\" : \"Que tipo de documento?\", description: \"Selecione a opção\", icon: creationMode === 'assistant' ? Bot : FileText },\n    { number: 3, title: \"Me conte os detalhes\", description: \"Explique o que precisa\", icon: MessageCircle },\n    { number: 4, title: \"Documentos extras\", description: \"Anexos opcionais\", icon: FileText }\n  ];\n\n  return (\n    <div>\n      <div className=\"space-y-8\">\n        <div className=\"flex items-center gap-4\">\n          <Button variant=\"ghost\" size=\"sm\" asChild className=\"hover:bg-gray-100\">\n            <Link to=\"/dashboard\">\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Link>\n          </Button>\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Vamos criar seu documento</h1>\n            <p className=\"text-gray-600\">\n              Te guio passo a passo para fazer exatamente o que você precisa\n            </p>\n          </div>\n        </div>\n\n        {/* Progress Visual Simplificado */}\n        <div className=\"relative\">\n          <div className=\"flex items-center justify-between mb-12\">\n            {steps.map((step, index) => {\n              const IconComponent = step.icon;\n              return (\n                <div key={step.number} className=\"flex items-center\">\n                  <div className=\"flex flex-col items-center\">\n                    <div className={`relative w-12 h-12 rounded-full flex items-center justify-center text-sm font-medium transition-all ${\n                      currentStep >= step.number \n                        ? 'bg-gradient-to-br from-blue-500 to-purple-600 text-white shadow-lg' \n                        : 'bg-gray-200 text-gray-500'\n                    }`}>\n                      {currentStep > step.number ? (\n                        <CheckCircle className=\"h-6 w-6\" />\n                      ) : (\n                        <IconComponent className=\"h-5 w-5\" />\n                      )}\n                      {currentStep === step.number && (\n                        <div className=\"absolute -top-1 -right-1 w-4 h-4 bg-yellow-400 rounded-full flex items-center justify-center\">\n                          <Sparkles className=\"h-2 w-2 text-yellow-800\" />\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"text-center mt-3\">\n                      <p className={`text-sm font-medium ${currentStep >= step.number ? 'text-gray-900' : 'text-gray-500'}`}>\n                        {step.title}\n                      </p>\n                      <p className=\"text-xs text-gray-500 mt-1\">{step.description}</p>\n                    </div>\n                  </div>\n                  {index < steps.length - 1 && (\n                    <div className={`flex-1 h-1 mx-6 rounded-full ${\n                      currentStep > step.number ? 'bg-gradient-to-r from-blue-500 to-purple-600' : 'bg-gray-200'\n                    }`} />\n                  )}\n                </div>\n              );\n            })}\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          <Card className=\"h-fit\">\n            <CardHeader className=\"text-center pb-6\">\n              <div className=\"w-16 h-16 bg-gradient-to-br from-blue-100 to-purple-100 rounded-2xl mx-auto mb-4 flex items-center justify-center\">\n                {React.createElement(steps[currentStep - 1].icon, { className: \"h-8 w-8 text-blue-600\" })}\n              </div>\n              <CardTitle className=\"text-2xl text-gray-900\">\n                {steps[currentStep - 1].title}\n              </CardTitle>\n              <CardDescription className=\"text-lg text-gray-600\">\n                {steps[currentStep - 1].description}\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-8\">\n              {/* Error display - Assuming error state exists */}\n              {/* {error && (\n                <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg relative mb-6\" role=\"alert\">\n                  <div className=\"flex items-start\">\n                    <AlertTriangle className=\"h-5 w-5 text-red-500 mr-3 flex-shrink-0\" />\n                    <div>\n                      <strong className=\"font-bold\">Oops! Algo deu errado.</strong>\n                      <p className=\"text-sm\">{error}</p>\n                    </div>\n                  </div>\n                </div>\n              )} */}\n\n              {currentStep === 1 && (\n                <Step1CreationMode\n                  creationMode={creationMode}\n                  onSetCreationMode={setCreationMode}\n                />\n              )}\n\n              {currentStep === 2 && creationMode && ( \n                <Step2Selection\n                  creationMode={creationMode}\n                  selectedAgent={selectedAgent}\n                  onSetSelectedAgent={setSelectedAgent}\n                  officialAgents={officialAgents}\n                  workspaceAgents={workspaceAgents}\n                  selectedPromptId={selectedPromptId}\n                  onPromptSelect={handlePromptSelect}\n                />\n              )}\n\n              {currentStep === 3 && creationMode && (\n                <Step3Instructions\n                  creationMode={creationMode}\n                  instructions={instructions}\n                  onSetInstructions={setInstructions}\n                  additionalInstructions={additionalInstructions}\n                  onSetAdditionalInstructions={setAdditionalInstructions}\n                />\n              )}\n\n              {/* Step 4: File Upload */}\n              {currentStep === 4 && (\n                <div className=\"space-y-6\">\n                  <div className=\"text-center\">\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                      Quer anexar algum documento?\n                    </h3>\n                    <p className=\"text-gray-600\">\n                      Isso é opcional, mas pode ajudar a criar um documento ainda melhor\n                    </p>\n                  </div>\n                  <FileUpload\n                    onSupportFilesChange={setSupportFiles}\n                    onTemplateFileChange={setTemplateFile}\n                    onStrictModeChange={setStrictMode}\n                    strictMode={strictMode}\n                  />\n                </div>\n              )}\n\n              {/* Navigation Buttons */}\n              <div className=\"flex gap-4 pt-6\">\n                {currentStep > 1 && (\n                  <Button \n                    onClick={handleBack}\n                    variant=\"outline\"\n                    className=\"flex-1 h-12\"\n                  >\n                    <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                    Voltar\n                  </Button>\n                )}\n                \n                {currentStep < 4 ? (\n                  <Button \n                    onClick={handleNext}\n                    disabled={\n                      (currentStep === 1 && !canProceedStep1) ||\n                      (currentStep === 2 && !canProceedStep2) ||\n                      (currentStep === 3 && !canProceedStep3)\n                    }\n                    className=\"flex-1 h-12 bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white border-0\"\n                  >\n                    Continuar\n                    <ArrowRight className=\"ml-2 h-4 w-4\" />\n                  </Button>\n                ) : (\n                  <Button \n                    onClick={handleGenerate}\n                    disabled={!canGenerate || isGenerating}\n                    className=\"flex-1 h-12 bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white border-0\"\n                  >\n                    {isGenerating ? (\n                      <>\n                        <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\"></div>\n                        Criando seu documento...\n                      </>\n                    ) : (\n                      <>\n                        <Sparkles className=\"mr-2 h-4 w-4\" />\n                        Criar Meu Documento\n                      </>\n                    )}\n                  </Button>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"space-y-6\">\n            {isGenerating && (\n              <GenerationProgress\n                isGenerating={isGenerating}\n                onComplete={handleGenerationComplete}\n              />\n            )}\n\n            <ExpandableDocument\n              content={generatedContent}\n              onContentChange={setGeneratedContent}\n              title={documentTitle || \"Seu Documento\"}\n            />\n          </div>\n        </div>\n      </div>\n      <Toaster />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/Index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/pages/Login.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4215,4218],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4215,4218],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":128,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4721,4724],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4721,4724],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useNavigate } from \"react-router-dom\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useFormValidation } from \"@/hooks/useFormValidation\";\nimport { loginSchema, type LoginFormData } from \"@/schemas/validationSchemas\";\nimport { LoadingSpinner } from \"@/components/ui/loading-spinner\";\nimport { AlertTriangle, ExternalLink } from \"lucide-react\";\n\nexport default function Login() {\n  const [formData, setFormData] = useState<LoginFormData>({ email: \"\", password: \"\" });\n  const [isSignUp, setIsSignUp] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [googleLoading, setGoogleLoading] = useState(false);\n  const navigate = useNavigate();\n  const { signIn, signUp, signInWithGoogle, isFirebaseConfigured } = useAuth();\n  const { validate, getFieldError, clearErrors } = useFormValidation(loginSchema);\n\n  // Se Firebase não estiver configurado, mostrar mensagem de configuração\n  if (!isFirebaseConfigured) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <div className=\"flex justify-center mb-4\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center\">\n                <span className=\"text-white font-bold text-xl\">L</span>\n              </div>\n            </div>\n            <CardTitle className=\"text-2xl font-bold\">LexAI</CardTitle>\n            <CardDescription>Configuração Necessária</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Alert>\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertDescription>\n                Firebase não está configurado. Para usar a aplicação, você precisa:\n              </AlertDescription>\n            </Alert>\n            \n            <div className=\"space-y-3 text-sm\">\n              <div>\n                <h4 className=\"font-semibold mb-2\">Passos para configuração:</h4>\n                <ol className=\"list-decimal list-inside space-y-1 text-muted-foreground\">\n                  <li>Criar um projeto no Firebase Console</li>\n                  <li>Copiar .env.local.example para .env.local</li>\n                  <li>Preencher com suas credenciais do Firebase</li>\n                  <li>Recarregar a aplicação</li>\n                </ol>\n              </div>\n              \n              <div className=\"pt-2\">\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"w-full\"\n                  onClick={() => window.open('https://console.firebase.google.com', '_blank')}\n                >\n                  <ExternalLink className=\"w-4 h-4 mr-2\" />\n                  Abrir Firebase Console\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const handleInputChange = (field: keyof LoginFormData, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    clearErrors();\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validate(formData)) {\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      if (isSignUp) {\n        await signUp(formData.email, formData.password);\n        toast({\n          title: \"Conta criada com sucesso!\",\n          description: \"Bem-vindo ao LexAI\"\n        });\n        navigate(\"/onboarding\");\n      } else {\n        await signIn(formData.email, formData.password);\n        toast({\n          title: \"Login realizado!\",\n          description: \"Bem-vindo de volta ao LexAI\"\n        });\n        navigate(\"/dashboard\");\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Erro na autenticação\",\n        description: error.message || \"Ocorreu um erro. Tente novamente.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleGoogleSignIn = async () => {\n    setGoogleLoading(true);\n\n    try {\n      await signInWithGoogle();\n      toast({\n        title: \"Login realizado com sucesso!\",\n        description: \"Bem-vindo ao LexAI\"\n      });\n      navigate(\"/dashboard\");\n    } catch (error: any) {\n      toast({\n        title: \"Erro no login com Google\",\n        description: error.message || \"Ocorreu um erro. Tente novamente.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setGoogleLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center\">\n              <span className=\"text-white font-bold text-xl\">L</span>\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">LexAI</CardTitle>\n          <CardDescription>\n            {isSignUp ? \"Crie sua conta para começar\" : \"Entre na sua conta para acessar a plataforma\"}\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            className=\"w-full\"\n            onClick={handleGoogleSignIn}\n            disabled={googleLoading}\n          >\n            {googleLoading ? (\n              <LoadingSpinner size=\"sm\" className=\"mr-2\" />\n            ) : (\n              <svg className=\"w-4 h-4 mr-2\" viewBox=\"0 0 24 24\">\n                <path\n                  fill=\"currentColor\"\n                  d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n                />\n                <path\n                  fill=\"currentColor\"\n                  d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n                />\n                <path\n                  fill=\"currentColor\"\n                  d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n                />\n                <path\n                  fill=\"currentColor\"\n                  d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n                />\n              </svg>\n            )}\n            {googleLoading ? \"Entrando...\" : \"Continuar com Google\"}\n          </Button>\n\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <Separator className=\"w-full\" />\n            </div>\n            <div className=\"relative flex justify-center text-xs uppercase\">\n              <span className=\"bg-background px-2 text-muted-foreground\">ou</span>\n            </div>\n          </div>\n\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"seu@email.com\"\n                value={formData.email}\n                onChange={(e) => handleInputChange('email', e.target.value)}\n                className={getFieldError('email') ? 'border-destructive' : ''}\n                required\n              />\n              {getFieldError('email') && (\n                <p className=\"text-sm text-destructive\">{getFieldError('email')}</p>\n              )}\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Senha</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"••••••••\"\n                value={formData.password}\n                onChange={(e) => handleInputChange('password', e.target.value)}\n                className={getFieldError('password') ? 'border-destructive' : ''}\n                required\n              />\n              {getFieldError('password') && (\n                <p className=\"text-sm text-destructive\">{getFieldError('password')}</p>\n              )}\n            </div>\n            <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n              {loading ? (\n                <>\n                  <LoadingSpinner size=\"sm\" className=\"mr-2\" />\n                  Carregando...\n                </>\n              ) : (\n                isSignUp ? \"Criar Conta\" : \"Entrar\"\n              )}\n            </Button>\n          </form>\n          \n          <div className=\"text-center\">\n            <Button\n              variant=\"link\"\n              onClick={() => setIsSignUp(!isSignUp)}\n              className=\"text-sm\"\n            >\n              {isSignUp ? \"Já tem uma conta? Entrar\" : \"Não tem uma conta? Criar conta\"}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/pages/Settings.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Bell' is defined but never used.","line":9,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":63},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setSelectedWorkspace' is assigned a value but never used.","line":18,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":62}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Building2, Plus, Settings as SettingsIcon, User, Bell, Shield, ArrowLeft } from \"lucide-react\";\nimport { Link } from \"react-router-dom\";\nimport { useWorkspace } from \"@/contexts/WorkspaceContext\";\n\nexport default function Settings() {\n  const [notifications, setNotifications] = useState(true);\n  const [autoSave, setAutoSave] = useState(true);\n  const [darkMode, setDarkMode] = useState(false);\n  \n  const { workspaces, selectedWorkspace, setSelectedWorkspace, getAgentsForWorkspace } = useWorkspace();\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center gap-4\">\n        <Button variant=\"ghost\" size=\"sm\" asChild>\n          <Link to=\"/dashboard\">\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Link>\n        </Button>\n        <div>\n          <h1 className=\"text-3xl font-bold\">Configurações</h1>\n          <p className=\"text-muted-foreground\">\n            Gerencie suas preferências e ambientes de trabalho\n          </p>\n        </div>\n      </div>\n\n      <div className=\"grid gap-6\">\n        {/* Gerenciamento de Ambientes */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center gap-2\">\n              <Building2 className=\"h-5 w-5\" />\n              <CardTitle>Ambientes de Trabalho</CardTitle>\n            </div>\n            <CardDescription>\n              Gerencie seus ambientes e organize seus agentes por área jurídica\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium\">Ambientes criados</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  Você tem {workspaces.length} ambiente(s) configurado(s)\n                </p>\n              </div>\n              <Button asChild>\n                <Link to=\"/workspace\">\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Gerenciar Ambientes\n                </Link>\n              </Button>\n            </div>\n            \n            {workspaces.length > 0 && (\n              <div className=\"space-y-3\">\n                <Separator />\n                <div>\n                  <p className=\"text-sm font-medium mb-2\">Ambiente ativo:</p>\n                  {selectedWorkspace ? (\n                    <div className=\"flex items-center justify-between p-3 bg-muted rounded-lg\">\n                      <div className=\"flex items-center gap-3\">\n                        <Building2 className=\"h-4 w-4 text-blue-500\" />\n                        <div>\n                          <p className=\"font-medium\">{selectedWorkspace.name}</p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {getAgentsForWorkspace(selectedWorkspace.id).length} agente(s)\n                          </p>\n                        </div>\n                      </div>\n                      <Badge>Ativo</Badge>\n                    </div>\n                  ) : (\n                    <p className=\"text-sm text-muted-foreground\">Nenhum ambiente selecionado</p>\n                  )}\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Preferências do Sistema */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center gap-2\">\n              <SettingsIcon className=\"h-5 w-5\" />\n              <CardTitle>Preferências do Sistema</CardTitle>\n            </div>\n            <CardDescription>\n              Configure como o LexAI funciona para você\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-0.5\">\n                <Label htmlFor=\"notifications\">Notificações</Label>\n                <p className=\"text-sm text-muted-foreground\">\n                  Receba alertas sobre conclusão de documentos\n                </p>\n              </div>\n              <Switch\n                id=\"notifications\"\n                checked={notifications}\n                onCheckedChange={setNotifications}\n              />\n            </div>\n            \n            <Separator />\n            \n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-0.5\">\n                <Label htmlFor=\"auto-save\">Salvamento Automático</Label>\n                <p className=\"text-sm text-muted-foreground\">\n                  Salve automaticamente documentos em progresso\n                </p>\n              </div>\n              <Switch\n                id=\"auto-save\"\n                checked={autoSave}\n                onCheckedChange={setAutoSave}\n              />\n            </div>\n            \n            <Separator />\n            \n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-0.5\">\n                <Label htmlFor=\"dark-mode\">Modo Escuro</Label>\n                <p className=\"text-sm text-muted-foreground\">\n                  Altere a aparência da interface\n                </p>\n              </div>\n              <Switch\n                id=\"dark-mode\"\n                checked={darkMode}\n                onCheckedChange={setDarkMode}\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Perfil do Usuário */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center gap-2\">\n              <User className=\"h-5 w-5\" />\n              <CardTitle>Perfil Jurídico</CardTitle>\n            </div>\n            <CardDescription>\n              Suas informações profissionais e áreas de atuação\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"p-4 bg-muted rounded-lg\">\n              <p className=\"text-sm text-muted-foreground mb-2\">\n                Para alterar seu perfil jurídico, refaça o processo de configuração inicial.\n              </p>\n              <Button variant=\"outline\" size=\"sm\" asChild>\n                <Link to=\"/onboarding/legal-profile\">\n                  Atualizar Perfil\n                </Link>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Segurança */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center gap-2\">\n              <Shield className=\"h-5 w-5\" />\n              <CardTitle>Segurança</CardTitle>\n            </div>\n            <CardDescription>\n              Configurações de segurança e privacidade\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"p-4 bg-muted rounded-lg\">\n              <p className=\"text-sm text-muted-foreground\">\n                Todas as informações são criptografadas e mantidas em segurança conforme a LGPD.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/Workspace.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Scale' is defined but never used.","line":9,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Trash2' is defined but never used.","line":9,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":40}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Plus, Building2, Scale, Trash2, ArrowLeft } from \"lucide-react\";\nimport { Link } from \"react-router-dom\";\nimport { useWorkspace } from \"@/contexts/WorkspaceContext\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Workspace() {\n  const { workspaces, addWorkspace, selectedWorkspace, setSelectedWorkspace, getAgentsForWorkspace } = useWorkspace();\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [newWorkspaceName, setNewWorkspaceName] = useState(\"\");\n  const { toast } = useToast();\n\n  const handleCreateWorkspace = () => {\n    if (newWorkspaceName.trim()) {\n      const newWorkspace = {\n        id: Date.now().toString(),\n        name: newWorkspaceName,\n        icon: \"Building2\",\n        iconColor: \"text-blue-500\",\n        createdAt: new Date().toLocaleDateString()\n      };\n      \n      addWorkspace(newWorkspace);\n      setSelectedWorkspace(newWorkspace);\n      setNewWorkspaceName(\"\");\n      setIsCreateOpen(false);\n      \n      toast({\n        title: \"Ambiente criado!\",\n        description: `${newWorkspaceName} foi criado com sucesso`,\n      });\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center gap-4\">\n        <Button variant=\"ghost\" size=\"sm\" asChild>\n          <Link to=\"/dashboard\">\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Link>\n        </Button>\n        <div>\n          <h1 className=\"text-3xl font-bold\">Ambientes de Trabalho</h1>\n          <p className=\"text-muted-foreground\">\n            Gerencie seus ambientes e organize seus agentes de IA\n          </p>\n        </div>\n      </div>\n\n      <div className=\"flex justify-end\">\n        <Dialog open={isCreateOpen} onOpenChange={setIsCreateOpen}>\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Criar Ambiente\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Criar Novo Ambiente</DialogTitle>\n              <DialogDescription>\n                Defina um nome para o seu novo ambiente de trabalho\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"workspace-name\">Nome do Ambiente</Label>\n                <Input\n                  id=\"workspace-name\"\n                  placeholder=\"Ex: Escritório, Promotoria...\"\n                  value={newWorkspaceName}\n                  onChange={(e) => setNewWorkspaceName(e.target.value)}\n                  onKeyDown={(e) => e.key === 'Enter' && handleCreateWorkspace()}\n                />\n              </div>\n              <div className=\"flex gap-2 justify-end\">\n                <Button variant=\"outline\" onClick={() => setIsCreateOpen(false)}>\n                  Cancelar\n                </Button>\n                <Button onClick={handleCreateWorkspace}>\n                  Criar\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Workspaces Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n        {workspaces.map((workspace) => {\n          const agentCount = getAgentsForWorkspace(workspace.id).length;\n          const isSelected = selectedWorkspace?.id === workspace.id;\n          \n          return (\n            <Card key={workspace.id} className={`group hover:shadow-lg transition-shadow duration-200 ${isSelected ? 'ring-2 ring-primary' : ''}`}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div className=\"p-3 rounded-lg bg-gray-50 text-blue-500\">\n                    <Building2 className=\"h-6 w-6\" />\n                  </div>\n                  {isSelected && (\n                    <Badge className=\"bg-primary text-primary-foreground\">\n                      Ativo\n                    </Badge>\n                  )}\n                </div>\n\n                <h3 className=\"font-semibold text-gray-900 mb-2 text-lg\">\n                  {workspace.name}\n                </h3>\n\n                <div className=\"space-y-2 mb-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-600\">Agentes</span>\n                    <Badge variant=\"secondary\" className=\"bg-gray-100 text-gray-700\">\n                      {agentCount}\n                    </Badge>\n                  </div>\n                  <p className=\"text-xs text-gray-500\">Criado em {workspace.createdAt}</p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Button \n                    onClick={() => setSelectedWorkspace(workspace)}\n                    className=\"w-full\"\n                    variant={isSelected ? \"secondary\" : \"default\"}\n                  >\n                    {isSelected ? \"Ambiente Ativo\" : \"Selecionar\"}\n                  </Button>\n                  \n                  {isSelected && (\n                    <Button asChild className=\"w-full\" variant=\"outline\">\n                      <Link to=\"/agents/create\">\n                        <Plus className=\"mr-2 h-4 w-4\" />\n                        Criar Agente\n                      </Link>\n                    </Button>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {workspaces.length === 0 && (\n        <div className=\"text-center py-12\">\n          <Building2 className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n            Nenhum ambiente criado\n          </h3>\n          <p className=\"text-gray-600 mb-4\">\n            Crie seu primeiro ambiente de trabalho para organizar seus agentes\n          </p>\n          <Button onClick={() => setIsCreateOpen(true)}>\n            <Plus className=\"mr-2 h-4 w-4\" />\n            Criar Primeiro Ambiente\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/onboarding/CreateWorkspace.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/pages/onboarding/LegalProfile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/pages/onboarding/Welcome.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Brain' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Users' is defined but never used.","line":4,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Brain, FileText, Users, Zap, Scale, Gavel } from \"lucide-react\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport default function Welcome() {\n  const navigate = useNavigate();\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-2xl\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center\">\n              <span className=\"text-white font-bold text-2xl\">L</span>\n            </div>\n          </div>\n          <CardTitle className=\"text-3xl font-bold\">Bem-vindo ao LexAI!</CardTitle>\n          <CardDescription className=\"text-lg\">\n            A plataforma de inteligência artificial desenvolvida especialmente para operadores do direito\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"flex items-start space-x-3\">\n              <div className=\"flex-shrink-0\">\n                <Scale className=\"h-8 w-8 text-blue-500\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold\">Especializado em Direito</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  IA treinada especificamente para advogados, promotores, juízes e operadores jurídicos\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex items-start space-x-3\">\n              <div className=\"flex-shrink-0\">\n                <FileText className=\"h-8 w-8 text-green-500\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold\">Documentos Jurídicos</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Crie petições, pareceres, contratos e outros documentos com precisão técnica\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex items-start space-x-3\">\n              <div className=\"flex-shrink-0\">\n                <Gavel className=\"h-8 w-8 text-purple-500\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold\">Agentes por Matéria</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Organize seus agentes de IA por área jurídica: Civil, Penal, Trabalhista e mais\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex items-start space-x-3\">\n              <div className=\"flex-shrink-0\">\n                <Zap className=\"h-8 w-8 text-yellow-500\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold\">Produtividade Jurídica</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Reduza drasticamente o tempo em tarefas repetitivas e foque no que realmente importa\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"text-center pt-6\">\n            <Button \n              onClick={() => navigate(\"/onboarding/legal-profile\")}\n              size=\"lg\"\n              className=\"w-full md:w-auto\"\n            >\n              Começar Configuração\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/app/src/pages/onboarding/WorkspaceQuestion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/schemas/validationSchemas.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/types/legalSubjectIcons.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Users' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":8}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { \n  Scale, \n  Shield, \n  Briefcase, \n  Calculator, \n  Building, \n  BookOpen, \n  ShoppingCart, \n  Users, \n  Heart, \n  PiggyBank,\n  Leaf,\n  Home,\n  Monitor,\n  Globe,\n  FileText,\n  Gavel,\n  Vote,\n  Copyright\n} from \"lucide-react\";\n\nexport const LEGAL_SUBJECT_ICONS = {\n  'Direito Civil': Scale,\n  'Direito Penal': Shield,\n  'Direito Trabalhista': Briefcase,\n  'Direito Tributário': Calculator,\n  'Direito Administrativo': Building,\n  'Direito Constitucional': BookOpen,\n  'Direito Empresarial': Briefcase,\n  'Direito do Consumidor': ShoppingCart,\n  'Direito de Família': Heart,\n  'Direito Previdenciário': PiggyBank,\n  'Direito Ambiental': Leaf,\n  'Direito Imobiliário': Home,\n  'Direito Digital': Monitor,\n  'Direito Internacional': Globe,\n  'Direito Processual Civil': FileText,\n  'Direito Processual Penal': Gavel,\n  'Direito Eleitoral': Vote,\n  'Propriedade Intelectual': Copyright\n} as const;\n\nexport const LEGAL_SUBJECT_COLORS = {\n  'Direito Civil': 'text-blue-600',\n  'Direito Penal': 'text-red-600',\n  'Direito Trabalhista': 'text-green-600',\n  'Direito Tributário': 'text-yellow-600',\n  'Direito Administrativo': 'text-gray-600',\n  'Direito Constitucional': 'text-purple-600',\n  'Direito Empresarial': 'text-indigo-600',\n  'Direito do Consumidor': 'text-pink-600',\n  'Direito de Família': 'text-rose-600',\n  'Direito Previdenciário': 'text-orange-600',\n  'Direito Ambiental': 'text-emerald-600',\n  'Direito Imobiliário': 'text-amber-600',\n  'Direito Digital': 'text-cyan-600',\n  'Direito Internacional': 'text-teal-600',\n  'Direito Processual Civil': 'text-slate-600',\n  'Direito Processual Penal': 'text-zinc-600',\n  'Direito Eleitoral': 'text-violet-600',\n  'Propriedade Intelectual': 'text-fuchsia-600'\n} as const;\n","usedDeprecatedRules":[]},{"filePath":"/app/src/types/legalSubjects.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/types/prompts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/tailwind.config.ts","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":96,"column":12,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":96,"endColumn":42}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport type { Config } from \"tailwindcss\";\n\nexport default {\n\tdarkMode: [\"class\"],\n\tcontent: [\n\t\t\"./pages/**/*.{ts,tsx}\",\n\t\t\"./components/**/*.{ts,tsx}\",\n\t\t\"./app/**/*.{ts,tsx}\",\n\t\t\"./src/**/*.{ts,tsx}\",\n\t],\n\tprefix: \"\",\n\ttheme: {\n\t\tcontainer: {\n\t\t\tcenter: true,\n\t\t\tpadding: '2rem',\n\t\t\tscreens: {\n\t\t\t\t'2xl': '1400px'\n\t\t\t}\n\t\t},\n\t\textend: {\n\t\t\tcolors: {\n\t\t\t\tborder: 'hsl(var(--border))',\n\t\t\t\tinput: 'hsl(var(--input))',\n\t\t\t\tring: 'hsl(var(--ring))',\n\t\t\t\tbackground: 'hsl(var(--background))',\n\t\t\t\tforeground: 'hsl(var(--foreground))',\n\t\t\t\tprimary: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--primary))',\n\t\t\t\t\tforeground: 'hsl(var(--primary-foreground))'\n\t\t\t\t},\n\t\t\t\tsecondary: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--secondary))',\n\t\t\t\t\tforeground: 'hsl(var(--secondary-foreground))'\n\t\t\t\t},\n\t\t\t\tdestructive: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--destructive))',\n\t\t\t\t\tforeground: 'hsl(var(--destructive-foreground))'\n\t\t\t\t},\n\t\t\t\tmuted: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--muted))',\n\t\t\t\t\tforeground: 'hsl(var(--muted-foreground))'\n\t\t\t\t},\n\t\t\t\taccent: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--accent))',\n\t\t\t\t\tforeground: 'hsl(var(--accent-foreground))'\n\t\t\t\t},\n\t\t\t\tpopover: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--popover))',\n\t\t\t\t\tforeground: 'hsl(var(--popover-foreground))'\n\t\t\t\t},\n\t\t\t\tcard: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--card))',\n\t\t\t\t\tforeground: 'hsl(var(--card-foreground))'\n\t\t\t\t},\n\t\t\t\tsidebar: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--sidebar-background))',\n\t\t\t\t\tforeground: 'hsl(var(--sidebar-foreground))',\n\t\t\t\t\tprimary: 'hsl(var(--sidebar-primary))',\n\t\t\t\t\t'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',\n\t\t\t\t\taccent: 'hsl(var(--sidebar-accent))',\n\t\t\t\t\t'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',\n\t\t\t\t\tborder: 'hsl(var(--sidebar-border))',\n\t\t\t\t\tring: 'hsl(var(--sidebar-ring))'\n\t\t\t\t}\n\t\t\t},\n\t\t\tborderRadius: {\n\t\t\t\tlg: 'var(--radius)',\n\t\t\t\tmd: 'calc(var(--radius) - 2px)',\n\t\t\t\tsm: 'calc(var(--radius) - 4px)'\n\t\t\t},\n\t\t\tkeyframes: {\n\t\t\t\t'accordion-down': {\n\t\t\t\t\tfrom: {\n\t\t\t\t\t\theight: '0'\n\t\t\t\t\t},\n\t\t\t\t\tto: {\n\t\t\t\t\t\theight: 'var(--radix-accordion-content-height)'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'accordion-up': {\n\t\t\t\t\tfrom: {\n\t\t\t\t\t\theight: 'var(--radix-accordion-content-height)'\n\t\t\t\t\t},\n\t\t\t\t\tto: {\n\t\t\t\t\t\theight: '0'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tanimation: {\n\t\t\t\t'accordion-down': 'accordion-down 0.2s ease-out',\n\t\t\t\t'accordion-up': 'accordion-up 0.2s ease-out'\n\t\t\t}\n\t\t}\n\t},\n\tplugins: [require(\"tailwindcss-animate\")],\n} satisfies Config;\n","usedDeprecatedRules":[]},{"filePath":"/app/vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]